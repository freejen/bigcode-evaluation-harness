[
    [
        "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunc strlen(myString string) int {\nreturn len(myString)\n}",
        "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunc strlen(myString string) int {\nreturn len(myString)\n}",
        "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunc strlen(myString string) int {\nreturn len(myString)\n}",
        "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunc strlen(myString string) int {\nreturn len(myString)\n}",
        "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunc strlen(myString string) int {\nreturn len(myString)\n}"
    ],
    [
        "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    encrypted := \"\"\n    for _, r := range s {\n        if r >= 'a' && r <= 'z' {\n            r = (r-'a'+4)%26 + 'a'\n        } else if r >= 'A' && r <= 'Z' {\n            r = (r-'A'+4)%26 + 'A'\n        }\n        encrypted += string(r)\n    }\n    return encrypted\n}",
        "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    encrypted := \"\"\n    for _, r := range s {\n        if r >= 'a' && r <= 'z' {\n            r = (r-'a'+4)%26 + 'a'\n        } else if r >= 'A' && r <= 'Z' {\n            r = (r-'A'+4)%26 + 'A'\n        }\n        encrypted += string(r)\n    }\n    return encrypted\n}",
        "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    encrypted := \"\"\n    for _, r := range s {\n        if r >= 'a' && r <= 'z' {\n            encrypted += string((r-'a'+4)%26 + 'a')\n        } else if r >= 'A' && r <= 'Z' {\n            encrypted += string((r-'A'+4)%26 + 'A')\n        } else {\n            encrypted += string(r)\n        }\n    }\n    return encrypted\n}",
        "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    encrypted := \"\"\n    for _, r := range s {\n        if r >= 'a' && r <= 'z' {\n            encrypted += string((r-'a'+4)%26 + 'a')\n        } else if r >= 'A' && r <= 'Z' {\n            encrypted += string((r-'A'+4)%26 + 'A')\n        } else {\n            encrypted += string(r)\n        }\n    }\n    return encrypted\n}",
        "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    encrypted := \"\"\n    for _, r := range s {\n        if r >= 'a' && r <= 'z' {\n            encrypted += string((r-'a'+4)%26 + 'a')\n        } else if r >= 'A' && r <= 'Z' {\n            encrypted += string((r-'A'+4)%26 + 'A')\n        } else {\n            encrypted += string(r)\n        }\n    }\n    return encrypted\n}"
    ],
    [
        "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string) bool {\nif len(dict) == 0 {\n    return false\n}\n\nallLower := true\nallUpper := true\n\nfor key := range dict {\n    if key != strings.ToLower(key) {\n        allLower = false\n    }\n    if key != strings.ToUpper(key) {\n        allUpper = false\n    }\n}\n\nreturn allLower || allUpper\n}",
        "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string) bool {\nif len(dict) == 0 {\n        return false\n    }\n\n    var allLower, allUpper bool = true, true\n    for key := range dict {\n        if key != strings.ToLower(key) {\n            allLower = false\n        }\n        if key != strings.ToUpper(key) {\n            allUpper = false\n        }\n    }\n\n    return allLower || allUpper\n}",
        "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string) bool {\nif len(dict) == 0 {\n        return false\n    }\n\n    var isLower, isUpper bool\n    for key := range dict {\n        if key == strings.ToLower(key) {\n            isLower = true\n        } else if key == strings.ToUpper(key) {\n            isUpper = true\n        }\n\n        if isLower && isUpper {\n            return false\n        }\n    }\n\n    return true\n}",
        "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string) bool {\nif len(dict) == 0 {\n        return false\n    }\n\n    var isLower, isUpper bool\n    for key := range dict {\n        if key == strings.ToLower(key) {\n            isLower = true\n        } else if key == strings.ToUpper(key) {\n            isUpper = true\n        }\n\n        if isLower && isUpper {\n            return false\n        }\n    }\n\n    return true\n}",
        "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string) bool {\nif len(dict) == 0 {\n        return false\n    }\n\n    var isLower, isUpper bool\n\n    for key := range dict {\n        if key == strings.ToLower(key) {\n            isLower = true\n        } else if key == strings.ToUpper(key) {\n            isUpper = true\n        } else {\n            return false\n        }\n\n        if isLower && isUpper {\n            return false\n        }\n    }\n\n    return true\n}"
    ],
    [
        "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\nsum := 0\nfor i := 1; i < len(lst); i += 2 {\n    if lst[i] % 2 == 0 {\n        sum += lst[i]\n    }\n}\nreturn sum",
        "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\nsum := 0\nfor i, num := range lst {\n    if i%2 != 0 && num%2 == 0 {\n        sum += num\n    }\n}\nreturn sum",
        "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\nsum := 0\nfor i, val := range lst {\n    if i%2 != 0 && val%2 == 0 {\n        sum += val\n    }\n}\nreturn sum",
        "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\nsum := 0\nfor i, num := range lst {\n    if i%2 != 0 && num%2 == 0 {\n        sum += num\n    }\n}\nreturn sum",
        "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\nsum := 0\nfor i, val := range lst {\n    if i%2 != 0 && val%2 == 0 {\n        sum += val\n    }\n}\nreturn sum"
    ],
    [
        "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string) string {\nimport (\n    \"regexp\"\n    \"strings\"\n)\n\n// Use regex to find more than 2 consecutive spaces and replace them with -\nre := regexp.MustCompile(` {2,}`)\ntext = re.ReplaceAllString(text, \"-\")\n\n// Replace remaining single spaces with _\ntext = strings.ReplaceAll(text, \" \", \"_\")\n\nreturn text\n",
        "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string) string {\nimport (\n    \"strings\"\n    \"regexp\"\n)\n\n// Create a regex to find all instances of 2 or more spaces\nre := regexp.MustCompile(` {2,}`)\n\n// Replace all instances of 2 or more spaces with -\ntext = re.ReplaceAllString(text, \"-\")\n\n// Replace all remaining spaces with _\ntext = strings.ReplaceAll(text, \" \", \"_\")\n\nreturn text",
        "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string) string {\nimport (\n    \"strings\"\n    \"regexp\"\n)\n\n// Create a regular expression to match more than 2 consecutive spaces\nre := regexp.MustCompile(` {2,}`)\n\n// Replace all occurrences of more than 2 consecutive spaces with -\ntext = re.ReplaceAllString(text, \"-\")\n\n// Replace all remaining spaces with _\ntext = strings.ReplaceAll(text, \" \", \"_\")\n\nreturn text\n",
        "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string) string {\nimport \"strings\"\nimport \"regexp\"\n\n// Create a regex to match consecutive spaces\nre := regexp.MustCompile(` {2,}`)\n\n// Replace all consecutive spaces with -\ntext = re.ReplaceAllString(text, \"-\")\n\n// Replace remaining spaces with _\ntext = strings.ReplaceAll(text, \" \", \"_\")\n\nreturn text\n",
        "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string) string {\nimport \"strings\"\nimport \"regexp\"\n\n// Create a regex to match more than two consecutive spaces\nre := regexp.MustCompile(` {3,}`)\n\n// Replace all occurrences of more than two consecutive spaces with \"-\"\ntext = re.ReplaceAllString(text, \"-\")\n\n// Replace all remaining spaces with \"_\"\ntext = strings.ReplaceAll(text, \" \", \"_\")\n\nreturn text\n"
    ],
    [
        "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc fibfib(n int) int {\nif n == 0 || n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n        fibfibSeq := make([]int, n+1)\n        fibfibSeq[0], fibfibSeq[1], fibfibSeq[2] = 0, 0, 1\n        for i := 3; i <= n; i++ {\n            fibfibSeq[i] = fibfibSeq[i-1] + fibfibSeq[i-2] + fibfibSeq[i-3]\n        }\n        return fibfibSeq[n]\n    }\n}",
        "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n\n    fibfib := make([]int, n+1)\n    fibfib[0], fibfib[1], fibfib[2] = 0, 0, 1\n\n    for i := 3; i <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n\n    return fibfib[n]\n}",
        "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc fibfib(n int) int {\nif n <= 1 {\n    return 0\n} else if n == 2 {\n    return 1\n} else {\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a+b+c\n    }\n    return c\n}",
        "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc fibfib(n int) int {\nif n <= 1 {\n    return 0\n} else if n == 2 {\n    return 1\n} else {\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a+b+c\n    }\n    return c\n}",
        "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc fibfib(n int) int {\nif n == 0 || n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\n    fibfibSeq := make([]int, n+1)\n    fibfibSeq[0], fibfibSeq[1] = 0, 0\n    fibfibSeq[2] = 1\n\n    for i := 3; i <= n; i++ {\n        fibfibSeq[i] = fibfibSeq[i-1] + fibfibSeq[i-2] + fibfibSeq[i-3]\n    }\n\n    return fibfibSeq[n]\n}"
    ],
    [
        "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1, -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n// 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst []float64) int {\nsum := 0\nfor _, num := range lst {\n    if num < 0 || num != float64(int(num)) {\n        continue\n    }\n    intNum := int(num)\n    if intNum%2 != 0 {\n        sum += intNum * intNum\n    }\n}\nreturn sum",
        "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1, -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n// 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst []float64) int {\nsum := 0\nfor _, num := range lst {\n    if num < 0 || num != float64(int(num)) {\n        continue\n    }\n    if int(num)%2 != 0 {\n        sum += int(num) * int(num)\n    }\n}\nreturn sum",
        "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1, -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n// 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst []float64) int {\nsum := 0\nfor _, num := range lst {\n    if num < 0 || num != float64(int(num)) {\n        continue\n    }\n    if int(num)%2 != 0 {\n        sum += int(num) * int(num)\n    }\n}\nreturn sum",
        "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1, -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n// 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst []float64) int {\nvar sum int\nfor _, num := range lst {\n    if num < 0 || num != float64(int(num)) {\n        continue\n    }\n    if int(num)%2 != 0 {\n        sum += int(num) * int(num)\n    }\n}\nreturn sum",
        "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1, -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n// 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst []float64) int {\nsum := 0\nfor _, num := range lst {\n    if num < 0 || num != float64(int(num)) {\n        continue\n    }\n    if int(num)%2 != 0 {\n        sum += int(num) * int(num)\n    }\n}\nreturn sum"
    ],
    [
        "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc filter_integers(values []interface{}) []int {\nvar result []int\nfor _, value := range values {\n    if v, ok := value.(int); ok {\n        result = append(result, v)\n    }\n}\nreturn result",
        "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc filter_integers(values []interface{}) []int {\nvar result []int\nfor _, value := range values {\n    if v, ok := value.(int); ok {\n        result = append(result, v)\n    }\n}\nreturn result",
        "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc filter_integers(values []interface{}) []int {\nvar ints []int\nfor _, value := range values {\n    if v, ok := value.(int); ok {\n        ints = append(ints, v)\n    }\n}\nreturn ints",
        "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc filter_integers(values []interface{}) []int {\nvar result []int\nfor _, value := range values {\n    if num, ok := value.(int); ok {\n        result = append(result, num)\n    }\n}\nreturn result",
        "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc filter_integers(values []interface{}) []int {\nvar intValues []int\nfor _, value := range values {\n    switch value := value.(type) {\n    case int:\n        intValues = append(intValues, value)\n    }\n}\nreturn intValues\n}"
    ],
    [
        "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunc car_race_collision(n int) int {\n// Since each car moving left to right will collide with a car moving right to left, \n// the number of collisions will be equal to the number of cars moving in one direction.\nreturn n\n}",
        "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunc car_race_collision(n int) int {\n// Since all cars move at the same speed and start far from each other, \n// each car moving left to right will collide with a car moving right to left.\n// Therefore, the number of collisions is equal to the number of cars in one direction.\nreturn n\n}",
        "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunc car_race_collision(n int) int {\n// Since each car moving from left to right will collide with a car moving from right to left, the number of collisions will be equal to the number of cars in one direction.\nreturn n\n}",
        "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunc car_race_collision(n int) int {\n// Since each car moving from left to right will collide with each car moving from right to left, \n// the total number of collisions will be n * n.\nreturn n * n\n}",
        "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunc car_race_collision(n int) int {\n// Since each car moving left to right will collide with each car moving right to left, \n// the total number of collisions will be n*n.\nreturn n * n\n}"
    ],
    [
        "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string string) []int {\nnotes := strings.Split(music_string, \" \")\nbeats := make([]int, len(notes))\n\nfor i, note := range notes {\n    switch note {\n    case \"o\":\n        beats[i] = 4\n    case \"o|\":\n        beats[i] = 2\n    case \".|\":\n        beats[i] = 1\n    default:\n        fmt.Println(\"Invalid note\", note)\n    }\n}\n\nreturn beats",
        "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string string) []int {\nnotes := strings.Split(music_string, \" \")\nresult := make([]int, len(notes))\n\nfor i, note := range notes {\n    switch note {\n    case \"o\":\n        result[i] = 4\n    case \"o|\":\n        result[i] = 2\n    case \".|\":\n        result[i] = 1\n    default:\n        fmt.Println(\"Invalid note:\", note)\n    }\n}\n\nreturn result",
        "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string string) []int {\nnotes := strings.Split(music_string, \" \")\nresult := make([]int, len(notes))\n\nfor i, note := range notes {\n    switch note {\n    case \"o\":\n        result[i] = 4\n    case \"o|\":\n        result[i] = 2\n    case \".|\":\n        result[i] = 1\n    default:\n        fmt.Println(\"Invalid note:\", note)\n    }\n}\n\nreturn result",
        "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string string) []int {\nnotes := strings.Split(music_string, \" \")\nresult := make([]int, len(notes))\n\nfor i, note := range notes {\n    switch note {\n    case \"o\":\n        result[i] = 4\n    case \"o|\":\n        result[i] = 2\n    case \".|\":\n        result[i] = 1\n    default:\n        fmt.Printf(\"Invalid note: %s\", note)\n    }\n}\n\nreturn result",
        "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string string) []int {\nnotes := strings.Split(music_string, \" \")\nbeats := make([]int, len(notes))\n\nfor i, note := range notes {\n    switch note {\n    case \"o\":\n        beats[i] = 4\n    case \"o|\":\n        beats[i] = 2\n    case \".|\":\n        beats[i] = 1\n    default:\n        fmt.Printf(\"Unknown note: %s\\n\", note)\n    }\n}\n\nreturn beats"
    ],
    [
        "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int) string {\nbinary := fmt.Sprintf(\"%b\", decimal)\nreturn \"db\" + binary + \"db\"\n",
        "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int) string {\nbinary := fmt.Sprintf(\"%b\", decimal)\nreturn \"db\" + binary + \"db\"\n",
        "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int) string {\nbinary := fmt.Sprintf(\"%b\", decimal)\nreturn \"db\" + binary + \"db\"\n",
        "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int) string {\nbinary := fmt.Sprintf(\"%b\", decimal)\nreturn \"db\" + binary + \"db\"\n",
        "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int) string {\nbinary := fmt.Sprintf(\"%b\", decimal)\nreturn \"db\" + binary + \"db\"\n"
    ],
    [
        "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString string) []string {\nvar prefixes []string\nfor i := 1; i <= len(myString); i++ {\n    prefixes = append(prefixes, myString[:i])\n}\nreturn prefixes",
        "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString string) []string {\nvar prefixes []string\nfor i := 1; i <= len(myString); i++ {\n    prefixes = append(prefixes, myString[:i])\n}\nreturn prefixes",
        "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString string) []string {\nvar prefixes []string\nfor i := 1; i <= len(myString); i++ {\n    prefixes = append(prefixes, myString[:i])\n}\nreturn prefixes",
        "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString string) []string {\nvar prefixes []string\nfor i := 1; i <= len(myString); i++ {\n    prefixes = append(prefixes, myString[:i])\n}\nreturn prefixes",
        "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString string) []string {\nvar prefixes []string\nfor i := 1; i <= len(myString); i++ {\n    prefixes = append(prefixes, myString[:i])\n}\nreturn prefixes"
    ],
    [
        "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x int, y int) int {\nreturn x + y\n}",
        "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x int, y int) int {\nreturn x + y\n}",
        "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x int, y int) int {\nreturn x + y\n}",
        "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x int, y int) int {\nreturn x + y\n}",
        "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x int, y int) int {\nreturn x + y\n}"
    ],
    [
        "package eat_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a list of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// []int{11, 4}\n// >>> eat(4, 8, 9)\n// []int{12, 1}\n// >>> eat(1, 10, 10)\n// []int{11, 0}\n// >>> eat(2, 11, 5)\n// []int{7, 0}\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunc eat(number int, need int, remaining int) []int {\nif need <= remaining {\n    return []int{number + need, remaining - need}\n} else {\n    return []int{number + remaining, 0}\n}",
        "package eat_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a list of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// []int{11, 4}\n// >>> eat(4, 8, 9)\n// []int{12, 1}\n// >>> eat(1, 10, 10)\n// []int{11, 0}\n// >>> eat(2, 11, 5)\n// []int{7, 0}\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunc eat(number int, need int, remaining int) []int {\n    // Calculate the number of carrots you will eat\n    eat := need\n    if remaining < need {\n        eat = remaining\n    }\n\n    // Calculate the total number of carrots eaten and remaining\n    totalEaten := number + eat\n    remaining = remaining - eat\n\n    return []int{totalEaten, remaining}\n}",
        "package eat_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a list of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// []int{11, 4}\n// >>> eat(4, 8, 9)\n// []int{12, 1}\n// >>> eat(1, 10, 10)\n// []int{11, 0}\n// >>> eat(2, 11, 5)\n// []int{7, 0}\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunc eat(number int, need int, remaining int) []int {\nif need <= remaining {\n    return []int{number + need, remaining - need}\n} else {\n    return []int{number + remaining, 0}\n}",
        "package eat_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a list of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// []int{11, 4}\n// >>> eat(4, 8, 9)\n// []int{12, 1}\n// >>> eat(1, 10, 10)\n// []int{11, 0}\n// >>> eat(2, 11, 5)\n// []int{7, 0}\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunc eat(number int, need int, remaining int) []int {\nif need <= remaining {\n    return []int{number + need, remaining - need}\n} else {\n    return []int{number + remaining, 0}\n}",
        "package eat_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a list of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// []int{11, 4}\n// >>> eat(4, 8, 9)\n// []int{12, 1}\n// >>> eat(1, 10, 10)\n// []int{11, 0}\n// >>> eat(2, 11, 5)\n// []int{7, 0}\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunc eat(number int, need int, remaining int) []int {\nif need <= remaining {\n    return []int{number + need, remaining - need}\n} else {\n    return []int{number + remaining, 0}\n}"
    ],
    [
        "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1)\n// 6\n// Example 2:\n// >>> max_fill([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2)\n// 5\n// Example 3:\n// >>> max_fill([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid [][]int, capacity int) int {\n    // Initialize a variable to keep track of the number of times the bucket is lowered\n    var bucketLowerCount int\n\n    // Iterate over the grid\n    for {\n        // Initialize a variable to keep track of the number of units of water extracted in this round\n        var waterExtracted int\n\n        // Iterate over each row in the grid\n        for i := 0; i < len(grid); i++ {\n            // Iterate over each cell in the row\n            for j := 0; j < len(grid[i]); j++ {\n                // If the cell contains water and the bucket has capacity, extract the water\n                if grid[i][j] == 1 && waterExtracted < capacity {\n                    grid[i][j] = 0\n                    waterExtracted++\n                }\n            }\n        }\n\n        // If no water was extracted in this round, all wells are empty\n        if waterExtracted == 0 {\n            break\n        }\n\n        // Increment the bucket lower count\n        bucketLowerCount++\n    }\n\n    // Return the number of times the bucket was lowered\n    return bucketLowerCount\n}",
        "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1)\n// 6\n// Example 2:\n// >>> max_fill([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2)\n// 5\n// Example 3:\n// >>> max_fill([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid [][]int, capacity int) int {\ntotalWater := 0\nfor _, row := range grid {\n    for _, cell := range row {\n        if cell == 1 {\n            totalWater++\n        }\n    }\n}\nnumBuckets := totalWater / capacity\nif totalWater % capacity != 0 {\n    numBuckets++\n}\nreturn numBuckets",
        "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1)\n// 6\n// Example 2:\n// >>> max_fill([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2)\n// 5\n// Example 3:\n// >>> max_fill([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid [][]int, capacity int) int {\ntotalWater := 0\nfor _, well := range grid {\n    for _, water := range well {\n        totalWater += water\n    }\n}\n\nif totalWater%capacity == 0 {\n    return totalWater / capacity\n} else {\n    return totalWater/capacity + 1\n}\n}",
        "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1)\n// 6\n// Example 2:\n// >>> max_fill([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2)\n// 5\n// Example 3:\n// >>> max_fill([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid [][]int, capacity int) int {\n    totalWater := 0\n    for _, row := range grid {\n        for _, well := range row {\n            totalWater += well\n        }\n    }\n\n    if totalWater%capacity == 0 {\n        return totalWater / capacity\n    } else {\n        return totalWater/capacity + 1\n    }\n}",
        "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1)\n// 6\n// Example 2:\n// >>> max_fill([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2)\n// 5\n// Example 3:\n// >>> max_fill([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid [][]int, capacity int) int {\ntotalWater := 0\nfor _, row := range grid {\n    for _, cell := range row {\n        if cell == 1 {\n            totalWater++\n        }\n    }\n}\n\nbucketLowers := totalWater / capacity\nif totalWater%capacity != 0 {\n    bucketLowers++\n}\n\nreturn bucketLowers"
    ],
    [
        "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nfunc do_algebra(operator []string, operand []int) int {\nresult := operand[0]\nfor i := 1; i < len(operand); i++ {\n    switch operator[i-1] {\n    case \"+\":\n        result += operand[i]\n    case \"-\":\n        result -= operand[i]\n    case \"*\":\n        result *= operand[i]\n    case \"//\":\n        result /= operand[i]\n    case \"**\":\n        temp := result\n        for j := 1; j < operand[i]; j++ {\n            result *= temp\n        }\n    }\n}\nreturn result",
        "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nfunc do_algebra(operator []string, operand []int) int {\nresult := operand[0]\n\nfor i := 1; i < len(operand); i++ {\n    switch operator[i-1] {\n    case \"+\":\n        result += operand[i]\n    case \"-\":\n        result -= operand[i]\n    case \"*\":\n        result *= operand[i]\n    case \"//\":\n        result /= operand[i]\n    case \"**\":\n        temp := result\n        for j := 1; j < operand[i]; j++ {\n            result *= temp\n        }\n    default:\n        fmt.Println(\"Invalid operator\")\n    }\n}\n\nreturn result",
        "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nfunc do_algebra(operator []string, operand []int) int {\nresult := operand[0]\nfor i := 1; i < len(operand); i++ {\n    switch operator[i-1] {\n    case \"+\":\n        result += operand[i]\n    case \"-\":\n        result -= operand[i]\n    case \"*\":\n        result *= operand[i]\n    case \"//\":\n        result /= operand[i]\n    case \"**\":\n        temp := result\n        for j := 1; j < operand[i]; j++ {\n            result *= temp\n        }\n    default:\n        fmt.Println(\"Invalid operator\")\n    }\n}\nreturn result",
        "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nfunc do_algebra(operator []string, operand []int) int {\nresult := operand[0]\nfor i := 1; i < len(operand); i++ {\n    switch operator[i-1] {\n    case \"+\":\n        result += operand[i]\n    case \"-\":\n        result -= operand[i]\n    case \"*\":\n        result *= operand[i]\n    case \"//\":\n        result /= operand[i]\n    case \"**\":\n        temp := result\n        for j := 1; j < operand[i]; j++ {\n            result *= temp\n        }\n    }\n}\nreturn result",
        "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nfunc do_algebra(operator []string, operand []int) int {\nresult := operand[0]\nfor i := 1; i < len(operand); i++ {\n    switch operator[i-1] {\n    case \"+\":\n        result += operand[i]\n    case \"-\":\n        result -= operand[i]\n    case \"*\":\n        result *= operand[i]\n    case \"//\":\n        result /= operand[i]\n    case \"**\":\n        result = int(math.Pow(float64(result), float64(operand[i])))\n    default:\n        fmt.Printf(\"Unknown operator: %s\\n\", operator[i-1])\n    }\n}\nreturn result"
    ],
    [
        "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString string) string {\nvar flippedString string\nfor _, char := range myString {\n    if 'a' <= char && char <= 'z' {\n        flippedString += string(char - 32)\n    } else if 'A' <= char && char <= 'Z' {\n        flippedString += string(char + 32)\n    } else {\n        flippedString += string(char)\n    }\n}\nreturn flippedString",
        "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString string) string {\nvar flippedString string\nfor _, c := range myString {\n    if 'a' <= c && c <= 'z' {\n        flippedString += string(c - 32)\n    } else if 'A' <= c && c <= 'Z' {\n        flippedString += string(c + 32)\n    } else {\n        flippedString += string(c)\n    }\n}\nreturn flippedString",
        "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString string) string {\nvar flippedString string\nfor _, char := range myString {\n    if char >= 'a' && char <= 'z' {\n        flippedString += string(char - 32)\n    } else if char >= 'A' && char <= 'Z' {\n        flippedString += string(char + 32)\n    } else {\n        flippedString += string(char)\n    }\n}\nreturn flippedString",
        "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString string) string {\nvar flippedString string\nfor _, char := range myString {\n    if char >= 'a' && char <= 'z' {\n        flippedString += string(char - 32)\n    } else if char >= 'A' && char <= 'Z' {\n        flippedString += string(char + 32)\n    } else {\n        flippedString += string(char)\n    }\n}\nreturn flippedString",
        "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString string) string {\nvar flippedString string\nfor _, char := range myString {\n    if char >= 'a' && char <= 'z' {\n        flippedString += string(char - 32)\n    } else if char >= 'A' && char <= 'Z' {\n        flippedString += string(char + 32)\n    } else {\n        flippedString += string(char)\n    }\n}\nreturn flippedString"
    ],
    [
        "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n// Define the mapping from integer to string\ndigitNames := map[int]string{\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n// Filter the array to only include values between 1 and 9\nfiltered := []int{}\nfor _, num := range arr {\n    if num >= 1 && num <= 9 {\n        filtered = append(filtered, num)\n    }\n}\n\n// Sort the filtered array\nsort.Ints(filtered)\n\n// Reverse the array\nfor i, j := 0, len(filtered)-1; i < j; i, j = i+1, j-1 {\n    filtered[i], filtered[j] = filtered[j], filtered[i]\n}\n\n// Convert the integers to their string representations\nresult := []string{}\nfor _, num := range filtered {\n    result = append(result, digitNames[num])\n}\n\nreturn result",
        "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n// Define the mapping from digits to words\ndigitToWord := map[int]string{\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n// Filter the array to only include numbers between 1 and 9\nfilteredArr := make([]int, 0)\nfor _, num := range arr {\n    if num >= 1 && num <= 9 {\n        filteredArr = append(filteredArr, num)\n    }\n}\n\n// Sort the array\nsort.Ints(filteredArr)\n\n// Reverse the array\nfor i, j := 0, len(filteredArr)-1; i < j; i, j = i+1, j-1 {\n    filteredArr[i], filteredArr[j] = filteredArr[j], filteredArr[i]\n}\n\n// Convert the digits to words\nresult := make([]string, len(filteredArr))\nfor i, num := range filteredArr {\n    result[i] = digitToWord[num]\n}\n\nreturn result",
        "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\ndigitNames := []string{\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\nsort.Ints(arr)\n\nfiltered := make([]int, 0)\nfor _, v := range arr {\n    if v >= 1 && v <= 9 {\n        filtered = append(filtered, v)\n    }\n}\n\nresult := make([]string, len(filtered))\nfor i, v := range filtered {\n    result[len(filtered)-1-i] = digitNames[v]\n}\n\nreturn result",
        "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\ndigitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\nfiltered := []int{}\nfor _, num := range arr {\n    if num >= 1 && num <= 9 {\n        filtered = append(filtered, num)\n    }\n}\n\nsort.Ints(filtered)\nreversed := []int{}\nfor i := len(filtered) - 1; i >= 0; i-- {\n    reversed = append(reversed, filtered[i])\n}\n\nresult := []string{}\nfor _, num := range reversed {\n    result = append(result, digitNames[num-1])\n}\n\nreturn result",
        "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\nnumbers := map[int]string{\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\nfiltered := make([]int, 0)\nfor _, num := range arr {\n    if num >= 1 && num <= 9 {\n        filtered = append(filtered, num)\n    }\n}\n\nsort.Slice(filtered, func(i, j int) bool {\n    return filtered[i] > filtered[j]\n})\n\nresult := make([]string, len(filtered))\nfor i, num := range filtered {\n    result[i] = numbers[num]\n}\n\nreturn result"
    ],
    [
        "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>> factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc factorize(n int) []int {\nvar factors []int\nfor i := 2; i*i <= n; i++ {\n    for n%i == 0 {\n        factors = append(factors, i)\n        n /= i\n    }\n}\nif n > 1 {\n    factors = append(factors, n)\n}\nreturn factors\n}",
        "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>> factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc factorize(n int) []int {\n    var factors []int\n    for i := 2; i*i <= n; i++ {\n        for n%i == 0 {\n            factors = append(factors, i)\n            n = n / i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}",
        "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>> factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc factorize(n int) []int {\nfactors := make([]int, 0)\n\nfor i := 2; i*i <= n; i++ {\n    for n%i == 0 {\n        factors = append(factors, i)\n        n = n / i\n    }\n}\n\nif n > 1 {\n    factors = append(factors, n)\n}\n\nreturn factors\n",
        "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>> factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc factorize(n int) []int {\n    factors := make([]int, 0)\n\n    // Divide by 2 until n is odd\n    for n%2 == 0 {\n        factors = append(factors, 2)\n        n = n / 2\n    }\n\n    // n must be odd at this point so we can skip one element\n    for i := 3; i*i <= n; i = i + 2 {\n        // while i divides n, append i and divide n\n        for n%i == 0 {\n            factors = append(factors, i)\n            n = n / i\n        }\n    }\n\n    // This condition is to handle the case when n is a prime number\n    // greater than 2\n    if n > 2 {\n        factors = append(factors, n)\n    }\n\n    return factors\n}",
        "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>> factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc factorize(n int) []int {\n    var factors []int\n    for i := 2; i*i <= n; i++ {\n        for n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}"
    ],
    [
        "package count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement a function that takes an non-negative integer and returns a list of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// []int{2, 3}\n// >>> count_up_to(11)\n// []int{2, 3, 5, 7}\n// >>> count_up_to(0)\n// []int{}\n// >>> count_up_to(20)\n// []int{2, 3, 5, 7, 11, 13, 17, 19}\n// >>> count_up_to(1)\n// []int{}\n// >>> count_up_to(18)\n// []int{2, 3, 5, 7, 11, 13, 17}\nfunc count_up_to(n int) []int {\n    primes := []int{}\n    for i := 2; i < n; i++ {\n        isPrime := true\n        for j := 2; j*j <= i; j++ {\n            if i % j == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}",
        "package count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement a function that takes an non-negative integer and returns a list of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// []int{2, 3}\n// >>> count_up_to(11)\n// []int{2, 3, 5, 7}\n// >>> count_up_to(0)\n// []int{}\n// >>> count_up_to(20)\n// []int{2, 3, 5, 7, 11, 13, 17, 19}\n// >>> count_up_to(1)\n// []int{}\n// >>> count_up_to(18)\n// []int{2, 3, 5, 7, 11, 13, 17}\nfunc count_up_to(n int) []int {\n    primes := []int{}\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}\n\nfunc isPrime(n int) bool {\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return n != 1\n}",
        "package count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement a function that takes an non-negative integer and returns a list of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// []int{2, 3}\n// >>> count_up_to(11)\n// []int{2, 3, 5, 7}\n// >>> count_up_to(0)\n// []int{}\n// >>> count_up_to(20)\n// []int{2, 3, 5, 7, 11, 13, 17, 19}\n// >>> count_up_to(1)\n// []int{}\n// >>> count_up_to(18)\n// []int{2, 3, 5, 7, 11, 13, 17}\nfunc count_up_to(n int) []int {\n    primes := []int{}\n    for i := 2; i < n; i++ {\n        isPrime := true\n        for j := 2; j*j <= i; j++ {\n            if i%j == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}",
        "package count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement a function that takes an non-negative integer and returns a list of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// []int{2, 3}\n// >>> count_up_to(11)\n// []int{2, 3, 5, 7}\n// >>> count_up_to(0)\n// []int{}\n// >>> count_up_to(20)\n// []int{2, 3, 5, 7, 11, 13, 17, 19}\n// >>> count_up_to(1)\n// []int{}\n// >>> count_up_to(18)\n// []int{2, 3, 5, 7, 11, 13, 17}\nfunc count_up_to(n int) []int {\n    var primes []int\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}",
        "package count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement a function that takes an non-negative integer and returns a list of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// []int{2, 3}\n// >>> count_up_to(11)\n// []int{2, 3, 5, 7}\n// >>> count_up_to(0)\n// []int{}\n// >>> count_up_to(20)\n// []int{2, 3, 5, 7, 11, 13, 17, 19}\n// >>> count_up_to(1)\n// []int{}\n// >>> count_up_to(18)\n// []int{2, 3, 5, 7, 11, 13, 17}\nfunc count_up_to(n int) []int {\n    primes := []int{}\n    for i := 2; i < n; i++ {\n        isPrime := true\n        for j := 2; j*j <= i; j++ {\n            if i%j == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}"
    ],
    [
        "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n// Create a map to store unique elements\nuniqueMap := make(map[int]bool)\n\n// Loop through the list and add elements to the map\nfor _, value := range l {\n    uniqueMap[value] = true\n}\n\n// Create a slice to store the unique elements\nuniqueSlice := make([]int, 0, len(uniqueMap))\n\n// Add the keys from the map to the slice\nfor key := range uniqueMap {\n    uniqueSlice = append(uniqueSlice, key)\n}\n\n// Sort the slice\nsort.Ints(uniqueSlice)\n\n// Return the sorted unique elements\nreturn uniqueSlice\n",
        "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n// Create a map to store unique elements\nuniqueMap := make(map[int]bool)\nvar uniqueList []int\n\n// Iterate over the list and store unique elements in map\nfor _, value := range l {\n    if _, found := uniqueMap[value]; !found {\n        uniqueMap[value] = true\n        uniqueList = append(uniqueList, value)\n    }\n}\n\n// Sort the unique list\nsort.Ints(uniqueList)\n\nreturn uniqueList\n",
        "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n// Create a map to store unique elements\nuniqueElements := make(map[int]bool)\nvar uniqueList []int\n\n// Iterate over the list\nfor _, value := range l {\n    // If the value does not exist in the map, add it\n    if _, ok := uniqueElements[value]; !ok {\n        uniqueElements[value] = true\n        uniqueList = append(uniqueList, value)\n    }\n}\n\n// Sort the uniqueList\nsort.Ints(uniqueList)\n\nreturn uniqueList\n",
        "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n// Create a map to track unique elements\nuniqueMap := make(map[int]bool)\nvar uniqueList []int\n\n// Loop over the list and add unique elements to the map\nfor _, value := range l {\n    if _, found := uniqueMap[value]; !found {\n        uniqueMap[value] = true\n        uniqueList = append(uniqueList, value)\n    }\n}\n\n// Sort the unique list\nsort.Ints(uniqueList)\n\nreturn uniqueList\n",
        "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n// Create a map to store unique elements\nuniqueMap := make(map[int]bool)\n\n// Iterate over the list to populate the map\nfor _, val := range l {\n    uniqueMap[val] = true\n}\n\n// Create a slice to store the unique elements\nuniqueSlice := make([]int, 0, len(uniqueMap))\n\n// Populate the slice with elements from the map\nfor key := range uniqueMap {\n    uniqueSlice = append(uniqueSlice, key)\n}\n\n// Sort the slice\nsort.Ints(uniqueSlice)\n\nreturn uniqueSlice\n"
    ],
    [
        "package total_match_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// >>> total_match([]string{}, []string{})\n// []string{}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"Hi\"})\n// []string{\"hI\", \"Hi\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hi\", \"hi\", \"admin\", \"project\"})\n// []string{\"hi\", \"admin\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"hi\", \"hi\"})\n// []string{\"hI\", \"hi\", \"hi\"}\n// >>> total_match([]string{\"4\"}, []string{\"1\", \"2\", \"3\", \"4\", \"5\"})\n// []string{\"4\"}\nfunc total_match(lst1 []string, lst2 []string) []string {\n    totalCharsLst1 := 0\n    totalCharsLst2 := 0\n\n    // Calculate total number of chars in lst1\n    for _, str := range lst1 {\n        totalCharsLst1 += len(str)\n    }\n\n    // Calculate total number of chars in lst2\n    for _, str := range lst2 {\n        totalCharsLst2 += len(str)\n    }\n\n    // Compare total number of chars and return the appropriate list\n    if totalCharsLst1 <= totalCharsLst2 {\n        return lst1\n    } else {\n        return lst2\n    }\n}",
        "package total_match_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// >>> total_match([]string{}, []string{})\n// []string{}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"Hi\"})\n// []string{\"hI\", \"Hi\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hi\", \"hi\", \"admin\", \"project\"})\n// []string{\"hi\", \"admin\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"hi\", \"hi\"})\n// []string{\"hI\", \"hi\", \"hi\"}\n// >>> total_match([]string{\"4\"}, []string{\"1\", \"2\", \"3\", \"4\", \"5\"})\n// []string{\"4\"}\nfunc total_match(lst1 []string, lst2 []string) []string {\n    var total1, total2 int\n    for _, str := range lst1 {\n        total1 += len(str)\n    }\n    for _, str := range lst2 {\n        total2 += len(str)\n    }\n    if total1 <= total2 {\n        return lst1\n    }\n    return lst2\n}",
        "package total_match_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// >>> total_match([]string{}, []string{})\n// []string{}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"Hi\"})\n// []string{\"hI\", \"Hi\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hi\", \"hi\", \"admin\", \"project\"})\n// []string{\"hi\", \"admin\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"hi\", \"hi\"})\n// []string{\"hI\", \"hi\", \"hi\"}\n// >>> total_match([]string{\"4\"}, []string{\"1\", \"2\", \"3\", \"4\", \"5\"})\n// []string{\"4\"}\nfunc total_match(lst1 []string, lst2 []string) []string {\n    var totalCharsLst1, totalCharsLst2 int\n\n    for _, str := range lst1 {\n        totalCharsLst1 += len(str)\n    }\n\n    for _, str := range lst2 {\n        totalCharsLst2 += len(str)\n    }\n\n    if totalCharsLst1 <= totalCharsLst2 {\n        return lst1\n    } else {\n        return lst2\n    }\n}",
        "package total_match_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// >>> total_match([]string{}, []string{})\n// []string{}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"Hi\"})\n// []string{\"hI\", \"Hi\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hi\", \"hi\", \"admin\", \"project\"})\n// []string{\"hi\", \"admin\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"hi\", \"hi\"})\n// []string{\"hI\", \"hi\", \"hi\"}\n// >>> total_match([]string{\"4\"}, []string{\"1\", \"2\", \"3\", \"4\", \"5\"})\n// []string{\"4\"}\nfunc total_match(lst1 []string, lst2 []string) []string {\n    var totalCharsLst1, totalCharsLst2 int\n    for _, str := range lst1 {\n        totalCharsLst1 += len(str)\n    }\n    for _, str := range lst2 {\n        totalCharsLst2 += len(str)\n    }\n    if totalCharsLst1 <= totalCharsLst2 {\n        return lst1\n    } else {\n        return lst2\n    }\n}",
        "package total_match_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// >>> total_match([]string{}, []string{})\n// []string{}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"Hi\"})\n// []string{\"hI\", \"Hi\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hi\", \"hi\", \"admin\", \"project\"})\n// []string{\"hi\", \"admin\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"hi\", \"hi\"})\n// []string{\"hI\", \"hi\", \"hi\"}\n// >>> total_match([]string{\"4\"}, []string{\"1\", \"2\", \"3\", \"4\", \"5\"})\n// []string{\"4\"}\nfunc total_match(lst1 []string, lst2 []string) []string {\n    // Calculate total number of characters in lst1\n    totalCharsLst1 := 0\n    for _, str := range lst1 {\n        totalCharsLst1 += len(str)\n    }\n\n    // Calculate total number of characters in lst2\n    totalCharsLst2 := 0\n    for _, str := range lst2 {\n        totalCharsLst2 += len(str)\n    }\n\n    // Compare total number of characters and return the list with less characters\n    if totalCharsLst1 <= totalCharsLst2 {\n        return lst1\n    } else {\n        return lst2\n    }\n}"
    ],
    [
        "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n// 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\nfunc max_element(l []int) int {\nif len(l) == 0 {\n    fmt.Println(\"Empty list\")\n    return 0\n}\n\nmax := l[0]\nfor _, value := range l {\n    if value > max {\n        max = value\n    }\n}\nreturn max\n}",
        "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n// 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\nfunc max_element(l []int) int {\nif len(l) == 0 {\n        fmt.Println(\"Empty list\")\n        return 0\n    }\n    max := l[0]\n    for _, value := range l {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}",
        "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n// 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\nfunc max_element(l []int) int {\nif len(l) == 0 {\n    return 0\n}\n\nmax := l[0]\nfor _, value := range l {\n    if value > max {\n        max = value\n    }\n}\nreturn max\n}",
        "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n// 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\nfunc max_element(l []int) int {\nif len(l) == 0 {\n        fmt.Println(\"Empty list\")\n        return 0\n    }\n    max := l[0]\n    for _, value := range l {\n        if max < value {\n            max = value\n        }\n    }\n    return max\n}",
        "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n// 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\nfunc max_element(l []int) int {\nif len(l) == 0 {\n    fmt.Println(\"Empty list\")\n    return 0\n}\n\nmax := l[0]\n\nfor _, value := range l {\n    if value > max {\n        max = value\n    }\n}\n\nreturn max\n}"
    ],
    [
        "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunc is_nested(myString string) bool {\n    var stack []rune\n\n    for _, char := range myString {\n        if char == '[' {\n            stack = append(stack, char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n\n    if len(stack) != 0 {\n        return false\n    }\n\n    return true\n}",
        "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunc is_nested(myString string) bool {\n    stack := []rune{}\n\n    for _, c := range myString {\n        if c == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n\n    if len(stack) != 0 {\n        return false\n    }\n\n    return true\n}",
        "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunc is_nested(myString string) bool {\n    var stack []rune\n\n    for _, char := range myString {\n        if char == '[' {\n            stack = append(stack, char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n\n    return len(stack) == 0\n}",
        "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunc is_nested(myString string) bool {\n    var bracketCount int\n    var nested bool\n\n    for _, char := range myString {\n        if char == '[' {\n            bracketCount++\n        } else if char == ']' {\n            if bracketCount > 0 {\n                bracketCount--\n                if bracketCount > 0 {\n                    nested = true\n                }\n            } else {\n                return false\n            }\n        }\n    }\n\n    return nested && bracketCount == 0\n}",
        "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunc is_nested(myString string) bool {\nstack := []rune{}\n\nfor _, char := range myString {\n    if char == '[' {\n        stack = append(stack, char)\n    } else if char == ']' {\n        if len(stack) == 0 {\n            return false\n        }\n        stack = stack[:len(stack)-1]\n    }\n}\n\nreturn len(stack) == 0\n}"
    ],
    [
        "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\nvar result []string\nfor _, str := range lst {\n    oddCount := 0\n    for _, char := range str {\n        if (char-'0')%2 != 0 {\n            oddCount++\n        }\n    }\n    oddStr := fmt.Sprintf(\"the number of odd elements %dn the str%vng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount)\n    result = append(result, oddStr)\n}\nreturn result",
        "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\nvar result []string\nfor _, str := range lst {\n    count := 0\n    for _, r := range str {\n        if int(r-'0')%2 != 0 {\n            count++\n        }\n    }\n    res := fmt.Sprintf(\"the number of odd elements %dn the str%vng %v of the %vnput.\", count, count, count, count)\n    result = append(result, res)\n}\nreturn result",
        "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, str := range lst {\n        count := 0\n        for _, r := range str {\n            if int(r-'0')%2 != 0 {\n                count++\n            }\n        }\n        countStr := fmt.Sprintf(\"%d\", count)\n        result = append(result, fmt.Sprintf(\"the number of odd elements %sn the str%sg %s of the %snput.\", countStr, countStr, countStr, countStr))\n    }\n    return result\n}",
        "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\nvar result []string\nfor _, str := range lst {\n    oddCount := 0\n    for _, ch := range str {\n        if (ch-'0')%2 != 0 {\n            oddCount++\n        }\n    }\n    oddCountStr := fmt.Sprintf(\"%d\", oddCount)\n    result = append(result, fmt.Sprintf(\"the number of odd elements %sn the str%sg %s of the %snput.\", oddCountStr, oddCountStr, oddCountStr, oddCountStr))\n}\nreturn result",
        "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\nvar result []string\nfor _, str := range lst {\n    oddCount := 0\n    for _, char := range str {\n        if (char-'0')%2 != 0 {\n            oddCount++\n        }\n    }\n    oddCountStr := fmt.Sprintf(\"%d\", oddCount)\n    result = append(result, fmt.Sprintf(\"the number of odd elements %sn the str%sg %s of the %snput.\", oddCountStr, oddCountStr, oddCountStr, oddCountStr))\n}\nreturn result"
    ],
    [
        "package move_one_ball_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the list will be randomly ordered. Your task is to determine if\n// it is possible to get a list sorted in non-decreasing order by performing \n// the following operation on the given list:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the list by one\n// position in the right direction. The last element of the list will be moved to\n// the starting position in the list i.e. 0th index. \n// If it is possible to obtain the sorted list by performing the above operation\n// then return true else return false.\n// If the given list is empty then return true.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([]int{3, 4, 5, 1, 2})\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given list.\n// >>> move_one_ball([]int{3, 5, 4, 1, 2})\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// list by performing any number of right shift operations.\nfunc move_one_ball(arr []int) bool {\nif len(arr) == 0 {\n\t\treturn true\n\t}\n\n\tshifts := 0\n\tfor i := 1; i < len(arr); i++ {\n\t\tif arr[i] < arr[i-1] {\n\t\t\tif shifts > 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tshifts++\n\t\t}\n\t}\n\n\tif shifts == 0 || arr[0] >= arr[len(arr)-1] {\n\t\treturn true\n\t}\n\t\n\treturn false\n}",
        "package move_one_ball_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the list will be randomly ordered. Your task is to determine if\n// it is possible to get a list sorted in non-decreasing order by performing \n// the following operation on the given list:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the list by one\n// position in the right direction. The last element of the list will be moved to\n// the starting position in the list i.e. 0th index. \n// If it is possible to obtain the sorted list by performing the above operation\n// then return true else return false.\n// If the given list is empty then return true.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([]int{3, 4, 5, 1, 2})\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given list.\n// >>> move_one_ball([]int{3, 5, 4, 1, 2})\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// list by performing any number of right shift operations.\nfunc move_one_ball(arr []int) bool {\n// If the array is empty, return true\nif len(arr) == 0 {\n    return true\n}\n\n// Initialize a counter for the number of decreasing pairs\ndecreasingPairs := 0\n\n// Iterate over the array\nfor i := 0; i < len(arr); i++ {\n    // If the current element is greater than the next one (considering the array as circular), increment the counter\n    if arr[i] > arr[(i+1)%len(arr)] {\n        decreasingPairs++\n    }\n    // If there are more than one decreasing pairs, return false\n    if decreasingPairs > 1 {\n        return false\n    }\n}\n\n// If we reach this point, it means that there is at most one decreasing pair, so return true\nreturn true\n",
        "package move_one_ball_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the list will be randomly ordered. Your task is to determine if\n// it is possible to get a list sorted in non-decreasing order by performing \n// the following operation on the given list:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the list by one\n// position in the right direction. The last element of the list will be moved to\n// the starting position in the list i.e. 0th index. \n// If it is possible to obtain the sorted list by performing the above operation\n// then return true else return false.\n// If the given list is empty then return true.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([]int{3, 4, 5, 1, 2})\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given list.\n// >>> move_one_ball([]int{3, 5, 4, 1, 2})\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// list by performing any number of right shift operations.\nfunc move_one_ball(arr []int) bool {\n// If the array is empty, return true\nif len(arr) == 0 {\n    return true\n}\n\n// Initialize a counter for the number of decreasing pairs\ndecreasingPairs := 0\n\n// Iterate over the array\nfor i := 1; i < len(arr); i++ {\n    // If the current element is smaller than the previous one,\n    // increment the counter\n    if arr[i] < arr[i-1] {\n        decreasingPairs++\n    }\n}\n\n// If there is more than one decreasing pair, it is not possible to sort the array\n// by right shifting\nif decreasingPairs > 1 {\n    return false\n}\n\n// If there is one decreasing pair, it is possible to sort the array by right shifting\n// if and only if the last element of the array is smaller than the first one\nif decreasingPairs == 1 {\n    return arr[len(arr)-1] < arr[0]\n}\n\n// If there are no decreasing pairs, the array is already sorted\nreturn true\n",
        "package move_one_ball_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the list will be randomly ordered. Your task is to determine if\n// it is possible to get a list sorted in non-decreasing order by performing \n// the following operation on the given list:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the list by one\n// position in the right direction. The last element of the list will be moved to\n// the starting position in the list i.e. 0th index. \n// If it is possible to obtain the sorted list by performing the above operation\n// then return true else return false.\n// If the given list is empty then return true.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([]int{3, 4, 5, 1, 2})\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given list.\n// >>> move_one_ball([]int{3, 5, 4, 1, 2})\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// list by performing any number of right shift operations.\nfunc move_one_ball(arr []int) bool {\n// If the array is empty, return true\nif len(arr) == 0 {\n    return true\n}\n\n// Find the index where the array is not in non-decreasing order\nindex := -1\nfor i := 0; i < len(arr)-1; i++ {\n    if arr[i] > arr[i+1] {\n        if index != -1 {\n            // If we find more than one place where the array is not in non-decreasing order, return false\n            return false\n        }\n        index = i\n    }\n}\n\n// If the array is already sorted, return true\nif index == -1 {\n    return true\n}\n\n// Check if the array can be sorted by performing a right shift operation\nfor i := index + 1; i < len(arr)-1; i++ {\n    if arr[i] > arr[i+1] {\n        return false\n    }\n}\n\nreturn true\n",
        "package move_one_ball_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the list will be randomly ordered. Your task is to determine if\n// it is possible to get a list sorted in non-decreasing order by performing \n// the following operation on the given list:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the list by one\n// position in the right direction. The last element of the list will be moved to\n// the starting position in the list i.e. 0th index. \n// If it is possible to obtain the sorted list by performing the above operation\n// then return true else return false.\n// If the given list is empty then return true.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([]int{3, 4, 5, 1, 2})\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given list.\n// >>> move_one_ball([]int{3, 5, 4, 1, 2})\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// list by performing any number of right shift operations.\nfunc move_one_ball(arr []int) bool {\nif len(arr) == 0 {\n    return true\n}\n\ncount := 0\nfor i := 1; i < len(arr); i++ {\n    if arr[i] < arr[i-1] {\n        count++\n        if count > 1 {\n            return false\n        }\n    }\n}\n\nif arr[0] < arr[len(arr)-1] && count == 1 {\n    return false\n}\n\nreturn true"
    ],
    [
        "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{} {\n    var evenCount, oddCount int\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n    return []interface{}{evenCount, oddCount}\n}\n\n// helper function to check if a number is a palindrome\nfunc isPalindrome(n int) bool {\n    original := n\n    reversed := 0\n    for n != 0 {\n        remainder := n % 10\n        reversed = reversed*10 + remainder\n        n = n / 10\n    }\n    return original == reversed\n}",
        "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n\n    return []interface{}{evenCount, oddCount}\n}\n\nfunc isPalindrome(n int) bool {\n    original := n\n    reversed := 0\n\n    for n != 0 {\n        remainder := n % 10\n        reversed = reversed*10 + remainder\n        n /= 10\n    }\n\n    return original == reversed\n}",
        "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{} {\n    var evenCount, oddCount int\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n    return []interface{}{evenCount, oddCount}\n}\n\nfunc isPalindrome(n int) bool {\n    original := n\n    reverse := 0\n    for n != 0 {\n        remainder := n % 10\n        reverse = reverse*10 + remainder\n        n /= 10\n    }\n    return original == reverse\n}",
        "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{} {\n    var evenCount, oddCount int\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n    return []interface{}{evenCount, oddCount}\n}\n\nfunc isPalindrome(n int) bool {\n    original := n\n    reversed := 0\n    for n > 0 {\n        remainder := n % 10\n        reversed = reversed*10 + remainder\n        n = n / 10\n    }\n    return original == reversed\n}",
        "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n\n    return []interface{}{evenCount, oddCount}\n}\n\nfunc isPalindrome(n int) bool {\n    original := n\n    reversed := 0\n\n    for n != 0 {\n        remainder := n % 10\n        reversed = reversed*10 + remainder\n        n = n / 10\n    }\n\n    return original == reversed\n}"
    ],
    [
        "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunc is_equal_to_sum_even(n int) bool {\n// Since the smallest even number is 2, the smallest sum of exactly 4 positive even numbers is 8 (2+2+2+2)\n// Any number less than 8 cannot be written as the sum of exactly 4 positive even numbers\nif n < 8 {\n    return false\n}\n\n// If n is not a multiple of 2, it cannot be written as the sum of even numbers\nif n%2 != 0 {\n    return false\n}\n\n// If n is a multiple of 2 and greater than or equal to 8, it can be written as the sum of exactly 4 positive even numbers\nreturn true\n}",
        "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunc is_equal_to_sum_even(n int) bool {\n// Since we're looking for sums of exactly 4 positive even numbers,\n// we can simplify this to checking if n is divisible by 2 (to ensure it's even)\n// and greater than or equal to 8 (since the smallest sum of 4 positive even numbers is 8 (2+2+2+2)).\nif n % 2 == 0 && n >= 8 {\n    return true\n}\nreturn false\n}",
        "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunc is_equal_to_sum_even(n int) bool {\n// Since the smallest even positive number is 2,\n// and we need exactly 4 even numbers to sum up to n,\n// the smallest possible sum is 2*4 = 8.\n// Therefore, if n is smaller than 8 or if n is an odd number, it cannot be the sum of 4 even numbers.\nif n < 8 || n%2 != 0 {\n    return false\n}\n\n// If n is greater than or equal to 8 and is an even number, it can be the sum of 4 even numbers.\nreturn true\n}",
        "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunc is_equal_to_sum_even(n int) bool {\n// The smallest even number is 2. The sum of exactly 4 positive even numbers will be at least 8.\n// So, if n is less than 8, it cannot be written as the sum of exactly 4 positive even numbers.\nif n < 8 {\n    return false\n}\n\n// If n is greater than or equal to 8, it can be written as the sum of exactly 4 positive even numbers if and only if it is even.\n// Because the sum of any even number of even numbers is always even.\nreturn n%2 == 0\n}",
        "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunc is_equal_to_sum_even(n int) bool {\n// Since the smallest even number is 2, and we need exactly 4 even numbers,\n// the smallest possible sum is 2*4 = 8. So, any number less than 8 can't be written as the sum of 4 even numbers.\nif n < 8 {\n    return false\n}\n\n// If n is even and greater than or equal to 8, it can be written as the sum of 4 even numbers.\n// For example, if n is 10, it can be written as 2 + 2 + 2 + 4.\n// If n is odd, it can't be written as the sum of even numbers.\nreturn n%2 == 0\n}"
    ],
    [
        "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\nresult := make([]int, len(xs)-1)\nfor i := 1; i < len(xs); i++ {\n    result[i-1] = xs[i] * i\n}\nreturn result\n",
        "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\nresult := make([]int, len(xs)-1)\nfor i := 1; i < len(xs); i++ {\n    result[i-1] = xs[i] * i\n}\nreturn result\n",
        "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\nresult := make([]int, len(xs)-1)\nfor i := 1; i < len(xs); i++ {\n    result[i-1] = xs[i] * i\n}\nreturn result\n",
        "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\nresult := make([]int, len(xs)-1)\nfor i := 1; i < len(xs); i++ {\n    result[i-1] = xs[i] * i\n}\nreturn result",
        "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\nresult := make([]int, len(xs)-1)\nfor i := 1; i < len(xs); i++ {\n    result[i-1] = xs[i] * i\n}\nreturn result"
    ],
    [
        "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n// true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst []int) bool {\nnumCount := make(map[int]int)\n\nfor i := 0; i < len(lst); i++ {\n    numCount[lst[i]]++\n    if numCount[lst[i]] > 1 {\n        return false\n    }\n    if i != 0 && lst[i-1] > lst[i] {\n        return false\n    }\n}\nreturn true\n}",
        "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n// true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst []int) bool {\nnumMap := make(map[int]int)\nfor i := 0; i < len(lst); i++ {\n    numMap[lst[i]]++\n    if numMap[lst[i]] > 1 {\n        return false\n    }\n    if i != 0 && lst[i-1] > lst[i] {\n        return false\n    }\n}\nreturn true\n}",
        "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n// true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst []int) bool {\nnumCount := make(map[int]int)\n\nfor i := 0; i < len(lst); i++ {\n    numCount[lst[i]]++\n    if numCount[lst[i]] > 1 {\n        return false\n    }\n    if i != 0 && lst[i-1] > lst[i] {\n        return false\n    }\n}\n\nreturn true\n}",
        "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n// true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst []int) bool {\nnumMap := make(map[int]int)\nfor i := 0; i < len(lst); i++ {\n    numMap[lst[i]]++\n    if numMap[lst[i]] > 2 {\n        return false\n    }\n    if i > 0 && lst[i-1] > lst[i] {\n        return false\n    }\n}\nreturn true\n}",
        "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n// true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst []int) bool {\nnumMap := make(map[int]int)\nfor i := 0; i < len(lst); i++ {\n    if i != len(lst)-1 && lst[i] > lst[i+1] {\n        return false\n    }\n    numMap[lst[i]]++\n    if numMap[lst[i]] > 2 {\n        return false\n    }\n}\nreturn true\n}"
    ],
    [
        "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string {\nvar containsLetter bool\nvar res string\n\nfor _, r := range s {\n\tif r >= 'a' && r <= 'z' {\n\t\tres = string(r-32) + res\n\t\tcontainsLetter = true\n\t} else if r >= 'A' && r <= 'Z' {\n\t\tres = string(r+32) + res\n\t\tcontainsLetter = true\n\t} else {\n\t\tres = string(r) + res\n\t}\n}\n\nif !containsLetter {\n\treturn res\n}\n\nreturn string([]rune(res)[::-1])\n",
        "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string {\nvar result string\nhasLetter := false\n\nfor _, r := range s {\n    if r >= 'a' && r <= 'z' {\n        result += string(r - 32)\n        hasLetter = true\n    } else if r >= 'A' && r <= 'Z' {\n        result += string(r + 32)\n        hasLetter = true\n    } else {\n        result += string(r)\n    }\n}\n\nif !hasLetter {\n    result = reverse(result)\n}\n\nreturn result\n}\n\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}",
        "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string {\nhasLetter := false\nresult := []rune(s)\nfor i, v := range s {\n    if (v >= 'a' && v <= 'z') || (v >= 'A' && v <= 'Z') {\n        hasLetter = true\n        if v >= 'a' && v <= 'z' {\n            result[i] = v - 'a' + 'A'\n        } else {\n            result[i] = v - 'A' + 'a'\n        }\n    }\n}\n\nif !hasLetter {\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n}\n\nreturn string(result)",
        "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string {\ncontainsLetter := false\nresult := make([]rune, len(s))\n\nfor i, char := range s {\n    if (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') {\n        containsLetter = true\n        if char >= 'a' && char <= 'z' {\n            result[i] = char - 32\n        } else {\n            result[i] = char + 32\n        }\n    } else {\n        result[i] = char\n    }\n}\n\nif containsLetter {\n    return string(result)\n} else {\n    for i := 0; i < len(result)/2; i++ {\n        result[i], result[len(result)-i-1] = result[len(result)-i-1], result[i]\n    }\n    return string(result)\n}",
        "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string {\nvar result string\nhasLetter := false\n\nfor _, r := range s {\n\tif r >= 'a' && r <= 'z' {\n\t\tresult = result + string(r-'a'+'A')\n\t\thasLetter = true\n\t} else if r >= 'A' && r <= 'Z' {\n\t\tresult = result + string(r-'A'+'a')\n\t\thasLetter = true\n\t} else {\n\t\tresult = result + string(r)\n\t}\n}\n\nif !hasLetter {\n\tresult = reverse(result)\n}\n\nreturn result\n}\n\nfunc reverse(s string) string {\n\trunes := []rune(s)\n\tfor i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n\t\trunes[i], runes[j] = runes[j], runes[i]\n\t}\n\treturn string(runes)\n}"
    ],
    [
        "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n// Initialize the tribonacci sequence\ntribonacci := make([]int, n+1)\n\n// Base cases\nif n >= 0 {\n    tribonacci[0] = 1\n}\n\nif n >= 1 {\n    tribonacci[1] = 3\n}\n\nif n >= 2 {\n    tribonacci[2] = 2\n}\n\n// Compute the rest of the sequence\nfor i := 3; i <= n; i++ {\n    if i%2 == 0 {\n        tribonacci[i] = 1 + i/2\n    } else {\n        tribonacci[i] = tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3]\n    }\n}\n\nreturn tribonacci\n",
        "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n// Initialize the Tribonacci sequence\nsequence := make([]int, n+1)\nsequence[0] = 1\nif n > 0 {\n    sequence[1] = 3\n}\nif n > 1 {\n    sequence[2] = 2\n}\n\n// Compute the rest of the sequence\nfor i := 3; i <= n; i++ {\n    if i%2 == 0 {\n        sequence[i] = 1 + i/2\n    } else {\n        sequence[i] = sequence[i-1] + sequence[i-2] + sequence[i-3]\n    }\n}\n\nreturn sequence\n",
        "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n// Initialize the Tribonacci sequence with base cases\ntribonacci := []int{0, 3, 2}\n\n// Generate the Tribonacci sequence up to n\nfor i := 3; i <= n; i++ {\n    if i % 2 == 0 {\n        // If i is even, calculate the Tribonacci number as 1 + i / 2\n        tribonacci = append(tribonacci, 1 + i / 2)\n    } else {\n        // If i is odd, calculate the Tribonacci number as the sum of the previous three numbers\n        tribonacci = append(tribonacci, tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n    }\n}\n\n// Return the Tribonacci sequence up to n\nreturn tribonacci[1 : n+1]",
        "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n// Initialize the Tribonacci sequence\ntribonacci := []int{1, 3}\n\n// Calculate the Tribonacci numbers\nfor i := 2; i <= n; i++ {\n    if i % 2 == 0 {\n        tribonacci = append(tribonacci, 1 + i / 2)\n    } else {\n        tribonacci = append(tribonacci, tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-2])\n    }\n}\n\nreturn tribonacci",
        "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n// Initialize the Tribonacci sequence\ntribonacci := []int{0, 3, 2}\n\n// Calculate the Tribonacci numbers\nfor i := 3; i <= n; i++ {\n    if i % 2 == 0 {\n        tribonacci = append(tribonacci, 1 + i/2)\n    } else {\n        tribonacci = append(tribonacci, tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n    }\n}\n\n// Return the Tribonacci sequence\nreturn tribonacci[1 : n+1]"
    ],
    [
        "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\ncount := 0\nfor i := 1; i < n; i++ {\n    if i%11 == 0 || i%13 == 0 {\n        s := fmt.Sprintf(\"%d\", i)\n        for _, r := range s {\n            if r == '7' {\n                count++\n            }\n        }\n    }\n}\nreturn count\n",
        "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\ncount := 0\nfor i := 1; i < n; i++ {\n    if i%11 == 0 || i%13 == 0 {\n        num := i\n        for num > 0 {\n            if num%10 == 7 {\n                count++\n            }\n            num /= 10\n        }\n    }\n}\nreturn count",
        "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\ncount := 0\nfor i := 1; i < n; i++ {\n    if i%11 == 0 || i%13 == 0 {\n        str := fmt.Sprintf(\"%d\", i)\n        for _, c := range str {\n            if c == '7' {\n                count++\n            }\n        }\n    }\n}\nreturn count\n}",
        "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\ncount := 0\nfor i := 1; i < n; i++ {\n    if i % 11 == 0 || i % 13 == 0 {\n        num := i\n        for num > 0 {\n            if num % 10 == 7 {\n                count++\n            }\n            num /= 10\n        }\n    }\n}\nreturn count",
        "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\ncount := 0\nfor i := 1; i < n; i++ {\n    if i%11 == 0 || i%13 == 0 {\n        for _, c := range fmt.Sprintf(\"%d\", i) {\n            if c == '7' {\n                count++\n            }\n        }\n    }\n}\nreturn count"
    ],
    [
        "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\nfunc filter_by_prefix(strings []string, prefix string) []string {\nfilteredStrings := []string{}\nfor _, str := range strings {\n    if len(str) >= len(prefix) && str[:len(prefix)] == prefix {\n        filteredStrings = append(filteredStrings, str)\n    }\n}\nreturn filteredStrings",
        "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\nfunc filter_by_prefix(strings []string, prefix string) []string {\nfiltered := []string{}\n\nfor _, str := range strings {\n    if len(str) >= len(prefix) && str[:len(prefix)] == prefix {\n        filtered = append(filtered, str)\n    }\n}\n\nreturn filtered\n",
        "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\nfunc filter_by_prefix(strings []string, prefix string) []string {\nfilteredStrings := []string{}\n\nfor _, str := range strings {\n    if len(str) >= len(prefix) && str[:len(prefix)] == prefix {\n        filteredStrings = append(filteredStrings, str)\n    }\n}\n\nreturn filteredStrings\n",
        "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\nfunc filter_by_prefix(strings []string, prefix string) []string {\nfilteredStrings := []string{}\nfor _, str := range strings {\n    if len(str) >= len(prefix) && str[:len(prefix)] == prefix {\n        filteredStrings = append(filteredStrings, str)\n    }\n}\nreturn filteredStrings",
        "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\nfunc filter_by_prefix(strings []string, prefix string) []string {\nfilteredStrings := []string{}\nfor _, str := range strings {\n    if len(str) >= len(prefix) && str[:len(prefix)] == prefix {\n        filteredStrings = append(filteredStrings, str)\n    }\n}\nreturn filteredStrings"
    ],
    [
        "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunc solve(N int) string {\nbinary := fmt.Sprintf(\"%b\", N)\nsum := 0\nfor _, digit := range binary {\n    if digit == '1' {\n        sum++\n    }\n}\nreturn fmt.Sprintf(\"%b\", sum)\n}",
        "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunc solve(N int) string {\n// Convert the integer to binary\nbinary := fmt.Sprintf(\"%b\", N)\n\n// Initialize sum to 0\nsum := 0\n\n// Iterate over the binary string\nfor _, char := range binary {\n    // Convert the character to integer and add to sum\n    sum += int(char - '0')\n}\n\n// Return the sum as binary string\nreturn fmt.Sprintf(\"%b\", sum)\n}",
        "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunc solve(N int) string {\n// Convert the integer to binary\nbinary := fmt.Sprintf(\"%b\", N)\n\n// Initialize sum to 0\nsum := 0\n\n// Iterate over each digit in the binary representation\nfor _, digit := range binary {\n    // If the digit is '1', add 1 to the sum\n    if digit == '1' {\n        sum++\n    }\n}\n\n// Return the sum as a binary string\nreturn fmt.Sprintf(\"%b\", sum)\n}",
        "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunc solve(N int) string {\n// Convert the integer to binary\nbinary := fmt.Sprintf(\"%b\", N)\n\n// Initialize sum to 0\nsum := 0\n\n// Iterate over the binary string\nfor _, digit := range binary {\n    // Convert the string digit to integer and add to sum\n    sum += int(digit - '0')\n}\n\n// Return the sum as a binary string\nreturn fmt.Sprintf(\"%b\", sum)\n}",
        "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunc solve(N int) string {\n// Convert integer to binary\nbinary := fmt.Sprintf(\"%b\", N)\n\n// Initialize sum\nsum := 0\n\n// Iterate over binary string\nfor _, digit := range binary {\n\t// If digit is '1', increment sum\n\tif digit == '1' {\n\t\tsum++\n\t}\n}\n\n// Return sum as string\nreturn fmt.Sprintf(\"%d\", sum)"
    ],
    [
        "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int, k int) []int {\n    // Initialize the variables\n    n := len(grid)\n    dx := []int{-1, 0, 1, 0}\n    dy := []int{0, 1, 0, -1}\n    visited := make([][]bool, n)\n    for i := range visited {\n        visited[i] = make([]bool, n)\n    }\n    minPath := make([]int, k)\n    minVal := n*n + 1\n    startX, startY := 0, 0\n\n    // Find the minimum value in the grid and its position\n    for i, row := range grid {\n        for j, val := range row {\n            if val < minVal {\n                minVal = val\n                startX, startY = i, j\n            }\n        }\n    }\n\n    // Depth First Search\n    var dfs func(x, y, depth int)\n    dfs = func(x, y, depth int) {\n        if depth == k {\n            return\n        }\n        for i := 0; i < 4; i++ {\n            nx, ny := x+dx[i], y+dy[i]\n            if nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny] {\n                visited[nx][ny] = true\n                minPath[depth] = grid[nx][ny]\n                dfs(nx, ny, depth+1)\n                visited[nx][ny] = false\n            }\n        }\n    }\n\n    // Start the search from the cell with the minimum value\n    visited[startX][startY] = true\n    minPath[0] = grid[startX][startY]\n    dfs(startX, startY, 1)\n\n    return minPath\n}",
        "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int, k int) []int {\n    // Define the directions for moving in the grid\n    directions := [][]int{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\n    // Initialize the visited map and the priority queue\n    visited := make(map[int]bool)\n    pq := make(PriorityQueue, 0)\n\n    // Initialize the grid size and the result array\n    gridSize := len(grid)\n    result := make([]int, 0, k)\n\n    // Iterate over the grid to find the smallest cell and push it to the priority queue\n    for i := 0; i < gridSize; i++ {\n        for j := 0; j < gridSize; j++ {\n            pq = append(pq, &Item{\n                value:    grid[i][j],\n                priority: grid[i][j],\n                index:    i*gridSize + j,\n            })\n        }\n    }\n\n    // Sort the priority queue\n    heap.Init(&pq)\n\n    // Start the loop to find the minimum path\n    for len(result) < k {\n        // Pop the smallest item from the priority queue\n        item := heap.Pop(&pq).(*Item)\n\n        // Check if the item has been visited\n        if visited[item.index] {\n            continue\n        }\n\n        // Mark the item as visited\n        visited[item.index] = true\n\n        // Add the item value to the result\n        result = append(result, item.value)\n\n        // Get the current position in the grid\n        x := item.index / gridSize\n        y := item.index % gridSize\n\n        // Iterate over the directions\n        for _, direction := range directions {\n            // Calculate the new position\n            newX := x + direction[0]\n            newY := y + direction[1]\n\n            // Check if the new position is valid\n            if newX >= 0 && newX < gridSize && newY >= 0 && newY < gridSize && !visited[newX*gridSize+newY] {\n                // Push the new position to the priority queue\n                heap.Push(&pq, &Item{\n                    value:    grid[newX][newY],\n                    priority: grid[newX][newY],\n                    index:    newX*gridSize + newY,\n                })\n            }\n        }\n    }\n\n    // Return the result\n    return result\n}",
        "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int, k int) []int {\n    n := len(grid)\n    visited := make([][]bool, n)\n    for i := 0; i < n; i++ {\n        visited[i] = make([]bool, n)\n    }\n    minPath := make([]int, 0, k)\n    minVal := n*n + 1\n    minI, minJ := -1, -1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] < minVal {\n                minVal = grid[i][j]\n                minI, minJ = i, j\n            }\n        }\n    }\n    var dfs func(i, j, depth int)\n    dfs = func(i, j, depth int) {\n        if depth == k {\n            return\n        }\n        visited[i][j] = true\n        minPath = append(minPath, grid[i][j])\n        for _, dir := range [][]int{{-1, 0}, {1, 0}, {0, -1}, {0, 1}} {\n            ni, nj := i+dir[0], j+dir[1]\n            if ni >= 0 && ni < n && nj >= 0 && nj < n && !visited[ni][nj] {\n                dfs(ni, nj, depth+1)\n            }\n        }\n        visited[i][j] = false\n    }\n    dfs(minI, minJ, 0)\n    return minPath\n}",
        "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int, k int) []int {\n    n := len(grid)\n    dir := [][]int{{-1, 0}, {1, 0}, {0, -1}, {0, 1}} // directions: up, down, left, right\n    minPath := make([]int, k)\n    visited := make([][]bool, n)\n\n    for i := range visited {\n        visited[i] = make([]bool, n)\n    }\n\n    // find the smallest number in the grid\n    minRow, minCol := 0, 0\n    minValue := grid[0][0]\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] < minValue {\n                minValue = grid[i][j]\n                minRow, minCol = i, j\n            }\n        }\n    }\n\n    // dfs to find the minimum path\n    var dfs func(row, col, depth int)\n    dfs = func(row, col, depth int) {\n        if depth == k {\n            return\n        }\n\n        for _, d := range dir {\n            newRow, newCol := row+d[0], col+d[1]\n            if newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && !visited[newRow][newCol] {\n                visited[newRow][newCol] = true\n                minPath[depth] = grid[newRow][newCol]\n                dfs(newRow, newCol, depth+1)\n                visited[newRow][newCol] = false\n            }\n        }\n    }\n\n    visited[minRow][minCol] = true\n    minPath[0] = minValue\n    dfs(minRow, minCol, 1)\n\n    return minPath\n}",
        "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int, k int) []int {\n    // Initialize variables\n    n := len(grid)\n    visited := make([][]bool, n)\n    for i := range visited {\n        visited[i] = make([]bool, n)\n    }\n    minPath := make([]int, k)\n    for i := range minPath {\n        minPath[i] = n*n + 1\n    }\n\n    // Directions for moving up, down, left and right\n    dirs := [][]int{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\n    // DFS function to find the minimum path\n    var dfs func(x, y, depth int)\n    dfs = func(x, y, depth int) {\n        // If out of bounds or visited, return\n        if x < 0 || y < 0 || x >= n || y >= n || visited[x][y] {\n            return\n        }\n\n        // Mark as visited and add to path\n        visited[x][y] = true\n        minPath[depth] = min(minPath[depth], grid[x][y])\n\n        // If we have reached the required length, return\n        if depth == k-1 {\n            return\n        }\n\n        // Explore all four directions\n        for _, dir := range dirs {\n            dfs(x+dir[0], y+dir[1], depth+1)\n        }\n\n        // Unmark as visited before returning to allow for other paths\n        visited[x][y] = false\n    }\n\n    // Start DFS from each cell\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            dfs(i, j, 0)\n        }\n    }\n\n    return minPath\n}\n\n// Helper function to find minimum of two integers\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
    ],
    [
        "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n    count := 0\n    vowels := \"AEIOU\"\n\n    for i, c := range s {\n        if i%2 == 0 && strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n\n    return count\n}",
        "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\nvar count int\nvowels := []rune{'A', 'E', 'I', 'O', 'U'}\n\nfor i, char := range s {\n    if i%2 == 0 {\n        for _, vowel := range vowels {\n            if char == vowel {\n                count++\n            }\n        }\n    }\n}\n\nreturn count\n}",
        "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n    count := 0\n    for i, c := range s {\n        if i%2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++\n        }\n    }\n    return count\n}",
        "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\nupperVowels := \"AEIOU\"\ncount := 0\n\nfor i, c := range s {\n    if i%2 == 0 && strings.ContainsRune(upperVowels, c) {\n        count++\n    }\n}\n\nreturn count\n}",
        "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n    count := 0\n    vowels := map[rune]bool{'A': true, 'E': true, 'I': true, 'O': true, 'U': true}\n\n    for i, c := range s {\n        if i%2 == 0 && vowels[c] {\n            count++\n        }\n    }\n\n    return count\n}"
    ],
    [
        "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3, -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n    // Sort the array in descending order\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] > arr[j]\n    })\n\n    // Return the first k elements\n    return arr[:k]\n}",
        "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3, -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] > arr[j]\n    })\n    return arr[:k]\n}",
        "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3, -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr[:k]\n}",
        "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3, -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n    // Sort the array in descending order\n    sort.Slice(arr, func(i, j int) bool { \n        return arr[i] > arr[j] \n    })\n\n    // Return the first k elements\n    return arr[:k]\n}",
        "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3, -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr[:k]\n}"
    ],
    [
        "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int) int {\nfor i := n - 1; i > 0; i-- {\n    if n % i == 0 {\n        return i\n    }\n}\nreturn 1\n}",
        "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int) int {\nfor i := n - 1; i > 0; i-- {\n        if n%i == 0 {\n            return i\n        }\n    }\n    return -1\n}",
        "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int) int {\nfor i := n - 1; i > 0; i-- {\n    if n % i == 0 {\n        return i\n    }\n}\nreturn 1\n}",
        "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int) int {\nfor i := n - 1; i > 0; i-- {\n    if n % i == 0 {\n        return i\n    }\n}\nreturn 1\n}",
        "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int) int {\nfor i := n - 1; i > 0; i-- {\n        if n%i == 0 {\n            return i\n        }\n    }\n    return -1\n}"
    ],
    [
        "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of non-negative integers, return a cogo of the given list after sorting,\n// you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given list.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n// Copy the array to avoid changing the original array\ncopyArray := make([]int, len(array))\ncopy(copyArray, array)\n\n// Get the sum of the first and last elements\nsum := 0\nif len(array) > 0 {\n    sum = array[0] + array[len(array)-1]\n}\n\n// Sort the array in ascending order if the sum is odd, or in descending order if the sum is even\nif sum%2 == 0 {\n    sort.Slice(copyArray, func(i, j int) bool {\n        return copyArray[i] > copyArray[j]\n    })\n} else {\n    sort.Slice(copyArray, func(i, j int) bool {\n        return copyArray[i] < copyArray[j]\n    })\n}\n\nreturn copyArray\n",
        "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of non-negative integers, return a cogo of the given list after sorting,\n// you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given list.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n// Create a copy of the array to avoid modifying the original\nsortedArray := make([]int, len(array))\ncopy(sortedArray, array)\n\n// Check if the array is empty or contains only one element\nif len(sortedArray) < 2 {\n    return sortedArray\n}\n\n// Define a function for swapping elements\nswap := func(i, j int) {\n    sortedArray[i], sortedArray[j] = sortedArray[j], sortedArray[i]\n}\n\n// Implement bubble sort\nfor i := 0; i < len(sortedArray); i++ {\n    for j := 0; j < len(sortedArray)-i-1; j++ {\n        // Check if the sum of the first and last elements is odd or even\n        if (sortedArray[0] + sortedArray[len(sortedArray)-1])%2 == 0 {\n            // If it's even, sort in descending order\n            if sortedArray[j] < sortedArray[j+1] {\n                swap(j, j+1)\n            }\n        } else {\n            // If it's odd, sort in ascending order\n            if sortedArray[j] > sortedArray[j+1] {\n                swap(j, j+1)\n            }\n        }\n    }\n}\n\nreturn sortedArray\n",
        "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of non-negative integers, return a cogo of the given list after sorting,\n// you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given list.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n// Copy the array to avoid changing the original\ncopiedArray := make([]int, len(array))\ncopy(copiedArray, array)\n\n// Check if the sum of the first and last index is even or odd\nsum := copiedArray[0] + copiedArray[len(copiedArray)-1]\nisEven := sum%2 == 0\n\n// Sort the array\nif isEven {\n    sort.Slice(copiedArray, func(i, j int) bool {\n        return copiedArray[i] > copiedArray[j]\n    })\n} else {\n    sort.Slice(copiedArray, func(i, j int) bool {\n        return copiedArray[i] < copiedArray[j]\n    })\n}\n\nreturn copiedArray\n",
        "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of non-negative integers, return a cogo of the given list after sorting,\n// you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given list.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n// Create a copy of the array so we don't modify the original\ncopied := make([]int, len(array))\ncopy(copied, array)\n\n// Check if the sum of the first and last index is odd or even\nif len(array) > 1 && (array[0] + array[len(array)-1])%2 == 0 {\n    // If even, sort in descending order\n    sort.Slice(copied, func(i, j int) bool {\n        return copied[i] > copied[j]\n    })\n} else {\n    // If odd or array has less than 2 elements, sort in ascending order\n    sort.Slice(copied, func(i, j int) bool {\n        return copied[i] < copied[j]\n    })\n}\n\nreturn copied\n",
        "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of non-negative integers, return a cogo of the given list after sorting,\n// you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given list.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n// Create a copy of the array so the original isn't modified\n    copiedArray := make([]int, len(array))\n    copy(copiedArray, array)\n\n    // Check if the sum of the first and last index is even or odd\n    if len(copiedArray) > 1 && (copiedArray[0] + copiedArray[len(copiedArray)-1])%2 == 0 {\n        // Sort in descending order\n        sort.Slice(copiedArray, func(i, j int) bool {\n            return copiedArray[i] > copiedArray[j]\n        })\n    } else {\n        // Sort in ascending order\n        sort.Slice(copiedArray, func(i, j int) bool {\n            return copiedArray[i] < copiedArray[j]\n        })\n    }\n\n    return copiedArray\n}"
    ],
    [
        "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int) []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            result[i-1] = factorial(i)\n        } else {\n            result[i-1] = sum(i)\n        }\n    }\n    return result\n}\n\nfunc factorial(i int) int {\n    if i == 0 {\n        return 1\n    }\n    return i * factorial(i-1)\n}\n\nfunc sum(i int) int {\n    return i * (i + 1) / 2\n}",
        "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int) []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            result[i-1] = factorial(i)\n        } else {\n            result[i-1] = sum(i)\n        }\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n-1)\n}\n\nfunc sum(n int) int {\n    return n * (n + 1) / 2\n}",
        "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int) []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i-1] = factorial(i)\n        } else {\n            result[i-1] = sum(i)\n        }\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n-1)\n}\n\nfunc sum(n int) int {\n    return n * (n + 1) / 2\n}",
        "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int) []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i-1] = factorial(i)\n        } else {\n            result[i-1] = sum(i)\n        }\n    }\n    return result\n}\n\n// helper function to calculate factorial\nfunc factorial(n int) int {\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\n// helper function to calculate sum\nfunc sum(n int) int {\n    result := 0\n    for i := 1; i <= n; i++ {\n        result += i\n    }\n    return result\n}",
        "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int) []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            result[i-1] = 1\n            for j := 1; j <= i; j++ {\n                result[i-1] *= j\n            }\n        } else {\n            result[i-1] = 0\n            for j := 1; j <= i; j++ {\n                result[i-1] += j\n            }\n        }\n    }\n    return result\n}"
    ],
    [
        "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n// convert a to absolute value\na = int(math.Abs(float64(a)))\n\n// iterate from 0 to a\nfor i := 0; i <= a; i++ {\n    // if i cubed is equal to a, return true\n    if i*i*i == a {\n        return true\n    }\n}\n\n// if no cube root found, return false\nreturn false\n}",
        "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n    for i := 0; i <= a; i++ {\n        if i*i*i == a {\n            return true\n        }\n    }\n    return false\n}",
        "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n    for i := 0; i * i * i <= a; i++ {\n        if i * i * i == a {\n            return true\n        }\n    }\n    return false\n}",
        "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n    for i := 0; i*i*i <= a; i++ {\n        if i*i*i == a {\n            return true\n        }\n    }\n    return false\n}",
        "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n    for i := 0; i*i*i <= a; i++ {\n        if i*i*i == a {\n            return true\n        }\n    }\n    return false\n}"
    ],
    [
        "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    encodedMessage := \"\"\n    vowels := \"aeiouAEIOU\"\n    for _, char := range message {\n        if char >= 'a' && char <= 'z' {\n            char = char - 32\n        } else if char >= 'A' && char <= 'Z' {\n            char = char + 32\n        }\n\n        if strings.ContainsRune(vowels, char) {\n            if char == 'y' || char == 'Y' {\n                char = 'a'\n            } else if char == 'z' || char == 'Z' {\n                char = 'b'\n            } else {\n                char = char + 2\n            }\n        }\n\n        encodedMessage += string(char)\n    }\n\n    return encodedMessage\n}",
        "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    encoded := \"\"\n    for _, r := range message {\n        if r >= 'a' && r <= 'z' {\n            if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n                r = r + 2\n            }\n            r = r - 'a' + 'A'\n        } else if r >= 'A' && r <= 'Z' {\n            if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n                r = r + 2\n            }\n            r = r - 'A' + 'a'\n        }\n        encoded += string(r)\n    }\n    return encoded\n}",
        "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    encoded := \"\"\n    vowels := map[rune]rune{\n        'a': 'c',\n        'e': 'g',\n        'i': 'k',\n        'o': 'q',\n        'u': 'w',\n        'A': 'C',\n        'E': 'G',\n        'I': 'K',\n        'O': 'Q',\n        'U': 'W',\n    }\n\n    for _, ch := range message {\n        if replacement, ok := vowels[ch]; ok {\n            encoded += string(replacement)\n        } else if ch >= 'a' && ch <= 'z' {\n            encoded += string(ch - 'a' + 'A')\n        } else if ch >= 'A' && ch <= 'Z' {\n            encoded += string(ch - 'A' + 'a')\n        } else {\n            encoded += string(ch)\n        }\n    }\n\n    return encoded\n}",
        "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    encoded := \"\"\n    vowels := map[rune]rune{'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n\n    for _, ch := range message {\n        if _, ok := vowels[ch]; ok {\n            encoded += string(vowels[ch])\n        } else if ch >= 'a' && ch <= 'z' {\n            encoded += string(ch - 32) // convert to uppercase\n        } else if ch >= 'A' && ch <= 'Z' {\n            encoded += string(ch + 32) // convert to lowercase\n        } else {\n            encoded += string(ch)\n        }\n    }\n\n    return encoded\n}",
        "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n// map to hold vowels and their replacements\n    vowelMap := map[rune]rune{\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 's', 'U': 'S',\n    }\n\n    encodedMessage := \"\"\n    for _, char := range message {\n        // if the character is a vowel, replace it\n        if replacement, ok := vowelMap[char]; ok {\n            encodedMessage += string(replacement)\n        } else {\n            // otherwise, swap the case\n            if char >= 'a' && char <= 'z' {\n                encodedMessage += string(char - 32) // convert to uppercase\n            } else if char >= 'A' && char <= 'Z' {\n                encodedMessage += string(char + 32) // convert to lowercase\n            } else {\n                // if not a letter, just add it to the encoded message\n                encodedMessage += string(char)\n            }\n        }\n    }\n\n    return encodedMessage\n"
    ],
    [
        "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\nimport (\n    \"strings\"\n)\n\ncount := 0\nsentences := strings.FieldsFunc(S, func(r rune) bool {\n    return r == '.' || r == '?' || r == '!'\n})\n\nfor _, sentence := range sentences {\n    words := strings.Fields(sentence)\n    if len(words) > 0 && words[0] == \"I\" {\n        count++\n    }\n}\n\nreturn count",
        "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\nimport (\n    \"strings\"\n)\n\ncount := 0\nsentences := strings.FieldsFunc(S, func(r rune) bool { return r == '.' || r == '?' || r == '!' })\n\nfor _, sentence := range sentences {\n    words := strings.Fields(sentence)\n    if len(words) > 0 && words[0] == \"I\" {\n        count++\n    }\n}\n\nreturn count",
        "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\nimport (\n    \"strings\"\n)\n\ncount := 0\nsentences := strings.FieldsFunc(S, func(r rune) bool { return r == '.' || r == '?' || r == '!' })\n\nfor _, sentence := range sentences {\n    words := strings.Fields(sentence)\n    if len(words) > 0 && words[0] == \"I\" {\n        count++\n    }\n}\n\nreturn count",
        "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\nimport (\n    \"strings\"\n)\n\ncount := 0\nsentences := strings.FieldsFunc(S, func(r rune) bool { return r == '.' || r == '?' || r == '!' })\n\nfor _, sentence := range sentences {\n    words := strings.Fields(sentence)\n    if len(words) > 0 && words[0] == \"I\" {\n        count++\n    }\n}\n\nreturn count",
        "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\nimport \"strings\"\n\ncount := 0\nsentences := strings.FieldsFunc(S, func(r rune) bool { return r == '.' || r == '?' || r == '!' })\nfor _, sentence := range sentences {\n    words := strings.Fields(sentence)\n    if len(words) > 0 && words[0] == \"I\" {\n        count++\n    }\n}\nreturn count\n"
    ],
    [
        "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns true if there are two distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n// true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l []int) bool {\n// create a map to store the elements\n    elements := make(map[int]bool)\n\n    // loop through the list\n    for _, num := range l {\n        // if the negative of the current number is in the map, return true\n        if elements[-num] {\n            return true\n        }\n        // add the current number to the map\n        elements[num] = true\n    }\n\n    // if no pair is found, return false\n    return false\n}",
        "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns true if there are two distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n// true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l []int) bool {\n// Create a map to store the elements\n    elementsMap := make(map[int]bool)\n\n    // Iterate over the list\n    for _, num := range l {\n        // Check if the negative of the current number exists in the map\n        if elementsMap[-num] {\n            // If it exists, return true\n            return true\n        }\n        // If it doesn't exist, add the number to the map\n        elementsMap[num] = true\n    }\n\n    // If no pair is found, return false\n    return false\n}",
        "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns true if there are two distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n// true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l []int) bool {\n// Create a map to store the elements of the list\n    elements := make(map[int]bool)\n\n    // Iterate over the list\n    for _, num := range l {\n        // If the negative of the current number is in the map, return true\n        if elements[-num] {\n            return true\n        }\n        // Otherwise, add the current number to the map\n        elements[num] = true\n    }\n\n    // If no pair of elements sum to zero, return false\n    return false\n}",
        "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns true if there are two distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n// true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l []int) bool {\n// Create a map to store the elements of the list\n    elements := make(map[int]bool)\n\n    // Iterate over the list\n    for _, num := range l {\n        // If the negative of the current number is in the map, return true\n        if elements[-num] {\n            return true\n        }\n        // Add the current number to the map\n        elements[num] = true\n    }\n\n    // If no pair sum to zero, return false\n    return false\n}",
        "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns true if there are two distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n// true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l []int) bool {\n// Create a map to store the elements\n    elements := make(map[int]bool)\n\n    // Iterate over the list\n    for _, num := range l {\n        // Check if the negative of the current number is in the map\n        if _, exists := elements[-num]; exists {\n            return true\n        }\n        // Add the current number to the map\n        elements[num] = true\n    }\n\n    // If no pair is found, return false\n    return false\n}"
    ],
    [
        "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int, b int, c int) float64 {\nif a+b > c && a+c > b && b+c > a {\n        s := float64(a+b+c) / 2\n        area := math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n        return math.Round(area*100) / 100\n    }\n    return -1\n}",
        "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int, b int, c int) float64 {\nif a+b > c && a+c > b && b+c > a {\n    // calculate the semi-perimeter\n    s := float64(a+b+c) / 2\n    // calculate the area using Heron's formula\n    area := math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    // round to 2 decimal points\n    return math.Round(area*100) / 100\n} else {\n    return -1\n}\n}",
        "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int, b int, c int) float64 {\n// Check if the sides form a valid triangle\nif a+b > c && a+c > b && b+c > a {\n    // Use Heron's formula to calculate the area of the triangle\n    s := float64(a+b+c) / 2\n    area := math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    // Round to 2 decimal places\n    return math.Round(area*100) / 100\n} else {\n    // If the sides do not form a valid triangle, return -1\n    return -1\n}",
        "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int, b int, c int) float64 {\nif a+b > c && a+c > b && b+c > a {\n    // calculate semi-perimeter\n    s := float64(a+b+c) / 2\n    // calculate area using Heron's formula\n    area := math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    // round to 2 decimal places\n    return math.Round(area*100) / 100\n} else {\n    return -1\n}",
        "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int, b int, c int) float64 {\nif a+b > c && a+c > b && b+c > a {\n    // calculate the semi-perimeter\n    s := float64(a+b+c) / 2\n    // calculate the area using Heron's formula\n    area := math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    // round to 2 decimal points\n    area = math.Round(area*100) / 100\n    return area\n} else {\n    return -1\n}\n}"
    ],
    [
        "package bf_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a list containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty list if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// []interface{}{\"Saturn\", \"Uranus\"}\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// []interface{}{\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\nfunc bf(planet1 string, planet2 string) []interface{} {\nplanets := map[string]int{\n\t\t\"Mercury\": 1,\n\t\t\"Venus\":   2,\n\t\t\"Earth\":   3,\n\t\t\"Mars\":    4,\n\t\t\"Jupiter\": 5,\n\t\t\"Saturn\":  6,\n\t\t\"Uranus\":  7,\n\t\t\"Neptune\": 8,\n\t}\n\n\tplanetOrder := []string{\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\",\n\t}\n\n\tp1, ok1 := planets[planet1]\n\tp2, ok2 := planets[planet2]\n\n\tif !ok1 || !ok2 {\n\t\treturn []interface{}{}\n\t}\n\n\tif p1 > p2 {\n\t\tp1, p2 = p2, p1\n\t}\n\n\tresult := []interface{}{}\n\n\tfor i := p1; i < p2-1; i++ {\n\t\tresult = append(result, planetOrder[i])\n\t}\n\n\treturn result\n",
        "package bf_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a list containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty list if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// []interface{}{\"Saturn\", \"Uranus\"}\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// []interface{}{\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\nfunc bf(planet1 string, planet2 string) []interface{} {\nplanets := map[string]int{\n\t\t\"Mercury\": 1,\n\t\t\"Venus\":   2,\n\t\t\"Earth\":   3,\n\t\t\"Mars\":    4,\n\t\t\"Jupiter\": 5,\n\t\t\"Saturn\":  6,\n\t\t\"Uranus\":  7,\n\t\t\"Neptune\": 8,\n\t}\n\n\tplanetList := []string{\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\",\n\t}\n\n\tplanet1Index, ok1 := planets[planet1]\n\tplanet2Index, ok2 := planets[planet2]\n\n\tif !ok1 || !ok2 {\n\t\treturn []interface{}{}\n\t}\n\n\tif planet1Index > planet2Index {\n\t\tplanet1Index, planet2Index = planet2Index, planet1Index\n\t}\n\n\treturnList := []interface{}{}\n\n\tfor i := planet1Index; i < planet2Index-1; i++ {\n\t\treturnList = append(returnList, planetList[i])\n\t}\n\n\treturn returnList\n}",
        "package bf_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a list containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty list if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// []interface{}{\"Saturn\", \"Uranus\"}\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// []interface{}{\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\nfunc bf(planet1 string, planet2 string) []interface{} {\nplanets := map[string]int{\n\t\t\"Mercury\": 1,\n\t\t\"Venus\":   2,\n\t\t\"Earth\":   3,\n\t\t\"Mars\":    4,\n\t\t\"Jupiter\": 5,\n\t\t\"Saturn\":  6,\n\t\t\"Uranus\":  7,\n\t\t\"Neptune\": 8,\n\t}\n\n\t// Check if the planets exist\n\tif _, ok := planets[planet1]; !ok {\n\t\treturn []interface{}{}\n\t}\n\tif _, ok := planets[planet2]; !ok {\n\t\treturn []interface{}{}\n\t}\n\n\t// Swap the planets if necessary\n\tif planets[planet1] > planets[planet2] {\n\t\tplanet1, planet2 = planet2, planet1\n\t}\n\n\t// Create the result slice\n\tresult := []interface{}{}\n\n\t// Iterate over the planets in order\n\tfor planet, order := range planets {\n\t\tif order > planets[planet1] && order < planets[planet2] {\n\t\t\tresult = append(result, planet)\n\t\t}\n\t}\n\n\treturn result\n",
        "package bf_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a list containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty list if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// []interface{}{\"Saturn\", \"Uranus\"}\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// []interface{}{\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\nfunc bf(planet1 string, planet2 string) []interface{} {\nplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\nplanet1Index := -1\nplanet2Index := -1\n\nfor i, planet := range planets {\n    if planet == planet1 {\n        planet1Index = i\n    }\n    if planet == planet2 {\n        planet2Index = i\n    }\n}\n\nif planet1Index == -1 || planet2Index == -1 {\n    return []interface{}{}\n}\n\nif planet1Index > planet2Index {\n    planet1Index, planet2Index = planet2Index, planet1Index\n}\n\nresult := make([]interface{}, 0)\nfor i := planet1Index + 1; i < planet2Index; i++ {\n    result = append(result, planets[i])\n}\n\nreturn result\n",
        "package bf_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a list containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty list if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// []interface{}{\"Saturn\", \"Uranus\"}\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// []interface{}{\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\nfunc bf(planet1 string, planet2 string) []interface{} {\nplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\nvar start, end int\nfor i, planet := range planets {\n    if planet == planet1 {\n        start = i\n    } else if planet == planet2 {\n        end = i\n    }\n}\n\nif start == end {\n    return []interface{}{}\n}\n\nif start > end {\n    start, end = end, start\n}\n\nreturn convertToInterface(planets[start+1 : end])\n}\n\nfunc convertToInterface(s []string) []interface{} {\n    res := make([]interface{}, len(s))\n    for i, v := range s {\n        res[i] = v\n    }\n    return res\n}"
    ],
    [
        "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\nproduct := 1\nhasOdd := false\n\nfor n > 0 {\n    digit := n % 10\n    if digit%2 != 0 {\n        product *= digit\n        hasOdd = true\n    }\n    n = n / 10\n}\n\nif hasOdd {\n    return product\n} else {\n    return 0\n}\n}",
        "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\nproduct := 1\nhasOdd := false\n\nfor n > 0 {\n    digit := n % 10\n    if digit%2 != 0 {\n        product *= digit\n        hasOdd = true\n    }\n    n /= 10\n}\n\nif hasOdd {\n    return product\n}\nreturn 0\n}",
        "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\nproduct := 1\nhasOdd := false\n\nfor n > 0 {\n    digit := n % 10\n    if digit%2 != 0 {\n        product *= digit\n        hasOdd = true\n    }\n    n /= 10\n}\n\nif hasOdd {\n    return product\n}\nreturn 0\n}",
        "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\nproduct := 1\nhasOdd := false\n\nfor n != 0 {\n    digit := n % 10\n    if digit%2 != 0 {\n        product *= digit\n        hasOdd = true\n    }\n    n /= 10\n}\n\nif hasOdd {\n    return product\n}\nreturn 0\n}",
        "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\nproduct := 1\nhasOdd := false\n\nfor n > 0 {\n    digit := n % 10\n    if digit % 2 != 0 {\n        product *= digit\n        hasOdd = true\n    }\n    n /= 10\n}\n\nif hasOdd {\n    return product\n}\n\nreturn 0\n}"
    ],
    [
        "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a list of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three, four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\nfunc words_string(s string) []string {\nimport (\n    \"strings\"\n)\n\n// Split the string by spaces and commas\nwords := strings.FieldsFunc(s, func(r rune) bool {\n    return r == ',' || r == ' '\n})\n\nreturn words\n",
        "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a list of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three, four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\nfunc words_string(s string) []string {\nimport (\n    \"strings\"\n)\n\n// First, replace all commas in the string with spaces\ns = strings.Replace(s, \",\", \" \", -1)\n\n// Then, split the string by spaces\nwords := strings.Fields(s)\n\nreturn words\n",
        "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a list of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three, four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\nfunc words_string(s string) []string {\nimport (\n    \"strings\"\n)\n\n// Split the string by commas and spaces\nwords := strings.FieldsFunc(s, func(r rune) bool {\n    return r == ',' || r == ' '\n})\n\nreturn words\n",
        "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a list of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three, four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\nfunc words_string(s string) []string {\nimport (\n    \"strings\"\n)\n\n// Split the string by comma and space\nwords := strings.FieldsFunc(s, func(r rune) bool {\n    return r == ',' || r == ' '\n})\n\nreturn words\n",
        "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a list of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three, four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\nfunc words_string(s string) []string {\nimport (\n    \"strings\"\n)\n\n// Create a slice to hold the words\nwords := []string{}\n\n// Replace commas with spaces\ns = strings.Replace(s, \",\", \" \", -1)\n\n// Split the string into words\nfor _, word := range strings.Fields(s) {\n    words = append(words, word)\n}\n\nreturn words\n"
    ],
    [
        "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString string, substring string) int {\ncount := 0\nfor i := 0; i <= len(myString)-len(substring); i++ {\n    if myString[i:i+len(substring)] == substring {\n        count++\n    }\n}\nreturn count",
        "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString string, substring string) int {\ncount := 0\nrunes := []rune(myString)\nsubRunes := []rune(substring)\nlength := len(subRunes)\n\nfor i := 0; i <= len(runes)-length; i++ {\n    if string(runes[i:i+length]) == substring {\n        count++\n    }\n}\n\nreturn count\n",
        "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString string, substring string) int {\ncount := 0\nfor i := 0; i <= len(myString)-len(substring); i++ {\n    if myString[i:i+len(substring)] == substring {\n        count++\n    }\n}\nreturn count",
        "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString string, substring string) int {\ncount := 0\nfor i := 0; i < len(myString); i++ {\n    if len(myString[i:]) >= len(substring) && myString[i:i+len(substring)] == substring {\n        count++\n    }\n}\nreturn count",
        "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString string, substring string) int {\ncount := 0\nfor i := 0; i <= len(myString)-len(substring); i++ {\n    if myString[i:i+len(substring)] == substring {\n        count++\n    }\n}\nreturn count"
    ],
    [
        "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunc remove_vowels(text string) string {\nresult := \"\"\nvowels := \"aeiouAEIOU\"\n\nfor _, c := range text {\n    if !strings.ContainsRune(vowels, c) {\n        result += string(c)\n    }\n}\n\nreturn result\n",
        "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunc remove_vowels(text string) string {\nvowels := \"aeiouAEIOU\"\nresult := \"\"\nfor _, char := range text {\n    if !strings.ContainsRune(vowels, char) {\n        result += string(char)\n    }\n}\nreturn result",
        "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunc remove_vowels(text string) string {\nresult := \"\"\nvowels := \"aeiouAEIOU\"\n\nfor _, r := range text {\n    isVowel := false\n    for _, v := range vowels {\n        if r == v {\n            isVowel = true\n            break\n        }\n    }\n    if !isVowel {\n        result += string(r)\n    }\n}\n\nreturn result\n",
        "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunc remove_vowels(text string) string {\nresult := \"\"\nvowels := \"aeiouAEIOU\"\n\nfor _, r := range text {\n    if !strings.ContainsRune(vowels, r) {\n        result += string(r)\n    }\n}\n\nreturn result\n",
        "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunc remove_vowels(text string) string {\nvowels := map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true, 'A': true, 'E': true, 'I': true, 'O': true, 'U': true}\nvar result string\nfor _, r := range text {\n    if _, ok := vowels[r]; !ok {\n        result += string(r)\n    }\n}\nreturn result"
    ],
    [
        "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\nsort.Ints(lst)\nresult := make([]int, 0, len(lst))\nfor len(lst) > 0 {\n    result = append(result, lst[0])\n    lst = lst[1:]\n    if len(lst) > 0 {\n        result = append(result, lst[len(lst)-1])\n        lst = lst[:len(lst)-1]\n    }\n}\nreturn result",
        "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\nsort.Ints(lst)\nresult := make([]int, 0)\nfor len(lst) > 0 {\n    result = append(result, lst[0])\n    lst = lst[1:]\n    if len(lst) > 0 {\n        result = append(result, lst[len(lst)-1])\n        lst = lst[:len(lst)-1]\n    }\n}\nreturn result",
        "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\nsort.Ints(lst)\nresult := make([]int, 0, len(lst))\nfor len(lst) > 0 {\n    result = append(result, lst[0])\n    lst = lst[1:]\n    if len(lst) > 0 {\n        result = append(result, lst[len(lst)-1])\n        lst = lst[:len(lst)-1]\n    }\n}\nreturn result\n",
        "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n// First, sort the list in ascending order\nsort.Ints(lst)\n\n// Create a new slice to hold the result\nresult := make([]int, 0, len(lst))\n\n// While there are elements in the list\nfor len(lst) > 0 {\n    // Append the smallest element to the result\n    result = append(result, lst[0])\n    // Remove the smallest element from the list\n    lst = lst[1:]\n\n    // If there are still elements in the list\n    if len(lst) > 0 {\n        // Append the largest element to the result\n        result = append(result, lst[len(lst)-1])\n        // Remove the largest element from the list\n        lst = lst[:len(lst)-1]\n    }\n}\n\n// Return the result\nreturn result\n",
        "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n// Check if the list is empty\nif len(lst) == 0 {\n    return []int{}\n}\n\n// Sort the list in ascending order\nsort.Ints(lst)\n\n// Create a slice to store the result\nresult := make([]int, 0, len(lst))\n\n// While there are elements in the list\nfor len(lst) > 0 {\n    // Append the smallest element to the result\n    result = append(result, lst[0])\n    lst = lst[1:]\n\n    // If there are still elements in the list\n    if len(lst) > 0 {\n        // Append the largest element to the result\n        result = append(result, lst[len(lst)-1])\n        lst = lst[:len(lst)-1]\n    }\n}\n\nreturn result\n}"
    ],
    [
        "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers []float64) []interface{} {\nif len(numbers) < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\n    minDiff := math.MaxFloat64\n    var closestPair []interface{}\n\n    for i := 0; i < len(numbers)-1; i++ {\n        diff := numbers[i+1] - numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = []interface{}{numbers[i], numbers[i+1]}\n        }\n    }\n\n    return closestPair\n}",
        "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers []float64) []interface{} {\nif len(numbers) < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\n    minDiff := math.MaxFloat64\n    pair := make([]interface{}, 2)\n\n    for i := 0; i < len(numbers)-1; i++ {\n        diff := numbers[i+1] - numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n            pair[0] = numbers[i]\n            pair[1] = numbers[i+1]\n        }\n    }\n\n    return pair\n}",
        "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers []float64) []interface{} {\nif len(numbers) < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\n    minDiff := numbers[1] - numbers[0]\n    pair := []interface{}{numbers[0], numbers[1]}\n\n    for i := 1; i < len(numbers)-1; i++ {\n        diff := numbers[i+1] - numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n            pair[0] = numbers[i]\n            pair[1] = numbers[i+1]\n        }\n    }\n\n    return pair\n}",
        "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers []float64) []interface{} {\nif len(numbers) < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\n    closestPair := []interface{}{numbers[0], numbers[1]}\n    minDiff := numbers[1] - numbers[0]\n\n    for i := 1; i < len(numbers)-1; i++ {\n        diff := numbers[i+1] - numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair[0], closestPair[1] = numbers[i], numbers[i+1]\n        }\n    }\n\n    return closestPair\n}",
        "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers []float64) []interface{} {\nif len(numbers) < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\n    minDiff := math.MaxFloat64\n    result := make([]interface{}, 2)\n\n    for i := 0; i < len(numbers)-1; i++ {\n        diff := numbers[i+1] - numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n            result[0], result[1] = numbers[i], numbers[i+1]\n        }\n    }\n\n    return result\n}"
    ],
    [
        "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool {\nif x == 1 {\n        return true\n    }\n\n    for i := 1; ; i++ {\n        power := 1\n        for j := 0; j < i; j++ {\n            power *= n\n        }\n\n        if power == x {\n            return true\n        } else if power > x {\n            return false\n        }\n    }\n}",
        "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool {\nif x == 1 {\n    return true\n}\n\nif n == 1 {\n    return false\n}\n\nfor i := n; i <= x; i *= n {\n    if i == x {\n        return true\n    }\n}\n\nreturn false\n}",
        "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool {\nif x == 1 {\n    return true\n}\n\nif n == 1 {\n    return x == 1\n}\n\npower := n\nfor power < x {\n    power *= n\n}\n\nreturn power == x\n}",
        "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool {\nif x == 1 {\n    return true\n}\n\nif n == 1 {\n    return false\n}\n\npower := n\nfor power < x {\n    power *= n\n}\n\nreturn power == x\n}",
        "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool {\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n    }\n    power := n\n    for power < x {\n        power *= n\n    }\n    return power == x\n}"
    ],
    [
        "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n int) int {\n    if n < 1 {\n        return -1\n    }\n\n    fibNums := []int{0, 1}\n    primeFibs := []int{}\n    i := 2\n\n    for len(primeFibs) < n {\n        fibNums = append(fibNums, fibNums[i-1]+fibNums[i-2])\n        if isPrime(fibNums[i]) {\n            primeFibs = append(primeFibs, fibNums[i])\n        }\n        i++\n    }\n\n    return primeFibs[n-1]\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n\n    return true\n}",
        "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n int) int {\n    fib := []int{0, 1}\n    primes := []int{}\n\n    for len(primes) < n {\n        fib = append(fib, fib[len(fib)-1]+fib[len(fib)-2])\n        if isPrime(fib[len(fib)-1]) {\n            primes = append(primes, fib[len(fib)-1])\n        }\n    }\n\n    return primes[n-1]\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}",
        "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n int) int {\n    fibs := []int{0, 1}\n    primes := []int{}\n    i := 2\n    for len(primes) < n {\n        fibs = append(fibs, fibs[i-1]+fibs[i-2])\n        if isPrime(fibs[i]) {\n            primes = append(primes, fibs[i])\n        }\n        i++\n    }\n    return primes[n-1]\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}",
        "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n int) int {\n    fib := []int{0, 1}\n    primeFib := []int{}\n    i := 2\n    for len(primeFib) < n {\n        fib = append(fib, fib[i-1]+fib[i-2])\n        if isPrime(fib[i]) {\n            primeFib = append(primeFib, fib[i])\n        }\n        i++\n    }\n    return primeFib[n-1]\n}\n\nfunc isPrime(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i*i <= num; i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}",
        "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n int) int {\n    if n < 1 {\n        return -1\n    }\n\n    primes := []int{2, 3, 5, 13, 89}\n    fibs := []int{2, 3, 5, 13, 89}\n\n    for len(primes) < n {\n        nextFib := fibs[len(fibs)-1] + fibs[len(fibs)-2]\n        fibs = append(fibs, nextFib)\n\n        if isPrime(nextFib) {\n            primes = append(primes, nextFib)\n        }\n    }\n\n    return primes[n-1]\n}\n\n// isPrime checks if a number is prime.\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n\n    return true\n}"
    ],
    [
        "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n// []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc order_by_points(nums []int) []int {\nimport (\n    \"sort\"\n    \"math\"\n)\n\n// Function to calculate sum of digits\nfunc sumOfDigits(n int) int {\n    n = int(math.Abs(float64(n)))\n    sum := 0\n    for n != 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n// Define a custom sort interface\ntype bySumOfDigits []int\n\nfunc (a bySumOfDigits) Len() int           { return len(a) }\nfunc (a bySumOfDigits) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a bySumOfDigits) Less(i, j int) bool { return sumOfDigits(a[i]) < sumOfDigits(a[j]) }\n\n// Sort the numbers\nsort.Sort(bySumOfDigits(nums))\n\nreturn nums\n",
        "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n// []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc order_by_points(nums []int) []int {\nimport \"sort\"\n\n// Function to calculate sum of digits\nfunc sumOfDigits(n int) int {\n    sum := 0\n    for n != 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n// Create a slice of struct to hold the values and their sums\ntype pair struct {\n    value, sum int\n}\n\npairs := make([]pair, len(nums))\n\n// Fill the pairs slice\nfor i, num := range nums {\n    pairs[i] = pair{num, sumOfDigits(abs(num))}\n}\n\n// Sort the pairs slice\nsort.SliceStable(pairs, func(i, j int) bool {\n    return pairs[i].sum < pairs[j].sum\n})\n\n// Fill the nums slice with the sorted values\nfor i, pair := range pairs {\n    nums[i] = pair.value\n}\n\nreturn nums\n}\n\n// Function to calculate absolute value of an integer\nfunc abs(n int) int {\n    if n < 0 {\n        return -n\n    }\n    return n\n}",
        "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n// []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc order_by_points(nums []int) []int {\nimport (\n    \"sort\"\n    \"math\"\n)\n\n// Helper function to calculate sum of digits\nfunc sumOfDigits(n int) int {\n    n = int(math.Abs(float64(n)))\n    sum := 0\n    for n != 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n// Define a custom sort interface\ntype bySumOfDigits []int\n\nfunc (a bySumOfDigits) Len() int           { return len(a) }\nfunc (a bySumOfDigits) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a bySumOfDigits) Less(i, j int) bool { return sumOfDigits(a[i]) < sumOfDigits(a[j]) }\n\n// Sort the slice\nsort.Sort(bySumOfDigits(nums))\n\nreturn nums\n",
        "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n// []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc order_by_points(nums []int) []int {\nimport (\n    \"sort\"\n    \"math\"\n)\n\n// Function to calculate sum of digits\nfunc sumOfDigits(n int) int {\n    n = int(math.Abs(float64(n)))\n    sum := 0\n    for n != 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n// Define a custom sort function\nsort.Slice(nums, func(i, j int) bool {\n    sumI := sumOfDigits(nums[i])\n    sumJ := sumOfDigits(nums[j])\n    // If sums are equal, preserve original order\n    if sumI == sumJ {\n        return i < j\n    }\n    // Otherwise, sort by sum\n    return sumI < sumJ\n})\n\nreturn nums",
        "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n// []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc order_by_points(nums []int) []int {\nimport (\n    \"sort\"\n    \"math\"\n)\n\n// Function to calculate sum of digits\nfunc sumOfDigits(n int) int {\n    n = int(math.Abs(float64(n)))\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n// Define a custom sort function\ntype sortBySumOfDigits []int\n\nfunc (a sortBySumOfDigits) Len() int { return len(a) }\nfunc (a sortBySumOfDigits) Swap(i, j int) { a[i], a[j] = a[j], a[i] }\nfunc (a sortBySumOfDigits) Less(i, j int) bool {\n    return sumOfDigits(a[i]) < sumOfDigits(a[j]) || (sumOfDigits(a[i]) == sumOfDigits(a[j]) && i < j)\n}\n\n// Sort the array\nsort.Sort(sortBySumOfDigits(nums))\n\nreturn nums\n"
    ],
    [
        "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0, 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold float64) bool {\nfor i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc abs(x float64) float64 {\n    if x < 0 {\n        return -x\n    }\n    return x\n}",
        "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0, 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold float64) bool {\nfor i := 0; i < len(numbers); i++ {\n    for j := i + 1; j < len(numbers); j++ {\n        if abs(numbers[i]-numbers[j]) < threshold {\n            return true\n        }\n    }\n}\nreturn false\n}\n\n// Helper function to calculate absolute value of a float64 number\nfunc abs(x float64) float64 {\n    if x < 0 {\n        return -x\n    }\n    return x\n}",
        "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0, 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold float64) bool {\nfor i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc abs(n float64) float64 {\n    if n < 0 {\n        return -n\n    }\n    return n\n}",
        "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0, 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold float64) bool {\nfor i := 0; i < len(numbers); i++ {\n    for j := i + 1; j < len(numbers); j++ {\n        if abs(numbers[i] - numbers[j]) < threshold {\n            return true\n        }\n    }\n}\nreturn false\n}\n\n// abs returns the absolute value of x.\nfunc abs(x float64) float64 {\n    if x < 0 {\n        return -x\n    }\n    return x\n}",
        "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0, 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold float64) bool {\nfor i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc abs(x float64) float64 {\n    if x < 0 {\n        return -x\n    }\n    return x\n}"
    ],
    [
        "package make_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunc make_palindrome(myString string) string {\n// Convert string to rune slice for easy manipulation\n    runes := []rune(myString)\n    length := len(runes)\n\n    // Function to check if a slice is palindrome\n    isPalindrome := func(s []rune) bool {\n        for i := 0; i < len(s)/2; i++ {\n            if s[i] != s[len(s)-1-i] {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Find the longest postfix that is a palindrome\n    var palindromePostfix []rune\n    for i := length; i > 0; i-- {\n        if isPalindrome(runes[i-1:]) {\n            palindromePostfix = runes[i-1:]\n            break\n        }\n    }\n\n    // Get the prefix that comes before the palindromic suffix\n    prefix := runes[:length-len(palindromePostfix)]\n\n    // Reverse the prefix\n    reversePrefix := make([]rune, len(prefix))\n    for i, r := range prefix {\n        reversePrefix[len(prefix)-1-i] = r\n    }\n\n    // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string(append(append(prefix, palindromePostfix...), reversePrefix...))\n}",
        "package make_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunc make_palindrome(myString string) string {\n// Convert the string to a slice of runes for proper handling of special characters\n    runes := []rune(myString)\n    length := len(runes)\n\n    // If the string is empty or already a palindrome, return it\n    if length == 0 || isPalindrome(runes) {\n        return myString\n    }\n\n    // Find the longest palindrome at the end of the string\n    for i := length; i > 0; i-- {\n        if isPalindrome(runes[i:]) {\n            // Append the reverse of the non-palindromic part to the end of the string\n            return myString + reverseString(myString[:i])\n        }\n    }\n\n    // If no palindrome is found, return the original string with its reverse appended\n    return myString + reverseString(myString)\n}\n\n// Helper function to check if a string is a palindrome\nfunc isPalindrome(s []rune) bool {\n    for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        if s[i] != s[j] {\n            return false\n        }\n    }\n    return true\n}\n\n// Helper function to reverse a string\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}",
        "package make_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunc make_palindrome(myString string) string {\n// Convert the string to a rune slice for easier manipulation\n    runes := []rune(myString)\n    length := len(runes)\n\n    // If the string is empty or already a palindrome, return it\n    if length == 0 || isPalindrome(runes) {\n        return myString\n    }\n\n    // Find the longest postfix that is a palindrome\n    var postfix []rune\n    for i := length; i > 0; i-- {\n        if isPalindrome(runes[i-1:]) {\n            postfix = runes[i-1:]\n            break\n        }\n    }\n\n    // Get the non-palindromic prefix\n    prefix := runes[:length-len(postfix)]\n\n    // Reverse the prefix\n    reversePrefix := reverseRunes(prefix)\n\n    // Append the reversed prefix to the original string\n    return string(append(runes, reversePrefix...))\n}\n\n// Helper function to check if a rune slice is a palindrome\nfunc isPalindrome(runes []rune) bool {\n    for i := 0; i < len(runes)/2; i++ {\n        if runes[i] != runes[len(runes)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n// Helper function to reverse a rune slice\nfunc reverseRunes(runes []rune) []rune {\n    reversed := make([]rune, len(runes))\n    for i, rune := range runes {\n        reversed[len(runes)-i-1] = rune\n    }\n    return reversed\n}",
        "package make_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunc make_palindrome(myString string) string {\n// Reverse the string\nreversed := reverseString(myString)\n\n// If the reversed string is equal to the original string, it's already a palindrome\nif myString == reversed {\n    return myString\n}\n\n// Find the longest palindrome in the string\nfor i := len(myString); i > 0; i-- {\n    if myString[:i] == reversed[len(myString)-i:] {\n        return myString + reversed[:len(myString)-i]\n    }\n}\n\n// If no palindrome is found, just return the string plus its reverse\nreturn myString + reversed\n}\n\n// Helper function to reverse a string\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}",
        "package make_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunc make_palindrome(myString string) string {\n// Convert the string to a slice of runes for proper handling of special characters\n    runes := []rune(myString)\n\n    // Find the longest postfix that is a palindrome\n    var postfix []rune\n    for i := len(runes); i > 0; i-- {\n        if isPalindrome(runes[:i]) {\n            postfix = runes[:i]\n            break\n        }\n    }\n\n    // Find the prefix that is not part of the palindrome\n    prefix := runes[len(postfix):]\n\n    // Reverse the prefix\n    for i, j := 0, len(prefix)-1; i < j; i, j = i+1, j-1 {\n        prefix[i], prefix[j] = prefix[j], prefix[i]\n    }\n\n    // Append the reversed prefix to the original string\n    return string(append(runes, prefix...))\n}\n\n// Helper function to check if a string is a palindrome\nfunc isPalindrome(s []rune) bool {\n    for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        if s[i] != s[j] {\n            return false\n        }\n    }\n    return true\n}"
    ],
    [
        "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\nresult := \"\"\n\nfor i := 0; i < len(a); i++ {\n    if a[i] == b[i] {\n        result += \"0\"\n    } else {\n        result += \"1\"\n    }\n}\n\nreturn result\n",
        "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\nresult := \"\"\n\nfor i := 0; i < len(a); i++ {\n    if a[i] == b[i] {\n        result += \"0\"\n    } else {\n        result += \"1\"\n    }\n}\n\nreturn result\n",
        "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\nif len(a) != len(b) {\n\t\treturn \"\"\n\t}\n\n\tresult := \"\"\n\tfor i := 0; i < len(a); i++ {\n\t\tif a[i] == b[i] {\n\t\t\tresult += \"0\"\n\t\t} else {\n\t\t\tresult += \"1\"\n\t\t}\n\t}\n\n\treturn result\n}",
        "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\nif len(a) != len(b) {\n    return \"Input strings must be of the same length\"\n}\n\nresult := make([]rune, len(a))\n\nfor i := range a {\n    if a[i] == b[i] {\n        result[i] = '0'\n    } else {\n        result[i] = '1'\n    }\n}\n\nreturn string(result)\n}",
        "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\nresult := \"\"\n\nfor i := 0; i < len(a); i++ {\n    if a[i] == b[i] {\n        result += \"0\"\n    } else {\n        result += \"1\"\n    }\n}\n\nreturn result\n"
    ],
    [
        "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1) * special_factorial(n-1)\n}",
        "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial * special_factorial(n-1)\n}",
        "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return factorial(n) * special_factorial(n-1)\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n-1)\n}",
        "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\nif n == 0 {\n    return 1\n}\n\nresult := 1\nfor i := 1; i <= n; i++ {\n    result *= factorial(i)\n}\n\nreturn result\n}\n\n// Helper function to calculate factorial\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n}",
        "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n\n    result := 1\n    for i := n; i > 0; i-- {\n        result *= factorial(i)\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n\n    result := 1\n    for i := n; i > 0; i-- {\n        result *= i\n    }\n    return result\n}"
    ],
    [
        "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunc add_elements(arr []int, k int) int {\nsum := 0\nfor i := 0; i < k; i++ {\n    if arr[i] >= 0 && arr[i] <= 99 {\n        sum += arr[i]\n    }\n}\nreturn sum\n}",
        "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunc add_elements(arr []int, k int) int {\nsum := 0\nfor i := 0; i < k; i++ {\n    if arr[i] >= -99 && arr[i] <= 99 {\n        sum += arr[i]\n    }\n}\nreturn sum\n",
        "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunc add_elements(arr []int, k int) int {\nsum := 0\nfor i := 0; i < k; i++ {\n    if arr[i] >= -99 && arr[i] <= 99 {\n        sum += arr[i]\n    }\n}\nreturn sum",
        "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunc add_elements(arr []int, k int) int {\nsum := 0\nfor i := 0; i < k; i++ {\n    if arr[i] >= -99 && arr[i] <= 99 {\n        sum += arr[i]\n    }\n}\nreturn sum",
        "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunc add_elements(arr []int, k int) int {\nsum := 0\nfor i := 0; i < k; i++ {\n    if arr[i] >= 0 && arr[i] <= 99 {\n        sum += arr[i]\n    }\n}\nreturn sum"
    ],
    [
        "package fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunc fib4(n int) int {\nif n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n\n    fibs := make([]int, n+1)\n    fibs[2] = 2\n\n    for i := 4; i <= n; i++ {\n        fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3] + fibs[i-4]\n    }\n\n    return fibs[n]\n}",
        "package fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunc fib4(n int) int {\n    if n < 2 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    }\n\n    fibs := make([]int, n+1)\n    fibs[0], fibs[1], fibs[2], fibs[3] = 0, 0, 2, 0\n\n    for i := 4; i <= n; i++ {\n        fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3] + fibs[i-4]\n    }\n\n    return fibs[n]\n}",
        "package fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunc fib4(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    }\n\n    fibs := make([]int, n+1)\n    fibs[0], fibs[1], fibs[2], fibs[3] = 0, 0, 2, 0\n\n    for i := 4; i <= n; i++ {\n        fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3] + fibs[i-4]\n    }\n\n    return fibs[n]\n}",
        "package fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunc fib4(n int) int {\n    if n <= 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    }\n\n    fib := make([]int, n+1)\n    fib[0], fib[1], fib[2], fib[3] = 0, 0, 2, 0\n\n    for i := 4; i <= n; i++ {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n    }\n\n    return fib[n]\n}",
        "package fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunc fib4(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    }\n\n    fib := make([]int, n+1)\n    fib[0], fib[1], fib[2], fib[3] = 0, 0, 2, 0\n\n    for i := 4; i <= n; i++ {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n    }\n\n    return fib[n]\n}"
    ],
    [
        "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, num := range x {\n        hasEvenDigit := false\n        for num != 0 {\n            digit := num % 10\n            if digit%2 == 0 {\n                hasEvenDigit = true\n                break\n            }\n            num = num / 10\n        }\n        if !hasEvenDigit {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}",
        "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var res []int\n    for _, num := range x {\n        hasEvenDigit := false\n        for _, digit := range fmt.Sprintf(\"%d\", num) {\n            if (digit-'0')%2 == 0 {\n                hasEvenDigit = true\n                break\n            }\n        }\n        if !hasEvenDigit {\n            res = append(res, num)\n        }\n    }\n    sort.Ints(res)\n    return res\n}",
        "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, num := range x {\n        hasEvenDigit := false\n        for _, digit := range fmt.Sprintf(\"%d\", num) {\n            if (digit-'0')%2 == 0 {\n                hasEvenDigit = true\n                break\n            }\n        }\n        if !hasEvenDigit {\n            result = append(result, num)\n        }\n    }\n\n    sort.Ints(result)\n    return result\n}",
        "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, num := range x {\n        hasEven := false\n        for _, digit := range fmt.Sprintf(\"%d\", num) {\n            if (digit-'0')%2 == 0 {\n                hasEven = true\n                break\n            }\n        }\n        if !hasEven {\n            result = append(result, num)\n        }\n    }\n\n    // sort the result\n    sort.Ints(result)\n\n    return result\n}",
        "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, num := range x {\n        hasEven := false\n        for _, digit := range fmt.Sprintf(\"%d\", num) {\n            if (digit-'0')%2 == 0 {\n                hasEven = true\n                break\n            }\n        }\n        if !hasEven {\n            result = append(result, num)\n        }\n    }\n\n    sort.Ints(result)\n    return result\n}"
    ],
    [
        "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string {\n// Define the consonants\nconsonants := \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n// Split the string into words\nwords := strings.Fields(s)\n\n// Initialize an empty slice to store the words with n consonants\nvar result []string\n\n// Iterate over the words\nfor _, word := range words {\n    // Initialize a counter for consonants\n    count := 0\n\n    // Iterate over the characters in the word\n    for _, char := range word {\n        // Check if the character is a consonant\n        if strings.ContainsRune(consonants, char) {\n            // Increment the counter\n            count++\n        }\n    }\n\n    // Check if the word has exactly n consonants\n    if count == n {\n        // Add the word to the result slice\n        result = append(result, word)\n    }\n}\n\n// Return the result\nreturn result",
        "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string {\n// Define the list of vowels\nvowels := \"aeiouAEIOU\"\n\n// Split the string into words\nwords := strings.Fields(s)\n\n// Initialize a slice to hold the words with exactly n consonants\nvar result []string\n\n// Iterate over the words\nfor _, word := range words {\n    // Initialize a counter for the consonants\n    consonants := 0\n\n    // Iterate over the characters in the word\n    for _, char := range word {\n        // Check if the character is not a vowel\n        if !strings.ContainsRune(vowels, char) {\n            // Increment the counter\n            consonants++\n        }\n    }\n\n    // Check if the word has exactly n consonants\n    if consonants == n {\n        // Add the word to the result\n        result = append(result, word)\n    }\n}\n\n// Return the result\nreturn result",
        "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string {\n// Create a list to hold the words\nvar words []string\n\n// Check if string is empty\nif s == \"\" {\n    return words\n}\n\n// Split the string into words\nsplitWords := strings.Fields(s)\n\n// Define a list of vowels\nvowels := []rune{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\nfor _, word := range splitWords {\n    // Initialize count of consonants\n    count := 0\n\n    for _, letter := range word {\n        // Check if letter is not a vowel (i.e., it's a consonant)\n        if !contains(vowels, letter) {\n            count++\n        }\n    }\n\n    // If the word has exactly n consonants, add it to the list\n    if count == n {\n        words = append(words, word)\n    }\n}\n\nreturn words\n}\n\n// Helper function to check if a slice contains a particular rune\nfunc contains(s []rune, r rune) bool {\n    for _, a := range s {\n        if a == r {\n            return true\n        }\n    }\n    return false\n}",
        "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string {\n// Define the consonants\nconsonants := \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n// Split the string into words\nwords := strings.Fields(s)\n\n// Initialize an empty slice to store the words with n consonants\nvar selectedWords []string\n\n// Loop over the words\nfor _, word := range words {\n    // Initialize a counter for the consonants\n    count := 0\n\n    // Loop over the characters in the word\n    for _, char := range word {\n        // If the character is a consonant, increment the counter\n        if strings.ContainsRune(consonants, char) {\n            count++\n        }\n    }\n\n    // If the word has exactly n consonants, add it to the selected words\n    if count == n {\n        selectedWords = append(selectedWords, word)\n    }\n}\n\n// Return the selected words\nreturn selectedWords\n",
        "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string {\n// Define a list of vowels\nvowels := []rune{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\n// Function to check if a character is a vowel\nisVowel := func(c rune) bool {\n    for _, v := range vowels {\n        if c == v {\n            return true\n        }\n    }\n    return false\n}\n\n// Split the string into words\nwords := strings.Fields(s)\n\n// Initialize an empty slice to store the result\nresult := []string{}\n\n// Iterate over each word\nfor _, word := range words {\n    // Initialize a counter for the consonants\n    consonants := 0\n\n    // Iterate over each character in the word\n    for _, char := range word {\n        // If the character is not a vowel, increment the counter\n        if !isVowel(char) {\n            consonants++\n        }\n    }\n\n    // If the word contains exactly n consonants, add it to the result\n    if consonants == n {\n        result = append(result, word)\n    }\n}\n\n// Return the result\nreturn result"
    ],
    [
        "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w int) bool {\n// Check if the list is a palindrome\nfor i := 0; i < len(q)/2; i++ {\n    if q[i] != q[len(q)-1-i] {\n        return false\n    }\n}\n\n// Check if the sum of the elements is less than or equal to w\nsum := 0\nfor _, v := range q {\n    sum += v\n}\n\nreturn sum <= w\n",
        "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w int) bool {\n// Check if the sum of elements is less than or equal to w\nsum := 0\nfor _, v := range q {\n    sum += v\n}\nif sum > w {\n    return false\n}\n\n// Check if the list is palindromic\nfor i := 0; i < len(q)/2; i++ {\n    if q[i] != q[len(q)-i-1] {\n        return false\n    }\n}\n\nreturn true\n}",
        "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w int) bool {\nsum := 0\nfor _, v := range q {\n    sum += v\n}\nif sum > w {\n    return false\n}\n\nfor i := 0; i < len(q)/2; i++ {\n    if q[i] != q[len(q)-1-i] {\n        return false\n    }\n}\n\nreturn true\n}",
        "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w int) bool {\n// Check if the list is palindromic\nfor i := 0; i < len(q)/2; i++ {\n    if q[i] != q[len(q)-i-1] {\n        return false\n    }\n}\n\n// Check if the sum of elements is less than or equal to the maximum weight\nsum := 0\nfor _, v := range q {\n    sum += v\n}\n\nreturn sum <= w\n}",
        "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w int) bool {\n// Check if it's a palindromic list\nfor i := 0; i < len(q)/2; i++ {\n    if q[i] != q[len(q)-i-1] {\n        return false\n    }\n}\n\n// Calculate the sum of its elements\nsum := 0\nfor _, v := range q {\n    sum += v\n}\n\n// Check if the sum is less than or equal the maximum possible weight\nif sum > w {\n    return false\n}\n\nreturn true\n}"
    ],
    [
        "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunc fib(n int) int {\nif n <= 1 {\n    return n\n} else {\n    a, b := 0, 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return b\n}",
        "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunc fib(n int) int {\nif n <= 1 {\n    return n\n} else {\n    a, b := 0, 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return b\n}",
        "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunc fib(n int) int {\nif n <= 1 {\n    return n\n}\n\nfirst, second := 0, 1\n\nfor i := 2; i <= n; i++ {\n    first, second = second, first+second\n}\n\nreturn second\n}",
        "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunc fib(n int) int {\nif n <= 1 {\n    return n\n} else {\n    a, b := 0, 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return b\n}",
        "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunc fib(n int) int {\nif n <= 1 {\n    return n\n}\na, b := 0, 1\nfor i := 2; i <= n; i++ {\n    a, b = b, a+b\n}\nreturn b\n}"
    ],
    [
        "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name string, extensions []string) string {\n    strongestStrength := -100000\n    strongestExtension := \"\"\n\n    for _, extension := range extensions {\n        cap := 0\n        sm := 0\n\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                cap++\n            } else if char >= 'a' && char <= 'z' {\n                sm++\n            }\n        }\n\n        strength := cap - sm\n        if strength > strongestStrength {\n            strongestStrength = strength\n            strongestExtension = extension\n        }\n    }\n\n    return fmt.Sprintf(\"%s.%s\", class_name, strongestExtension)\n}",
        "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name string, extensions []string) string {\n    if len(extensions) == 0 {\n        return class_name\n    }\n\n    var strongestExtension string\n    maxStrength := -1\n\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                cap++\n            } else if char >= 'a' && char <= 'z' {\n                sm++\n            }\n        }\n        strength := cap - sm\n        if strength > maxStrength {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n\n    return fmt.Sprintf(\"%s.%s\", class_name, strongestExtension)\n}",
        "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name string, extensions []string) string {\n    strongestExtension := \"\"\n    maxStrength := -1\n\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                cap++\n            } else if char >= 'a' && char <= 'z' {\n                sm++\n            }\n        }\n        strength := cap - sm\n        if strength > maxStrength {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n\n    return fmt.Sprintf(\"%s.%s\", class_name, strongestExtension)\n}",
        "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name string, extensions []string) string {\n    var strongestExtension string\n    var maxStrength int = -1\n\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                cap++\n            } else if char >= 'a' && char <= 'z' {\n                sm++\n            }\n        }\n        strength := cap - sm\n        if strength > maxStrength {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n\n    return class_name + \".\" + strongestExtension\n}",
        "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name string, extensions []string) string {\n    strongestExtension := \"\"\n    maxStrength := -1\n\n    for _, extension := range extensions {\n        capCount := 0\n        smCount := 0\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                capCount++\n            } else if char >= 'a' && char <= 'z' {\n                smCount++\n            }\n        }\n        strength := capCount - smCount\n        if strength > maxStrength {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n\n    return class_name + \".\" + strongestExtension\n}"
    ],
    [
        "package match_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([]string{\"()(\", \")\"})\n// \"Yes\"\n// >>> match_parens([]string{\")\", \")\"})\n// \"No\"\nfunc match_parens(lst []string) string {\nopen, close := 0, 0\n    for _, str := range lst {\n        for _, c := range str {\n            if c == '(' {\n                open++\n            } else {\n                if open > 0 {\n                    open--\n                } else {\n                    close++\n                }\n            }\n        }\n    }\n    if open == 0 && close == 0 {\n        return \"Yes\"\n    }\n    return \"No\"\n}",
        "package match_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([]string{\"()(\", \")\"})\n// \"Yes\"\n// >>> match_parens([]string{\")\", \")\"})\n// \"No\"\nfunc match_parens(lst []string) string {\n    open, close := 0, 0\n\n    for _, str := range lst {\n        for _, ch := range str {\n            if ch == '(' {\n                open++\n            } else if ch == ')' {\n                if open > 0 {\n                    open--\n                } else {\n                    close++\n                }\n            }\n        }\n    }\n\n    if open == 0 && close == 0 {\n        return \"Yes\"\n    }\n\n    return \"No\"\n}",
        "package match_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([]string{\"()(\", \")\"})\n// \"Yes\"\n// >>> match_parens([]string{\")\", \")\"})\n// \"No\"\nfunc match_parens(lst []string) string {\n// Initialize counters for open and close parentheses\nopenCount, closeCount := 0, 0\n\n// Iterate over the strings in the list\nfor _, str := range lst {\n    // Iterate over the characters in the string\n    for _, ch := range str {\n        // If the character is an open parenthesis, increment the openCount\n        if ch == '(' {\n            openCount++\n        } else if ch == ')' {\n            // If the character is a close parenthesis\n            if openCount > 0 {\n                // If there are unmatched open parentheses, match one and decrement the openCount\n                openCount--\n            } else {\n                // Otherwise, increment the closeCount\n                closeCount++\n            }\n        }\n    }\n}\n\n// If there are no unmatched open or close parentheses, return \"Yes\"\nif openCount == 0 && closeCount == 0 {\n    return \"Yes\"\n}\n\n// Otherwise, return \"No\"\nreturn \"No\"",
        "package match_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([]string{\"()(\", \")\"})\n// \"Yes\"\n// >>> match_parens([]string{\")\", \")\"})\n// \"No\"\nfunc match_parens(lst []string) string {\n    open, close := 0, 0\n\n    for _, str := range lst {\n        for _, ch := range str {\n            if ch == '(' {\n                open++\n            } else if ch == ')' {\n                if open > 0 {\n                    open--\n                } else {\n                    close++\n                }\n            }\n        }\n    }\n\n    if open == 0 && close == 0 {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}",
        "package match_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([]string{\"()(\", \")\"})\n// \"Yes\"\n// >>> match_parens([]string{\")\", \")\"})\n// \"No\"\nfunc match_parens(lst []string) string {\n    // Initialize counters for open and close parentheses\n    open, close := 0, 0\n\n    // Iterate over all strings in the list\n    for _, str := range lst {\n        // Iterate over all characters in the string\n        for _, ch := range str {\n            // If the character is an open parenthesis, increment the open counter\n            if ch == '(' {\n                open++\n            } else if ch == ')' {\n                // If the character is a close parenthesis, check if there's an open one to match it\n                if open > 0 {\n                    open--\n                } else {\n                    // If there's no open parenthesis to match, increment the close counter\n                    close++\n                }\n            }\n        }\n    }\n\n    // If there are unmatched open or close parentheses, return \"No\"\n    if open != 0 || close != 0 {\n        return \"No\"\n    }\n\n    // If all parentheses are matched, return \"Yes\"\n    return \"Yes\"\n}"
    ],
    [
        "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n// Check if all numbers are integers\nif x != float64(int(x)) || y != float64(int(y)) || z != float64(int(z)) {\n    return false\n}\n\n// Check if one of the numbers is equal to the sum of the other two\nif x == y + z || y == x + z || z == x + y {\n    return true\n}\n\nreturn false\n}",
        "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\nif x == y+z || y == x+z || z == x+y {\n        return true\n    }\n    return false\n}",
        "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n// Check if all numbers are integers\nif x == float64(int(x)) && y == float64(int(y)) && z == float64(int(z)) {\n    // Check if one of the numbers is equal to the sum of the other two\n    if x == y+z || y == x+z || z == x+y {\n        return true\n    }\n}\nreturn false\n}",
        "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n    if x == y+z || y == x+z || z == x+y {\n        return true\n    }\n    return false\n}",
        "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\nif x == y+z || y == x+z || z == x+y {\n    return true\n}\nreturn false\n}"
    ],
    [
        "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64 {\nreturn number - float64(int(number))",
        "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64 {\nreturn number - float64(int(number))",
        "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64 {\nreturn number - float64(int(number))",
        "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64 {\nreturn number - float64(int(number))",
        "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64 {\nreturn number - float64(int(number))"
    ],
    [
        "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n// []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6, 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\nfor i := range l {\n    l[i]++\n}\nreturn l",
        "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n// []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6, 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\nfor i := range l {\n    l[i]++\n}\nreturn l",
        "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n// []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6, 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\nfor i := range l {\n    l[i]++\n}\nreturn l",
        "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n// []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6, 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\nfor i := range l {\n    l[i]++\n}\nreturn l",
        "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n// []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6, 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\nfor i := range l {\n    l[i]++\n}\nreturn l"
    ],
    [
        "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int) int {\n// helper function to check if a number is prime\nfunc isPrime(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i*i <= num; i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n// return x if n is prime, y otherwise\nif isPrime(n) {\n    return x\n} else {\n    return y\n}\n}",
        "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int) int {\n// function to check if a number is prime\nfunc isPrime(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i*i <= num; i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nif isPrime(n) {\n    return x\n} else {\n    return y\n}\n}",
        "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int) int {\n// Function to check if number is prime\nfunc isPrime(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i*i <= num; i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n// Check if n is prime and return x or y accordingly\nif isPrime(n) {\n    return x\n} else {\n    return y\n}\n",
        "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int) int {\n// function to check if number is prime\nfunc isPrime(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i*i <= num; i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n// if n is prime return x, else return y\nif isPrime(n) {\n    return x\n} else {\n    return y\n}\n}",
        "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int) int {\n// function to check if a number is prime\nfunc isPrime(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i*i <= num; i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n// if n is prime, return x, else return y\nif isPrime(n) {\n    return x\n} else {\n    return y\n}\n}"
    ],
    [
        "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunc modp(n int, p int) int {\nresult := 1\nfor i := 0; i < n; i++ {\n    result = (result * 2) % p\n}\nreturn result",
        "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunc modp(n int, p int) int {\nresult := 1\nfor i := 0; i < n; i++ {\n    result = (result * 2) % p\n}\nreturn result\n",
        "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunc modp(n int, p int) int {\nresult := 1\nfor i := 0; i < n; i++ {\n    result = (result * 2) % p\n}\nreturn result",
        "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunc modp(n int, p int) int {\n// Initialize result to 1\nresult := 1\n\n// Calculate 2^n\nfor i := 0; i < n; i++ {\n    result *= 2\n}\n\n// Return result modulo p\nreturn result % p\n}",
        "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunc modp(n int, p int) int {\nresult := 1\nfor i := 0; i < n; i++ {\n    result = (result * 2) % p\n}\nreturn result\n"
    ],
    [
        "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\nnum = abs(num)\nevenCount := 0\noddCount := 0\n\nfor num != 0 {\n    digit := num % 10\n    if digit % 2 == 0 {\n        evenCount++\n    } else {\n        oddCount++\n    }\n    num = num / 10\n}\n\nreturn []interface{}{evenCount, oddCount}\n}",
        "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    num = abs(num)\n    evenCount := 0\n    oddCount := 0\n\n    for num != 0 {\n        digit := num % 10\n        if digit%2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n        }\n        num = num / 10\n    }\n\n    return []interface{}{evenCount, oddCount}\n}\n\n// abs returns the absolute value of num.\nfunc abs(num int) int {\n    if num < 0 {\n        return -num\n    }\n    return num\n}",
        "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var evenCount, oddCount int\n    num = abs(num)\n\n    for num != 0 {\n        digit := num % 10\n        if digit%2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n        }\n        num /= 10\n    }\n\n    return []interface{}{evenCount, oddCount}\n}\n\n// abs returns the absolute value of num.\nfunc abs(num int) int {\n    if num < 0 {\n        return -num\n    }\n    return num\n}",
        "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\nnum = abs(num)\nevenCount := 0\noddCount := 0\n\nfor num != 0 {\n    digit := num % 10\n    if digit%2 == 0 {\n        evenCount++\n    } else {\n        oddCount++\n    }\n    num = num / 10\n}\n\nreturn []interface{}{evenCount, oddCount}\n}",
        "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\nnum = abs(num)\nevenCount := 0\noddCount := 0\n\nfor num != 0 {\n    digit := num % 10\n    if digit % 2 == 0 {\n        evenCount++\n    } else {\n        oddCount++\n    }\n    num = num / 10\n}\n\nreturn []interface{}{evenCount, oddCount}"
    ],
    [
        "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// Your task is to check if the string is hapgo or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunc is_happy(s string) bool {\nif len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}",
        "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// Your task is to check if the string is hapgo or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunc is_happy(s string) bool {\nif len(s) < 3 {\n    return false\n}\n\nfor i := 0; i < len(s) - 2; i++ {\n    if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n        return false\n    }\n}\n\nreturn true\n}",
        "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// Your task is to check if the string is hapgo or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunc is_happy(s string) bool {\nif len(s) < 3 {\n        return false\n    }\n\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n\n    return true\n}",
        "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// Your task is to check if the string is hapgo or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunc is_happy(s string) bool {\nif len(s) < 3 {\n        return false\n    }\n\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n\n    return true\n}",
        "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// Your task is to check if the string is hapgo or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunc is_happy(s string) bool {\nif len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}"
    ],
    [
        "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunc largest_prime_factor(n int) int {\n    // Initialize the maximum prime factor\n    maxPrime := -1\n\n    // Divide n by 2 until n is odd\n    for n%2 == 0 {\n        maxPrime = 2\n        n /= 2\n    }\n\n    // n must be odd at this point so we can skip one element (Note i = i +2)\n    for i := 3; i*i <= n; i += 2 {\n        // While i divides n, replace maxPrime and divide n\n        for n%i == 0 {\n            maxPrime = i\n            n /= i\n        }\n    }\n\n    // This condition is to handle the case when n is a prime number\n    // greater than 2\n    if n > 2 {\n        maxPrime = n\n    }\n\n    return maxPrime\n}",
        "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunc largest_prime_factor(n int) int {\n// Initialize the max prime factor as -1\nmaxPrime := -1\n\n// Divide n by 2 until n becomes odd\nfor n%2 == 0 {\n    maxPrime = 2\n    n >>= 1 // equivalent to n /= 2\n}\n\n// n must be odd at this point, thus skip the even numbers and iterate only for odd\nfor i := 3; i*i <= n; i += 2 {\n    // While i divides n, replace maxPrime and divide n\n    for n%i == 0 {\n        maxPrime = i\n        n = n / i\n    }\n}\n\n// This condition is to handle the case when n is a prime number\n// greater than 2\nif n > 2 {\n    maxPrime = n\n}\n\nreturn maxPrime\n",
        "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunc largest_prime_factor(n int) int {\n    maxPrime := -1\n\n    // Divide n by 2 until n is odd\n    for n % 2 == 0 {\n        maxPrime = 2\n        n >>= 1 // equivalent to n /= 2\n    }\n\n    // n must be odd at this point so we can skip one element\n    for i := 3; i*i <= n; i += 2 {\n        // while i divides n, replace maxPrime and divide n\n        for n % i == 0 {\n            maxPrime = i\n            n = n / i\n        }\n    }\n\n    // This condition is to handle the case when n is a prime number\n    // greater than 2\n    if n > 2 {\n        maxPrime = n\n    }\n\n    return maxPrime\n}",
        "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunc largest_prime_factor(n int) int {\n    var largestPrime int\n    // Divide by 2 until n is not even\n    for n%2 == 0 {\n        largestPrime = 2\n        n = n / 2\n    }\n\n    // n must be odd at this point so a skip of 2 can be used\n    for i := 3; i*i <= n; i += 2 {\n        // while i divides n, divide n\n        for n%i == 0 {\n            largestPrime = i\n            n = n / i\n        }\n    }\n\n    // This condition is to handle the case when n is a prime\n    // number greater than 2\n    if n > 2 {\n        largestPrime = n\n    }\n\n    return largestPrime\n}",
        "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunc largest_prime_factor(n int) int {\nmaxPrime := -1\n\n// Print the number of 2s that divide n\nfor n%2 == 0 {\n    maxPrime = 2\n    n >>= 1 // equivalent to n /= 2\n}\n\n// n must be odd at this point, thus skip the even numbers and iterate only for odd\nfor i := 3; i*i <= n; i += 2 {\n    for n%i == 0 {\n        maxPrime = i\n        n = n / i\n    }\n}\n\n// This condition is to handle the case when n is a prime number greater than 2\nif n > 2 {\n    maxPrime = n\n}\n\nreturn maxPrime\n"
    ],
    [
        "package digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunc digitSum(s string) int {\nvar sum int\nfor _, c := range s {\n    if c >= 'A' && c <= 'Z' {\n        sum += int(c)\n    }\n}\nreturn sum\n}",
        "package digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunc digitSum(s string) int {\nvar sum int\nfor _, r := range s {\n    if r >= 'A' && r <= 'Z' {\n        sum += int(r)\n    }\n}\nreturn sum\n}",
        "package digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunc digitSum(s string) int {\nvar sum int\nfor _, c := range s {\n    if c >= 'A' && c <= 'Z' {\n        sum += int(c)\n    }\n}\nreturn sum\n}",
        "package digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunc digitSum(s string) int {\nvar sum int\nfor _, r := range s {\n    if r >= 'A' && r <= 'Z' {\n        sum += int(r)\n    }\n}\nreturn sum\n}",
        "package digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunc digitSum(s string) int {\nsum := 0\nfor _, ch := range s {\n    if ch >= 'A' && ch <= 'Z' {\n        sum += int(ch)\n    }\n}\nreturn sum"
    ],
    [
        "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n// []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64) []float64 {\nminVal := numbers[0]\nmaxVal := numbers[0]\n\nfor _, num := range numbers {\n    if num < minVal {\n        minVal = num\n    }\n    if num > maxVal {\n        maxVal = num\n    }\n}\n\nrangeVal := maxVal - minVal\nrescaled := make([]float64, len(numbers))\n\nfor i, num := range numbers {\n    rescaled[i] = (num - minVal) / rangeVal\n}\n\nreturn rescaled\n}",
        "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n// []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64) []float64 {\nmin, max := numbers[0], numbers[0]\n\n// Find the min and max values\nfor _, num := range numbers {\n    if num < min {\n        min = num\n    }\n    if num > max {\n        max = num\n    }\n}\n\n// Create a new slice to hold the rescaled numbers\nrescaled := make([]float64, len(numbers))\n\n// Rescale the numbers\nfor i, num := range numbers {\n    rescaled[i] = (num - min) / (max - min)\n}\n\nreturn rescaled\n}",
        "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n// []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64) []float64 {\nminVal := numbers[0]\nmaxVal := numbers[0]\n\nfor _, num := range numbers {\n    if num < minVal {\n        minVal = num\n    }\n    if num > maxVal {\n        maxVal = num\n    }\n}\n\nrangeVal := maxVal - minVal\n\nfor i, num := range numbers {\n    numbers[i] = (num - minVal) / rangeVal\n}\n\nreturn numbers\n}",
        "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n// []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64) []float64 {\nminVal := numbers[0]\nmaxVal := numbers[0]\n\nfor _, num := range numbers {\n    if num < minVal {\n        minVal = num\n    }\n    if num > maxVal {\n        maxVal = num\n    }\n}\n\nrangeVal := maxVal - minVal\nrescaledNumbers := make([]float64, len(numbers))\n\nfor i, num := range numbers {\n    rescaledNumbers[i] = (num - minVal) / rangeVal\n}\n\nreturn rescaledNumbers\n",
        "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n// []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64) []float64 {\nminVal := numbers[0]\nmaxVal := numbers[0]\n\nfor _, num := range numbers {\n    if num < minVal {\n        minVal = num\n    }\n    if num > maxVal {\n        maxVal = num\n    }\n}\n\nrangeVal := maxVal - minVal\nif rangeVal == 0 {\n    rangeVal = 1\n}\n\nrescaled := make([]float64, len(numbers))\nfor i, num := range numbers {\n    rescaled[i] = (num - minVal) / rangeVal\n}\n\nreturn rescaled\n}"
    ],
    [
        "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\nsum := 0\nfor i, num := range lst {\n    if i%2 == 0 && num%2 != 0 {\n        sum += num\n    }\n}\nreturn sum\n}",
        "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\nsum := 0\nfor i := 0; i < len(lst); i += 2 {\n    if lst[i]%2 != 0 {\n        sum += lst[i]\n    }\n}\nreturn sum\n",
        "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\nsum := 0\nfor i, num := range lst {\n    if i%2 == 0 && num%2 != 0 {\n        sum += num\n    }\n}\nreturn sum\n}",
        "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\nsum := 0\nfor i, num := range lst {\n    if i%2 == 0 && num%2 != 0 {\n        sum += num\n    }\n}\nreturn sum\n}",
        "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\nsum := 0\nfor i, num := range lst {\n    if i%2 == 0 && num%2 != 0 {\n        sum += num\n    }\n}\nreturn sum\n}"
    ],
    [
        "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"Given a list representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given list is empty, return [].\n// Example 1:\n// >>> pluck([]int{4, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([]int{1, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([]int{})\n// []int{}\n// Example 4:\n// >>> pluck([]int{5, 0, 3, 0, 4, 2})\n// []int{0, 1}\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\nmin := -1\nminIndex := -1\n\nfor i, val := range arr {\n    if val%2 == 0 {\n        if min == -1 || val < min {\n            min = val\n            minIndex = i\n        }\n    }\n}\n\nif min == -1 {\n    return []int{}\n} else {\n    return []int{min, minIndex}\n}\n}",
        "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"Given a list representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given list is empty, return [].\n// Example 1:\n// >>> pluck([]int{4, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([]int{1, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([]int{})\n// []int{}\n// Example 4:\n// >>> pluck([]int{5, 0, 3, 0, 4, 2})\n// []int{0, 1}\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\nmin := -1\nindex := -1\n\nfor i, val := range arr {\n    if val%2 == 0 {\n        if min == -1 || val < min {\n            min = val\n            index = i\n        }\n    }\n}\n\nif min == -1 {\n    return []int{}\n} else {\n    return []int{min, index}\n}",
        "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"Given a list representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given list is empty, return [].\n// Example 1:\n// >>> pluck([]int{4, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([]int{1, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([]int{})\n// []int{}\n// Example 4:\n// >>> pluck([]int{5, 0, 3, 0, 4, 2})\n// []int{0, 1}\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\nmin := -1\nidx := -1\n\nfor i, v := range arr {\n    if v%2 == 0 {\n        if min == -1 || v < min {\n            min = v\n            idx = i\n        }\n    }\n}\n\nif min == -1 {\n    return []int{}\n}\n\nreturn []int{min, idx}",
        "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"Given a list representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given list is empty, return [].\n// Example 1:\n// >>> pluck([]int{4, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([]int{1, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([]int{})\n// []int{}\n// Example 4:\n// >>> pluck([]int{5, 0, 3, 0, 4, 2})\n// []int{0, 1}\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\nmin := -1\nindex := -1\n\nfor i, val := range arr {\n    if val%2 == 0 {\n        if min == -1 || val < min {\n            min = val\n            index = i\n        }\n    }\n}\n\nif min == -1 {\n    return []int{}\n} else {\n    return []int{min, index}\n}\n}",
        "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"Given a list representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given list is empty, return [].\n// Example 1:\n// >>> pluck([]int{4, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([]int{1, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([]int{})\n// []int{}\n// Example 4:\n// >>> pluck([]int{5, 0, 3, 0, 4, 2})\n// []int{0, 1}\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\nminEven := -1\nminIndex := -1\n\nfor i, val := range arr {\n    if val%2 == 0 {\n        if minEven == -1 || val < minEven {\n            minEven = val\n            minIndex = i\n        }\n    }\n}\n\nif minEven == -1 {\n    return []int{}\n} else {\n    return []int{minEven, minIndex}\n}"
    ],
    [
        "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a positive integer n. You have to create an integer list a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if n < 3 {\n        return 0\n    }\n\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i*i - i + 1\n    }\n\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i + 1; j < n-1; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n\n    return count\n}",
        "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a positive integer n. You have to create an integer list a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if n < 3 {\n        return 0\n    }\n\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i*i - i + 1\n    }\n\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]+a[j]+a[k])%3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n\n    return count\n}",
        "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a positive integer n. You have to create an integer list a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if n < 3 {\n        return 0\n    }\n\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i*i - i + 1\n    }\n\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]+a[j]+a[k])%3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n\n    return count\n}",
        "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a positive integer n. You have to create an integer list a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    // Initialize the count of triples to 0\n    count := 0\n\n    // Create the integer list a\n    a := make([]int, n+1)\n    for i := 1; i <= n; i++ {\n        a[i] = i*i - i + 1\n    }\n\n    // Check all triples (a[i], a[j], a[k]) where i < j < k\n    for i := 1; i <= n; i++ {\n        for j := i + 1; j <= n; j++ {\n            for k := j + 1; k <= n; k++ {\n                // If the sum of the triple is a multiple of 3, increment the count\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n\n    // Return the count of triples\n    return count\n}",
        "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a positive integer n. You have to create an integer list a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    // Initialize the counter\n    count := 0\n\n    // Create the list\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i*i - i + 1\n    }\n\n    // Iterate over the list and find the triples\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n\n    return count\n}"
    ],
    [
        "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\noddCount1 := 0\nevenCount2 := 0\n\n// Count odd numbers in lst1 and even numbers in lst2\nfor _, num := range lst1 {\n    if num%2 != 0 {\n        oddCount1++\n    }\n}\nfor _, num := range lst2 {\n    if num%2 == 0 {\n        evenCount2++\n    }\n}\n\n// If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\nif oddCount1 <= evenCount2 {\n    return \"YES\"\n}\n\n// Otherwise, return \"NO\"\nreturn \"NO\"",
        "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n// Initialize a count for odd numbers in lst1\noddCount1 := 0\nfor _, num := range lst1 {\n    if num%2 != 0 {\n        oddCount1++\n    }\n}\n\n// Count the even numbers in lst2\nevenCount2 := 0\nfor _, num := range lst2 {\n    if num%2 == 0 {\n        evenCount2++\n    }\n}\n\n// If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2, \n// then it is possible to exchange elements to make lst1 a list of only even numbers.\nif oddCount1 <= evenCount2 {\n    return \"YES\"\n} else {\n    return \"NO\"\n}\n",
        "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n// Count the number of odd numbers in lst1 and even numbers in lst2\noddCount1, evenCount2 := 0, 0\nfor _, num := range lst1 {\n    if num%2 != 0 {\n        oddCount1++\n    }\n}\nfor _, num := range lst2 {\n    if num%2 == 0 {\n        evenCount2++\n    }\n}\n\n// If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2,\n// it means we can exchange all odd numbers in lst1 with even numbers in lst2.\nif oddCount1 <= evenCount2 {\n    return \"YES\"\n}\nreturn \"NO\"",
        "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\noddCount := 0\nevenCount := 0\n\n// Count odd numbers in lst1 and even numbers in lst2\nfor _, num := range lst1 {\n    if num%2 != 0 {\n        oddCount++\n    }\n}\nfor _, num := range lst2 {\n    if num%2 == 0 {\n        evenCount++\n    }\n}\n\n// If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2,\n// it is possible to exchange elements to make lst1 a list of only even numbers\nif oddCount <= evenCount {\n    return \"YES\"\n} else {\n    return \"NO\"\n}\n}",
        "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n// Count the number of odd numbers in lst1 and even numbers in lst2\n    oddCount := 0\n    evenCount := 0\n    for _, num := range lst1 {\n        if num%2 != 0 {\n            oddCount++\n        }\n    }\n    for _, num := range lst2 {\n        if num%2 == 0 {\n            evenCount++\n        }\n    }\n\n    // If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2,\n    // it is possible to exchange elements to make lst1 a list of only even numbers\n    if oddCount <= evenCount {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}"
    ],
    [
        "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\nsort.Ints(l)\nn := len(l)\nif n%2 == 0 {\n    return float64(l[n/2-1]+l[n/2]) / 2.0\n} else {\n    return float64(l[n/2])\n}\n}",
        "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\nsort.Ints(l)\nn := len(l)\nif n%2 == 0 {\n    return float64(l[n/2-1]+l[n/2]) / 2.0\n} else {\n    return float64(l[n/2])\n}",
        "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\nsort.Ints(l)\nn := len(l)\nif n%2 == 0 {\n    return float64(l[n/2-1]+l[n/2]) / 2\n} else {\n    return float64(l[n/2])\n}\n}",
        "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\nsort.Ints(l)\nn := len(l)\nif n%2 == 0 {\n    return float64(l[n/2-1]+l[n/2]) / 2.0\n} else {\n    return float64(l[n/2])\n}\n}",
        "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\nsort.Ints(l)\nn := len(l)\n\nif n%2 == 0 {\n    return float64(l[n/2-1]+l[n/2]) / 2.0\n} else {\n    return float64(l[n/2])\n}\n}"
    ],
    [
        "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\nlength := len(myString)\n\nif length < 2 {\n    return false\n}\n\nfor i := 2; i*i <= length; i++ {\n    if length%i == 0 {\n        return false\n    }\n}\n\nreturn true\n}",
        "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\nlength := len(myString)\n\nif length < 2 {\n    return false\n}\n\nfor i := 2; i*i <= length; i++ {\n    if length % i == 0 {\n        return false\n    }\n}\n\nreturn true\n}",
        "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n// Calculate the length of the string\n    strLength := len(myString)\n\n    // Zero and one are not considered prime numbers\n    if strLength < 2 {\n        return false\n    }\n\n    // Two is the only even prime number\n    if strLength == 2 {\n        return true\n    }\n\n    // All other even numbers are not primes\n    if strLength%2 == 0 {\n        return false\n    }\n\n    // Check the odd numbers for divisibility\n    // Only up to the square root of strLength is needed\n    for i := 3; i*i <= strLength; i += 2 {\n        if strLength%i == 0 {\n            return false\n        }\n    }\n\n    return true\n}",
        "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\nlength := len(myString)\n\nif length < 2 {\n    return false\n}\n\nfor i := 2; i*i <= length; i++ {\n    if length%i == 0 {\n        return false\n    }\n}\n\nreturn true\n}",
        "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    length := len(myString)\n\n    if length < 2 {\n        return false\n    }\n\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n\n    return true\n}"
    ],
    [
        "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers, find the minimum number of elements that\n// need to be changed to make the list palindromic. A palindromic list is a list that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1, 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2, 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr []int) int {\n    changes := 0\n    i := 0\n    j := len(arr) - 1\n\n    for i < j {\n        if arr[i] != arr[j] {\n            changes++\n        }\n        i++\n        j--\n    }\n\n    return changes\n}",
        "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers, find the minimum number of elements that\n// need to be changed to make the list palindromic. A palindromic list is a list that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1, 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2, 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr []int) int {\n    changes := 0\n    i := 0\n    j := len(arr) - 1\n    for i < j {\n        if arr[i] != arr[j] {\n            changes++\n        }\n        i++\n        j--\n    }\n    return changes\n}",
        "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers, find the minimum number of elements that\n// need to be changed to make the list palindromic. A palindromic list is a list that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1, 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2, 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr []int) int {\n    changes := 0\n    i := 0\n    j := len(arr) - 1\n\n    for i < j {\n        if arr[i] != arr[j] {\n            changes++\n        }\n        i++\n        j--\n    }\n\n    return changes\n}",
        "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers, find the minimum number of elements that\n// need to be changed to make the list palindromic. A palindromic list is a list that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1, 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2, 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr []int) int {\n    changes := 0\n    i := 0\n    j := len(arr) - 1\n    for i < j {\n        if arr[i] != arr[j] {\n            changes++\n        }\n        i++\n        j--\n    }\n    return changes\n}",
        "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers, find the minimum number of elements that\n// need to be changed to make the list palindromic. A palindromic list is a list that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1, 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2, 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr []int) int {\nchanges := 0\nlength := len(arr)\nfor i := 0; i < length/2; i++ {\n    if arr[i] != arr[length-i-1] {\n        changes++\n    }\n}\nreturn changes"
    ],
    [
        "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0, 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>> lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n// 6\nfunc sum_squares(lst []float64) int {\nimport \"math\"\n\nsum := 0\nfor _, num := range lst {\n    roundedNum := int(math.Ceil(num))\n    sum += roundedNum * roundedNum\n}\nreturn sum",
        "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0, 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>> lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n// 6\nfunc sum_squares(lst []float64) int {\nimport \"math\"\n\nsum := 0\nfor _, num := range lst {\n    roundedNum := int(math.Ceil(num))\n    sum += roundedNum * roundedNum\n}\nreturn sum",
        "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0, 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>> lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n// 6\nfunc sum_squares(lst []float64) int {\nimport \"math\"\n\nsum := 0\nfor _, num := range lst {\n    roundedNum := int(math.Ceil(num))\n    sum += roundedNum * roundedNum\n}\nreturn sum",
        "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0, 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>> lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n// 6\nfunc sum_squares(lst []float64) int {\nimport \"math\"\n\nsum := 0\nfor _, num := range lst {\n    roundedNum := int(math.Ceil(num))\n    sum += roundedNum * roundedNum\n}\nreturn sum\n",
        "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0, 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>> lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n// 6\nfunc sum_squares(lst []float64) int {\nimport \"math\"\n\nsum := 0\nfor _, num := range lst {\n    roundedNum := math.Ceil(num)\n    sum += int(roundedNum * roundedNum)\n}\nreturn sum"
    ],
    [
        "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunc file_name_check(file_name string) string {\nimport (\n    \"strings\"\n    \"unicode\"\n)\n\n// Split the file name into name and extension\nparts := strings.Split(file_name, \".\")\nif len(parts) != 2 {\n    return \"No\"\n}\n\nname, ext := parts[0], parts[1]\n\n// Check the name\nif len(name) == 0 || !unicode.IsLetter(rune(name[0])) {\n    return \"No\"\n}\n\n// Check the number of digits in the name\ndigitCount := 0\nfor _, char := range name {\n    if unicode.IsDigit(char) {\n        digitCount++\n    }\n}\nif digitCount > 3 {\n    return \"No\"\n}\n\n// Check the extension\nvalidExtensions := []string{\"txt\", \"exe\", \"dll\"}\nfor _, validExt := range validExtensions {\n    if ext == validExt {\n        return \"Yes\"\n    }\n}\n\nreturn \"No\"",
        "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunc file_name_check(file_name string) string {\n    digitCount := 0\n    for _, ch := range file_name {\n        if ch >= '0' && ch <= '9' {\n            digitCount++\n        }\n    }\n    if digitCount > 3 {\n        return \"No\"\n    }\n\n    dotIndex := -1\n    for i, ch := range file_name {\n        if ch == '.' {\n            if dotIndex != -1 {\n                return \"No\"\n            }\n            dotIndex = i\n        }\n    }\n    if dotIndex == -1 || dotIndex == 0 || !(file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z') {\n        return \"No\"\n    }\n\n    extension := file_name[dotIndex+1:]\n    if extension != \"txt\" && extension != \"exe\" && extension != \"dll\" {\n        return \"No\"\n    }\n\n    return \"Yes\"\n}",
        "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunc file_name_check(file_name string) string {\nimport (\n    \"strings\"\n    \"unicode\"\n)\n\ndigitCount := 0\nfor _, char := range file_name {\n    if unicode.IsDigit(char) {\n        digitCount++\n    }\n}\n\nif digitCount > 3 {\n    return \"No\"\n}\n\nsplitName := strings.Split(file_name, \".\")\nif len(splitName) != 2 {\n    return \"No\"\n}\n\nname, extension := splitName[0], splitName[1]\nif len(name) == 0 || !unicode.IsLetter(rune(name[0])) {\n    return \"No\"\n}\n\nvalidExtensions := []string{\"txt\", \"exe\", \"dll\"}\nfor _, validExtension := range validExtensions {\n    if extension == validExtension {\n        return \"Yes\"\n    }\n}\n\nreturn \"No\"",
        "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunc file_name_check(file_name string) string {\n    // Initialize a counter for digits\n    digitCount := 0\n    for _, char := range file_name {\n        if char >= '0' && char <= '9' {\n            digitCount++\n        }\n    }\n\n    // Check if there are more than 3 digits\n    if digitCount > 3 {\n        return \"No\"\n    }\n\n    // Split the file name into name and extension\n    splitName := strings.Split(file_name, \".\")\n\n    // Check if there is exactly one dot and the name is not empty\n    if len(splitName) != 2 || splitName[0] == \"\" {\n        return \"No\"\n    }\n\n    // Check if the name starts with a letter\n    if (splitName[0][0] < 'a' || splitName[0][0] > 'z') && (splitName[0][0] < 'A' || splitName[0][0] > 'Z') {\n        return \"No\"\n    }\n\n    // Check if the extension is valid\n    validExtensions := []string{\"txt\", \"exe\", \"dll\"}\n    for _, extension := range validExtensions {\n        if splitName[1] == extension {\n            return \"Yes\"\n        }\n    }\n\n    return \"No\"\n}",
        "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunc file_name_check(file_name string) string {\nimport (\n    \"regexp\"\n    \"strings\"\n)\n\n// Define the pattern for a valid file name\npattern := `^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$`\n\n// Compile the pattern\nr, _ := regexp.Compile(pattern)\n\n// Check if the file name matches the pattern\nif r.MatchString(file_name) {\n    return \"Yes\"\n} else {\n    return \"No\"\n}\n// Check if the file name contains more than three digits\nif strings.Count(file_name, \"0\") > 3 || strings.Count(file_name, \"1\") > 3 || strings.Count(file_name, \"2\") > 3 || strings.Count(file_name, \"3\") > 3 || strings.Count(file_name, \"4\") > 3 || strings.Count(file_name, \"5\") > 3 || strings.Count(file_name, \"6\") > 3 || strings.Count(file_name, \"7\") > 3 || strings.Count(file_name, \"8\") > 3 || strings.Count(file_name, \"9\") > 3 {\n    return \"No\"\n}\n\n// Check if the file name contains exactly one dot\nif strings.Count(file_name, \".\") != 1 {\n    return \"No\"\n}\n\n// Split the file name into name and extension\nparts := strings.Split(file_name, \".\")\n\n// Check if the name part is not empty and starts with a letter\nif len(parts[0]) == 0 || !((parts[0][0] >= 'a' && parts[0][0] <= 'z') || (parts[0][0] >= 'A' && parts[0][0] <= 'Z')) {\n    return \"No\"\n}\n\n// Check if the extension is one of the valid extensions\nif parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\" {\n    return \"No\"\n}\n\nreturn \"Yes\""
    ],
    [
        "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n// true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l []int) bool {\nfor i := 0; i < len(l)-2; i++ {\n    for j := i + 1; j < len(l)-1; j++ {\n        for k := j + 1; k < len(l); k++ {\n            if l[i]+l[j]+l[k] == 0 {\n                return true\n            }\n        }\n    }\n}\nreturn false\n}",
        "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n// true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l []int) bool {\nn := len(l)\n\nfor i := 0; i < n-2; i++ {\n    for j := i + 1; j < n-1; j++ {\n        for k := j + 1; k < n; k++ {\n            if l[i]+l[j]+l[k] == 0 {\n                return true\n            }\n        }\n    }\n}\n\nreturn false\n}",
        "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n// true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l []int) bool {\n// Sort the array\nsort.Ints(l)\n\nfor i := 0; i < len(l)-2; i++ {\n    // To find the two other elements, start two pointers\n    // one from the next element to the current one,\n    // the other from the last element\n    start := i + 1\n    end := len(l) - 1\n\n    while start < end {\n        sum := l[i] + l[start] + l[end]\n\n        // If the sum of the three elements is zero return true\n        if sum == 0 {\n            return true\n        }\n\n        // If the sum is less than zero, increment the start pointer\n        if sum < 0 {\n            start++\n        } else {\n            // If the sum is more than zero, decrement the end pointer\n            end--\n        }\n    }\n}\n\n// If no three elements sum up to zero, return false\nreturn false\n",
        "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n// true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l []int) bool {\nfor i := 0; i < len(l)-2; i++ {\n        for j := i + 1; j < len(l)-1; j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i]+l[j]+l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}",
        "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n// true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l []int) bool {\n// Sort the array\nsort.Ints(l)\n\nfor i := 0; i < len(l)-2; i++ {\n    // To find the other two elements, start two pointers\n    // one from the next position and the other from the last position\n    start := i + 1\n    end := len(l) - 1\n    while start < end {\n        if l[i] + l[start] + l[end] == 0 {\n            // If the sum of the three elements is zero\n            return true\n        } else if l[i] + l[start] + l[end] < 0 {\n            // If the sum is less than zero, increment the start pointer\n            start++\n        } else {\n            // If the sum is more than zero, decrement the end pointer\n            end--\n        }\n    }\n}\n// If no three elements sum up to zero, return false\nreturn false\n"
    ],
    [
        "package intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([]interface{}{1, 2}, []interface{}{2, 3})\n// \"NO\"\n// >>> intersection([]interface{}{-1, 1}, []interface{}{0, 4})\n// \"NO\"\n// >>> intersection([]interface{}{-3, -1}, []interface{}{-5, 5})\n// \"YES\"\nfunc intersection(interval1 []interface{}, interval2 []interface{}) string {\n// Helper function to check if a number is prime\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n// Convert the intervals to integers\nstart1 := interval1[0].(int)\nend1 := interval1[1].(int)\nstart2 := interval2[0].(int)\nend2 := interval2[1].(int)\n\n// Find the intersection of the intervals\nstart := max(start1, start2)\nend := min(end1, end2)\n\n// If the intervals do not intersect, return \"NO\"\nif start > end {\n    return \"NO\"\n}\n\n// Calculate the length of the intersection\nlength := end - start + 1\n\n// Check if the length is a prime number\nif isPrime(length) {\n    return \"YES\"\n} else {\n    return \"NO\"\n}\n}\n\n// Helper functions to find the maximum and minimum of two integers\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}",
        "package intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([]interface{}{1, 2}, []interface{}{2, 3})\n// \"NO\"\n// >>> intersection([]interface{}{-1, 1}, []interface{}{0, 4})\n// \"NO\"\n// >>> intersection([]interface{}{-3, -1}, []interface{}{-5, 5})\n// \"YES\"\nfunc intersection(interval1 []interface{}, interval2 []interface{}) string {\n// Calculate the intersection\nstart := max(interval1[0].(int), interval2[0].(int))\nend := min(interval1[1].(int), interval2[1].(int))\n\n// If the intervals do not intersect, return \"NO\"\nif start > end {\n    return \"NO\"\n}\n\n// Calculate the length of the intersection\nlength := end - start + 1\n\n// Check if the length is a prime number\nif isPrime(length) {\n    return \"YES\"\n}\n\nreturn \"NO\"\n}\n\n// Helper function to calculate the maximum of two integers\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\n// Helper function to calculate the minimum of two integers\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\n// Helper function to check if a number is prime\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}",
        "package intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([]interface{}{1, 2}, []interface{}{2, 3})\n// \"NO\"\n// >>> intersection([]interface{}{-1, 1}, []interface{}{0, 4})\n// \"NO\"\n// >>> intersection([]interface{}{-3, -1}, []interface{}{-5, 5})\n// \"YES\"\nfunc intersection(interval1 []interface{}, interval2 []interface{}) string {\n// Define a helper function to check if a number is prime\n    isPrime := func(n int) bool {\n        if n <= 1 {\n            return false\n        }\n        for i := 2; i*i <= n; i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Convert the intervals to integers\n    start1, end1 := interval1[0].(int), interval1[1].(int)\n    start2, end2 := interval2[0].(int), interval2[1].(int)\n\n    // Find the intersection of the two intervals\n    start := max(start1, start2)\n    end := min(end1, end2)\n\n    // If the intervals do not intersect, return \"NO\"\n    if start > end {\n        return \"NO\"\n    }\n\n    // Check if the length of the intersection is a prime number\n    if isPrime(end - start + 1) {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n// Define helper functions to find the minimum and maximum of two integers\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}",
        "package intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([]interface{}{1, 2}, []interface{}{2, 3})\n// \"NO\"\n// >>> intersection([]interface{}{-1, 1}, []interface{}{0, 4})\n// \"NO\"\n// >>> intersection([]interface{}{-3, -1}, []interface{}{-5, 5})\n// \"YES\"\nfunc intersection(interval1 []interface{}, interval2 []interface{}) string {\n// Find the intersection of the two intervals\n    start := max(interval1[0].(int), interval2[0].(int))\n    end := min(interval1[1].(int), interval2[1].(int))\n\n    // If the intervals do not intersect, return \"NO\"\n    if start > end {\n        return \"NO\"\n    }\n\n    // Calculate the length of the intersection\n    length := end - start\n\n    // If the length is less than 2, return \"NO\" as it is not a prime number\n    if length < 2 {\n        return \"NO\"\n    }\n\n    // Check if the length is a prime number\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return \"NO\"\n        }\n    }\n\n    // If none of the above conditions are met, return \"YES\"\n    return \"YES\"\n}\n\n// Helper function to find the maximum of two integers\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\n// Helper function to find the minimum of two integers\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}",
        "package intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([]interface{}{1, 2}, []interface{}{2, 3})\n// \"NO\"\n// >>> intersection([]interface{}{-1, 1}, []interface{}{0, 4})\n// \"NO\"\n// >>> intersection([]interface{}{-3, -1}, []interface{}{-5, 5})\n// \"YES\"\nfunc intersection(interval1 []interface{}, interval2 []interface{}) string {\n// Find the intersection\n    start := max(interval1[0].(int), interval2[0].(int))\n    end := min(interval1[1].(int), interval2[1].(int))\n\n    // Check if there is no intersection\n    if end < start {\n        return \"NO\"\n    }\n\n    // Calculate the length of the intersection\n    length := end - start + 1\n\n    // Check if the length is a prime number\n    if isPrime(length) {\n        return \"YES\"\n    }\n\n    return \"NO\"\n}\n\n// Helper function to check if a number is prime\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\n// Helper function to find the maximum of two integers\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\n// Helper function to find the minimum of two integers\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
    ],
    [
        "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string string) []string {\nvar result []string\nvar stack []rune\nvar group string\n\nfor _, char := range paren_string {\n    if char != ' ' {\n        if char == '(' {\n            stack = append(stack, char)\n        } else if char == ')' {\n            stack = stack[:len(stack)-1]\n        }\n\n        group += string(char)\n\n        if len(stack) == 0 {\n            result = append(result, group)\n            group = \"\"\n        }\n    }\n}\n\nreturn result\n}",
        "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string string) []string {\nvar result []string\nvar start int\nvar balance int\n\nfor i, c := range paren_string {\n\tif c == '(' {\n\t\tif balance == 0 {\n\t\t\tstart = i\n\t\t}\n\t\tbalance++\n\t} else if c == ')' {\n\t\tbalance--\n\t\tif balance == 0 {\n\t\t\tresult = append(result, paren_string[start:i+1])\n\t\t}\n\t}\n}\n\nreturn result\n",
        "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string string) []string {\nvar result []string\nvar count int\nstart := 0\n\nfor i, char := range paren_string {\n    if char == '(' {\n        count++\n    } else if char == ')' {\n        count--\n    }\n\n    if count == 0 && char != ' ' {\n        result = append(result, paren_string[start:i+1])\n        start = i + 2\n    }\n}\nreturn result\n}",
        "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string string) []string {\nvar result []string\nvar count int\nvar start, end int\n\nfor i, c := range paren_string {\n\tif c == '(' {\n\t\tif count == 0 {\n\t\t\tstart = i\n\t\t}\n\t\tcount++\n\t} else if c == ')' {\n\t\tcount--\n\t\tif count == 0 {\n\t\t\tend = i\n\t\t\tresult = append(result, paren_string[start:end+1])\n\t\t}\n\t}\n}\n\nreturn result\n}",
        "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string string) []string {\nvar result []string\nvar start int\nvar balance int\n\nfor i, c := range paren_string {\n    if c == '(' {\n        if balance == 0 {\n            start = i\n        }\n        balance++\n    } else if c == ')' {\n        balance--\n        if balance == 0 {\n            result = append(result, paren_string[start:i+1])\n        }\n    }\n}\n\nreturn result\n}"
    ],
    [
        "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two lists of scores and guesses of equal length, where each index shows a match. \n// Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>> compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1, 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var result []int\n    for i := 0; i < len(game); i++ {\n        diff := game[i] - guess[i]\n        if diff < 0 {\n            diff = -diff\n        }\n        result = append(result, diff)\n    }\n    return result\n}",
        "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two lists of scores and guesses of equal length, where each index shows a match. \n// Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>> compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1, 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\ndiff := make([]int, len(game))\nfor i := range game {\n    diff[i] = abs(game[i] - guess[i])\n}\nreturn diff\n}\n\nfunc abs(n int) int {\n    if n < 0 {\n        return -n\n    }\n    return n\n}",
        "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two lists of scores and guesses of equal length, where each index shows a match. \n// Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>> compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1, 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var result []int\n    for i := 0; i < len(game); i++ {\n        diff := game[i] - guess[i]\n        if diff < 0 {\n            diff = -diff\n        }\n        result = append(result, diff)\n    }\n    return result\n}",
        "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two lists of scores and guesses of equal length, where each index shows a match. \n// Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>> compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1, 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var result []int\n    for i := range game {\n        diff := game[i] - guess[i]\n        if diff < 0 {\n            diff = -diff\n        }\n        result = append(result, diff)\n    }\n    return result\n}",
        "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two lists of scores and guesses of equal length, where each index shows a match. \n// Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>> compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1, 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var result []int\n    for i := 0; i < len(game); i++ {\n        diff := game[i] - guess[i]\n        if diff < 0 {\n            diff = -diff\n        }\n        result = append(result, diff)\n    }\n    return result\n}"
    ],
    [
        "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\nif n == 1 {\n    return 1\n}\n\nreturn 2 * 10 * int(math.Pow(10, float64(n-2)))\n}",
        "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\nif n <= 0 {\n    return 0\n}\n\n// If n is 1, there is only one digit, so the only number that starts and ends with 1 is 1 itself.\nif n == 1 {\n    return 1\n}\n\n// For n > 1, there are 10^(n-1) numbers of n digits.\n// Among them, 2*10^(n-2) numbers start or end with 1.\n// So, the total count is 2*10^(n-2).\nreturn 2 * int(math.Pow10(n-2))\n}",
        "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n// If n is 1, then there are 2 numbers (1 and 10) that start or end with 1.\nif n == 1 {\n    return 2\n}\n\n// For n > 1, there are 10^(n-1) numbers that start with 1 and 10^(n-1) numbers that end with 1.\n// But, numbers that start and end with 1 are counted twice, so we subtract 10^(n-2) from the total.\nreturn 2*int(math.Pow10(n-1)) - int(math.Pow10(n-2)) \n}",
        "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\nif n == 1 {\n    return 1\n}\n\nreturn 2 * 9 * int(math.Pow(10, float64(n-2)))\n}",
        "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\nif n == 1 {\n    return 1\n}\nreturn 2 * 9 * int(math.Pow10(n-2)) * 10\n}"
    ],
    [
        "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\nif len(txt) == 0 {\n        return false\n    }\n\n    lastChar := txt[len(txt)-1]\n\n    if lastChar >= 'a' && lastChar <= 'z' || lastChar >= 'A' && lastChar <= 'Z' {\n        if len(txt) == 1 || txt[len(txt)-2] == ' ' {\n            return true\n        }\n    }\n\n    return false\n}",
        "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\nif len(txt) == 0 {\n        return false\n    }\n\n    lastChar := txt[len(txt)-1]\n    if lastChar >= 'a' && lastChar <= 'z' || lastChar >= 'A' && lastChar <= 'Z' {\n        if len(txt) == 1 || txt[len(txt)-2] == ' ' {\n            return true\n        }\n    }\n\n    return false\n}",
        "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\nif len(txt) == 0 {\n    return false\n}\n\nlastChar := txt[len(txt)-1]\n\nif lastChar == ' ' {\n    return false\n}\n\nreturn lastChar >= 'a' && lastChar <= 'z' || lastChar >= 'A' && lastChar <= 'Z'\n}",
        "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\nif len(txt) == 0 {\n        return false\n    }\n\n    lastChar := txt[len(txt)-1]\n\n    if lastChar >= 'a' && lastChar <= 'z' || lastChar >= 'A' && lastChar <= 'Z' {\n        if len(txt) == 1 || txt[len(txt)-2] == ' ' {\n            return true\n        }\n    }\n\n    return false\n}",
        "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\nif len(txt) == 0 {\n        return false\n    }\n\n    lastChar := txt[len(txt)-1]\n\n    if lastChar >= 'a' && lastChar <= 'z' || lastChar >= 'A' && lastChar <= 'Z' {\n        if len(txt) == 1 || txt[len(txt)-2] == ' ' {\n            return true\n        }\n    }\n\n    return false\n}"
    ],
    [
        "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) != 10 {\n        return false\n    }\n\n    month, err := strconv.Atoi(date[:2])\n    if err != nil || month < 1 || month > 12 {\n        return false\n    }\n\n    day, err := strconv.Atoi(date[3:5])\n    if err != nil {\n        return false\n    }\n\n    year, err := strconv.Atoi(date[6:])\n    if err != nil {\n        return false\n    }\n\n    if year < 1 {\n        return false\n    }\n\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 31 {\n            return false\n        }\n    }\n\n    if date[2] != '-' || date[5] != '-' {\n        return false\n    }\n\n    return true\n}",
        "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\nif len(date) == 0 {\n    return false\n}\n\nvar month, day, year int\n_, err := fmt.Sscanf(date, \"%02d-%02d-%04d\", &month, &day, &year)\nif err != nil {\n    return false\n}\n\nif month < 1 || month > 12 {\n    return false\n}\n\nif day < 1 {\n    return false\n}\n\nswitch month {\ncase 1, 3, 5, 7, 8, 10, 12:\n    if day > 31 {\n        return false\n    }\ncase 4, 6, 9, 11:\n    if day > 30 {\n        return false\n    }\ncase 2:\n    if day > 29 {\n        return false\n    }\n}\n\nreturn true\n}",
        "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\nif len(date) == 0 {\n    return false\n}\n\ndateParts := strings.Split(date, \"-\")\nif len(dateParts) != 3 {\n    return false\n}\n\nmonth, err1 := strconv.Atoi(dateParts[0])\nday, err2 := strconv.Atoi(dateParts[1])\nyear, err3 := strconv.Atoi(dateParts[2])\n\nif err1 != nil || err2 != nil || err3 != nil {\n    return false\n}\n\nif month < 1 || month > 12 {\n    return false\n}\n\nif day < 1 || day > 31 {\n    return false\n}\n\nif month == 2 && day > 29 {\n    return false\n}\n\nif (month == 4 || month == 6 || month == 9 || month == 11) && day > 30 {\n    return false\n}\n\nreturn true\n}",
        "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n// Check if date string is empty\nif date == \"\" {\n    return false\n}\n\n// Parse the date string\nvar month, day, year int\n_, err := fmt.Sscanf(date, \"%02d-%02d-%04d\", &month, &day, &year)\nif err != nil {\n    return false\n}\n\n// Check if month is valid\nif month < 1 || month > 12 {\n    return false\n}\n\n// Check if day is valid\nif day < 1 {\n    return false\n}\n\n// Check if day is valid based on month\nswitch month {\ncase 1, 3, 5, 7, 8, 10, 12:\n    if day > 31 {\n        return false\n    }\ncase 4, 6, 9, 11:\n    if day > 30 {\n        return false\n    }\ncase 2:\n    // Check for leap year\n    if (year%4 == 0 && year%100 != 0) || year%400 == 0 {\n        if day > 29 {\n            return false\n        }\n    } else if day > 28 {\n        return false\n    }\n}\n\nreturn true\n}",
        "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) != 10 {\n        return false\n    }\n\n    var month, day, year int\n    _, err := fmt.Sscanf(date, \"%02d-%02d-%04d\", &month, &day, &year)\n    if err != nil {\n        return false\n    }\n\n    if month < 1 || month > 12 {\n        return false\n    }\n\n    if day < 1 {\n        return false\n    }\n\n    if month == 2 {\n        if day > 29 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    } else {\n        if day > 31 {\n            return false\n        }\n    }\n\n    return true\n}"
    ],
    [
        "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes a list of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1, 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr []int) int {\ncount := 0\nfor _, num := range arr {\n    sum := 0\n    for num != 0 {\n        digit := num % 10\n        sum += digit\n        num /= 10\n    }\n    if sum > 0 {\n        count++\n    }\n}\nreturn count",
        "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes a list of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1, 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr []int) int {\n    count := 0\n    for _, num := range arr {\n        sum := 0\n        for num != 0 {\n            digit := num % 10\n            sum += digit\n            num /= 10\n        }\n        if sum > 0 {\n            count++\n        }\n    }\n    return count\n}",
        "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes a list of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1, 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr []int) int {\n    count := 0\n    for _, num := range arr {\n        sum := 0\n        for num != 0 {\n            sum += num % 10\n            num = num / 10\n        }\n        if sum > 0 {\n            count++\n        }\n    }\n    return count\n}",
        "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes a list of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1, 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr []int) int {\ncount := 0\nfor _, num := range arr {\n    sum := 0\n    for num != 0 {\n        sum += num % 10\n        num /= 10\n    }\n    if sum > 0 {\n        count++\n    }\n}\nreturn count",
        "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes a list of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1, 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr []int) int {\ncount := 0\nfor _, num := range arr {\n    sum := 0\n    for num != 0 {\n        digit := num % 10\n        sum += digit\n        num /= 10\n    }\n    if sum > 0 {\n        count++\n    }\n}\nreturn count"
    ],
    [
        "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\nimport (\n    \"strings\"\n    \"sort\"\n)\n\nfunc anti_shuffle(s string) string {\n    words := strings.Fields(s)\n    sortedWords := make([]string, len(words))\n\n    for i, word := range words {\n        chars := strings.Split(word, \"\")\n        sort.Strings(chars)\n        sortedWords[i] = strings.Join(chars, \"\")\n    }\n\n    return strings.Join(sortedWords, \" \")\n}",
        "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\nimport (\n    \"strings\"\n    \"sort\"\n)\n\nfunc anti_shuffle(s string) string {\n    words := strings.Fields(s)\n    sortedWords := make([]string, len(words))\n\n    for i, word := range words {\n        chars := strings.Split(word, \"\")\n        sort.Strings(chars)\n        sortedWords[i] = strings.Join(chars, \"\")\n    }\n\n    return strings.Join(sortedWords, \" \")\n}",
        "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\nimport (\n    \"strings\"\n    \"sort\"\n)\n\nwords := strings.Fields(s)\nfor i, word := range words {\n    chars := strings.Split(word, \"\")\n    sort.Strings(chars)\n    words[i] = strings.Join(chars, \"\")\n}\nreturn strings.Join(words, \" \")",
        "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\nimport (\n    \"sort\"\n    \"strings\"\n)\n\n// Split the string into words\nwords := strings.Fields(s)\n\nfor i, word := range words {\n    // Convert the word into a slice of runes\n    runes := []rune(word)\n\n    // Sort the runes\n    sort.Slice(runes, func(i, j int) bool {\n        return runes[i] < runes[j]\n    })\n\n    // Convert the sorted runes back into a string\n    words[i] = string(runes)\n}\n\n// Join the sorted words back together\nreturn strings.Join(words, \" \")",
        "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\nimport (\n    \"strings\"\n    \"sort\"\n)\n\nfunc anti_shuffle(s string) string {\n    words := strings.Fields(s)\n    orderedWords := make([]string, len(words))\n\n    for i, word := range words {\n        chars := strings.Split(word, \"\")\n        sort.Strings(chars)\n        orderedWords[i] = strings.Join(chars, \"\")\n    }\n\n    return strings.Join(orderedWords, \" \")\n}"
    ],
    [
        "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text string) bool {\nfor i := 0; i < len(text)/2; i++ {\n    if text[i] != text[len(text)-i-1] {\n        return false\n    }\n}\nreturn true",
        "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text string) bool {\nfor i := 0; i < len(text)/2; i++ {\n    if text[i] != text[len(text)-i-1] {\n        return false\n    }\n}\nreturn true\n}",
        "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text string) bool {\nruneText := []rune(text)\nlength := len(runeText)\n\nfor i := 0; i < length/2; i++ {\n    if runeText[i] != runeText[length-i-1] {\n        return false\n    }\n}\n\nreturn true\n",
        "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text string) bool {\nrunes := []rune(text)\nlength := len(runes)\n\nfor i := 0; i < length/2; i++ {\n    if runes[i] != runes[length-i-1] {\n        return false\n    }\n}\n\nreturn true\n}",
        "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text string) bool {\nfor i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n        }\n    }\n    return true\n}"
    ],
    [
        "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) &&\n            !strings.ContainsRune(vowels, rune(word[i-1])) &&\n            !strings.ContainsRune(vowels, rune(word[i+1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}",
        "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    lastVowel := \"\"\n\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && \n           !strings.ContainsRune(vowels, rune(word[i-1])) && \n           !strings.ContainsRune(vowels, rune(word[i+1])) {\n            lastVowel = string(word[i])\n            break\n        }\n    }\n\n    return lastVowel\n}",
        "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    wordLen := len(word)\n    for i := wordLen - 1; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i-1])) && !strings.ContainsRune(vowels, rune(word[i+1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}",
        "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    wordLen := len(word)\n    if wordLen < 3 { // If word length is less than 3, it can't have a vowel between two consonants\n        return \"\"\n    }\n\n    for i := wordLen - 2; i > 0; i-- { // Start from the second last character\n        if strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i-1])) && !strings.ContainsRune(vowels, rune(word[i+1])) {\n            // If the current character is a vowel and both the previous and next characters are not vowels\n            return string(word[i]) // Return the vowel\n        }\n    }\n\n    return \"\" // Return empty string if no vowel found\n}",
        "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    wordLen := len(word)\n    for i := wordLen - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && \n           !strings.ContainsRune(vowels, rune(word[i-1])) && \n           !strings.ContainsRune(vowels, rune(word[i+1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}"
    ],
    [
        "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\nif n <= 1 {\n    return false\n}\nif n == 2 {\n    return true\n}\nif n%2 == 0 {\n    return false\n}\nfor i := 3; i*i <= n; i += 2 {\n    if n%i == 0 {\n        return false\n    }\n}\nreturn true\n}",
        "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\nif n <= 1 {\n    return false\n}\nfor i := 2; i*i <= n; i++ {\n    if n%i == 0 {\n        return false\n    }\n}\nreturn true\n}",
        "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\nif n <= 1 {\n    return false\n}\nfor i := 2; i*i <= n; i++ {\n    if n%i == 0 {\n        return false\n    }\n}\nreturn true\n}",
        "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\nif n <= 1 {\n    return false\n}\nfor i := 2; i*i <= n; i++ {\n    if n%i == 0 {\n        return false\n    }\n}\nreturn true\n}",
        "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\nif n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    for i := 3; i*i <= n; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}"
    ],
    [
        "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunc simplify(x string, n string) bool {\n// Split the strings into numerator and denominator\nxParts := strings.Split(x, \"/\")\nnParts := strings.Split(n, \"/\")\n\n// Convert the parts into integers\nxNumerator, _ := strconv.Atoi(xParts[0])\nxDenominator, _ := strconv.Atoi(xParts[1])\nnNumerator, _ := strconv.Atoi(nParts[0])\nnDenominator, _ := strconv.Atoi(nParts[1])\n\n// Calculate the product of the fractions\nproductNumerator := xNumerator * nNumerator\nproductDenominator := xDenominator * nDenominator\n\n// If the product is a whole number, return true\nif productNumerator % productDenominator == 0 {\n    return true\n}\n\n// Otherwise, return false\nreturn false\n",
        "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunc simplify(x string, n string) bool {\n// Split the strings into numerator and denominator\nxParts := strings.Split(x, \"/\")\nnParts := strings.Split(n, \"/\")\n\n// Convert the strings to integers\nxNumerator, _ := strconv.Atoi(xParts[0])\nxDenominator, _ := strconv.Atoi(xParts[1])\nnNumerator, _ := strconv.Atoi(nParts[0])\nnDenominator, _ := strconv.Atoi(nParts[1])\n\n// Calculate the product of the fractions\nproductNumerator := xNumerator * nNumerator\nproductDenominator := xDenominator * nDenominator\n\n// Check if the product is a whole number\nreturn productNumerator%productDenominator == 0\n",
        "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunc simplify(x string, n string) bool {\n// Split the fractions into numerator and denominator\nxParts := strings.Split(x, \"/\")\nnParts := strings.Split(n, \"/\")\n\n// Convert strings to integers\nxNumerator, _ := strconv.Atoi(xParts[0])\nxDenominator, _ := strconv.Atoi(xParts[1])\nnNumerator, _ := strconv.Atoi(nParts[0])\nnDenominator, _ := strconv.Atoi(nParts[1])\n\n// Multiply the numerators and denominators\nnumeratorProduct := xNumerator * nNumerator\ndenominatorProduct := xDenominator * nDenominator\n\n// If the product of the numerators and denominators is a whole number, return true\nreturn numeratorProduct%denominatorProduct == 0\n",
        "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunc simplify(x string, n string) bool {\n// Split the strings to get the numerators and denominators\nxParts := strings.Split(x, \"/\")\nnParts := strings.Split(n, \"/\")\n\n// Convert the strings to integers\nxNumerator, _ := strconv.Atoi(xParts[0])\nxDenominator, _ := strconv.Atoi(xParts[1])\nnNumerator, _ := strconv.Atoi(nParts[0])\nnDenominator, _ := strconv.Atoi(nParts[1])\n\n// Calculate the product of the fractions\nproductNumerator := xNumerator * nNumerator\nproductDenominator := xDenominator * nDenominator\n\n// If the product is a whole number, return true\nif productNumerator % productDenominator == 0 {\n    return true\n}\n\n// Otherwise, return false\nreturn false\n",
        "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunc simplify(x string, n string) bool {\n// Split the fractions into numerator and denominator\nxParts := strings.Split(x, \"/\")\nnParts := strings.Split(n, \"/\")\n\n// Convert the parts to integers\nxNumerator, _ := strconv.Atoi(xParts[0])\nxDenominator, _ := strconv.Atoi(xParts[1])\nnNumerator, _ := strconv.Atoi(nParts[0])\nnDenominator, _ := strconv.Atoi(nParts[1])\n\n// Calculate the result of the multiplication\nresultNumerator := xNumerator * nNumerator\nresultDenominator := xDenominator * nDenominator\n\n// Check if the result is a whole number\nreturn resultNumerator % resultDenominator == 0\n"
    ],
    [
        "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\nprimeHexDigits := map[rune]bool{\n    '2': true,\n    '3': true,\n    '5': true,\n    '7': true,\n    'B': true,\n    'D': true,\n}\n\ncount := 0\nfor _, digit := range num {\n    if primeHexDigits[digit] {\n        count++\n    }\n}\nreturn count",
        "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\nprimeHexDigits := []rune{'2', '3', '5', '7', 'B', 'D'}\ncount := 0\n\nfor _, digit := range num {\n    for _, primeDigit := range primeHexDigits {\n        if digit == primeDigit {\n            count++\n            break\n        }\n    }\n}\n\nreturn count",
        "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\nprimeHexDigits := []rune{'2', '3', '5', '7', 'B', 'D'}\ncount := 0\n\nfor _, digit := range num {\n    for _, primeDigit := range primeHexDigits {\n        if digit == primeDigit {\n            count++\n            break\n        }\n    }\n}\n\nreturn count",
        "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\nprimeHexDigits := map[rune]bool{'2': true, '3': true, '5': true, '7': true, 'B': true, 'D': true}\ncount := 0\nfor _, digit := range num {\n    if _, ok := primeHexDigits[digit]; ok {\n        count++\n    }\n}\nreturn count",
        "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\nprimeHexDigits := map[rune]bool{\n    '2': true,\n    '3': true,\n    '5': true,\n    '7': true,\n    'B': true,\n    'D': true,\n}\n\ncount := 0\nfor _, digit := range num {\n    if primeHexDigits[digit] {\n        count++\n    }\n}\n\nreturn count"
    ],
    [
        "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence string) string {\n    import (\n        \"strings\"\n        \"math\"\n    )\n\n    // Function to check if a number is prime\n    func isPrime(n int) bool {\n        if n <= 1 {\n            return false\n        }\n        for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    words := strings.Split(sentence, \" \")\n    primeWords := []string{}\n\n    for _, word := range words {\n        if isPrime(len(word)) {\n            primeWords = append(primeWords, word)\n        }\n    }\n\n    return strings.Join(primeWords, \" \")\n}",
        "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence string) string {\n    import (\n        \"strings\"\n        \"math\"\n    )\n\n    // Function to check if a number is prime\n    func isPrime(n int) bool {\n        if n <= 1 {\n            return false\n        }\n\n        sqrtN := int(math.Sqrt(float64(n)))\n        for i := 2; i <= sqrtN; i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    words := strings.Split(sentence, \" \")\n    primeWords := []string{}\n\n    for _, word := range words {\n        if isPrime(len(word)) {\n            primeWords = append(primeWords, word)\n        }\n    }\n\n    return strings.Join(primeWords, \" \")\n}",
        "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence, \" \")\n    var primeWords []string\n\n    // Function to check if a number is prime\n    isPrime := func(n int) bool {\n        if n <= 1 {\n            return false\n        }\n        for i := 2; i*i <= n; i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check each word if its length is a prime number\n    for _, word := range words {\n        if isPrime(len(word)) {\n            primeWords = append(primeWords, word)\n        }\n    }\n\n    return strings.Join(primeWords, \" \")\n}",
        "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence string) string {\n    import (\n        \"strings\"\n        \"math\"\n    )\n\n    // Function to check if a number is prime\n    func isPrime(n int) bool {\n        if n <= 1 {\n            return false\n        }\n        for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    words := strings.Split(sentence, \" \")\n    primeWords := []string{}\n\n    for _, word := range words {\n        if isPrime(len(word)) {\n            primeWords = append(primeWords, word)\n        }\n    }\n\n    return strings.Join(primeWords, \" \")\n}",
        "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Fields(sentence)\n    primeWords := []string{}\n\n    isPrime := func(n int) bool {\n        if n <= 1 {\n            return false\n        }\n        for i := 2; i*i <= n; i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    for _, word := range words {\n        if isPrime(len(word)) {\n            primeWords = append(primeWords, word)\n        }\n    }\n\n    return strings.Join(primeWords, \" \")\n}"
    ],
    [
        "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\nfunc histogram(test string) map[string]int {\n    result := make(map[string]int)\n    words := strings.Fields(test)\n\n    for _, word := range words {\n        result[word]++\n    }\n\n    maxCount := 0\n    for _, count := range result {\n        if count > maxCount {\n            maxCount = count\n        }\n    }\n\n    for word, count := range result {\n        if count < maxCount {\n            delete(result, word)\n        }\n    }\n\n    return result\n}",
        "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\nfunc histogram(test string) map[string]int {\n    // Create a map to store the frequency of each letter\n    freqMap := make(map[string]int)\n\n    // Split the input string into words\n    words := strings.Fields(test)\n\n    // Iterate over the words and increment the count in the map for each one\n    for _, word := range words {\n        freqMap[word]++\n    }\n\n    // Find the maximum frequency\n    maxFreq := 0\n    for _, freq := range freqMap {\n        if freq > maxFreq {\n            maxFreq = freq\n        }\n    }\n\n    // Create a new map to store the words with the maximum frequency\n    maxFreqMap := make(map[string]int)\n    for word, freq := range freqMap {\n        if freq == maxFreq {\n            maxFreqMap[word] = freq\n        }\n    }\n\n    return maxFreqMap\n}",
        "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\nfunc histogram(test string) map[string]int {\n    // Initialize an empty map\n    hist := make(map[string]int)\n\n    // Split the string into words\n    words := strings.Fields(test)\n\n    // Iterate over the words\n    for _, word := range words {\n        // Increment the count for each word in the map\n        hist[word]++\n    }\n\n    // Find the maximum count\n    maxCount := 0\n    for _, count := range hist {\n        if count > maxCount {\n            maxCount = count\n        }\n    }\n\n    // Create a new map to store the words with the maximum count\n    maxHist := make(map[string]int)\n    for word, count := range hist {\n        if count == maxCount {\n            maxHist[word] = count\n        }\n    }\n\n    // Return the map with the words with the maximum count\n    return maxHist\n}",
        "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\nfunc histogram(test string) map[string]int {\n    result := make(map[string]int)\n    maxCount := 0\n    words := strings.Fields(test)\n\n    for _, word := range words {\n        result[word]++\n        if result[word] > maxCount {\n            maxCount = result[word]\n        }\n    }\n\n    for key, value := range result {\n        if value < maxCount {\n            delete(result, key)\n        }\n    }\n\n    return result\n}",
        "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\nfunc histogram(test string) map[string]int {\n    // Create a map to store the frequency of each letter\n    frequencyMap := make(map[string]int)\n\n    // Split the input string into individual letters\n    letters := strings.Fields(test)\n\n    // Iterate over each letter and increment its frequency in the map\n    for _, letter := range letters {\n        frequencyMap[letter]++\n    }\n\n    // Find the maximum frequency\n    maxFrequency := 0\n    for _, frequency := range frequencyMap {\n        if frequency > maxFrequency {\n            maxFrequency = frequency\n        }\n    }\n\n    // Create a new map to store the letters with the maximum frequency\n    maxFrequencyMap := make(map[string]int)\n\n    // Iterate over the frequency map and add the letters with the maximum frequency to the new map\n    for letter, frequency := range frequencyMap {\n        if frequency == maxFrequency {\n            maxFrequencyMap[letter] = frequency\n        }\n    }\n\n    // Return the map of letters with the maximum frequency\n    return maxFrequencyMap\n}"
    ],
    [
        "package get_row_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of lists, [(x1, y1), (x2, y2) ...] such that\n// each list is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}}, 1)\n// [][]int{[]interface{}{0, 0}, []interface{}{1, 4}, []interface{}{1, 0}, []interface{}{2, 5}, []interface{}{2, 0}}\n// >>> get_row([][]int{}, 1)\n// [][]interface{}{}\n// >>> get_row([]interface{}{[]interface{}{}, []int{1}, []int{1, 2, 3}}, 3)\n// [][]int{[]interface{}{2, 2}}\nfunc get_row(lst [][]int, x int) [][]interface{} {\nvar result [][]interface{}\n\nfor i, row := range lst {\n    var temp []interface{}\n    for j, col := range row {\n        if col == x {\n            temp = append(temp, j)\n        }\n    }\n    sort.Slice(temp, func(i, j int) bool { return temp[i].(int) > temp[j].(int) })\n    for _, col := range temp {\n        result = append(result, []interface{}{i, col})\n    }\n}\n\nreturn result\n}",
        "package get_row_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of lists, [(x1, y1), (x2, y2) ...] such that\n// each list is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}}, 1)\n// [][]int{[]interface{}{0, 0}, []interface{}{1, 4}, []interface{}{1, 0}, []interface{}{2, 5}, []interface{}{2, 0}}\n// >>> get_row([][]int{}, 1)\n// [][]interface{}{}\n// >>> get_row([]interface{}{[]interface{}{}, []int{1}, []int{1, 2, 3}}, 3)\n// [][]int{[]interface{}{2, 2}}\nfunc get_row(lst [][]int, x int) [][]interface{} {\nvar result [][]interface{}\n\nfor i, row := range lst {\n    var temp []interface{}\n    for j, col := range row {\n        if col == x {\n            temp = append(temp, j)\n        }\n    }\n    sort.Slice(temp, func(i, j int) bool { return temp[i].(int) > temp[j].(int) })\n    for _, col := range temp {\n        result = append(result, []interface{}{i, col})\n    }\n}\n\nreturn result",
        "package get_row_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of lists, [(x1, y1), (x2, y2) ...] such that\n// each list is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}}, 1)\n// [][]int{[]interface{}{0, 0}, []interface{}{1, 4}, []interface{}{1, 0}, []interface{}{2, 5}, []interface{}{2, 0}}\n// >>> get_row([][]int{}, 1)\n// [][]interface{}{}\n// >>> get_row([]interface{}{[]interface{}{}, []int{1}, []int{1, 2, 3}}, 3)\n// [][]int{[]interface{}{2, 2}}\nfunc get_row(lst [][]int, x int) [][]interface{} {\nvar result [][]interface{}\n\nfor i, row := range lst {\n    var temp []interface{}\n    for j, col := range row {\n        if col == x {\n            temp = append(temp, []interface{}{i, j})\n        }\n    }\n    sort.Slice(temp, func(a, b int) bool {\n        return temp[a].(int) > temp[b].(int)\n    })\n    result = append(result, temp...)\n}\n\nsort.Slice(result, func(a, b int) bool {\n    return result[a][0].(int) < result[b][0].(int)\n})\n\nreturn result\n}",
        "package get_row_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of lists, [(x1, y1), (x2, y2) ...] such that\n// each list is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}}, 1)\n// [][]int{[]interface{}{0, 0}, []interface{}{1, 4}, []interface{}{1, 0}, []interface{}{2, 5}, []interface{}{2, 0}}\n// >>> get_row([][]int{}, 1)\n// [][]interface{}{}\n// >>> get_row([]interface{}{[]interface{}{}, []int{1}, []int{1, 2, 3}}, 3)\n// [][]int{[]interface{}{2, 2}}\nfunc get_row(lst [][]int, x int) [][]interface{} {\nvar result [][]interface{}\nfor i, row := range lst {\n    var temp []interface{}\n    for j, col := range row {\n        if col == x {\n            temp = append(temp, j)\n        }\n    }\n    sort.Slice(temp, func(i, j int) bool { return temp[i].(int) > temp[j].(int) })\n    for _, t := range temp {\n        result = append(result, []interface{}{i, t})\n    }\n}\nreturn result\n}",
        "package get_row_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of lists, [(x1, y1), (x2, y2) ...] such that\n// each list is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}}, 1)\n// [][]int{[]interface{}{0, 0}, []interface{}{1, 4}, []interface{}{1, 0}, []interface{}{2, 5}, []interface{}{2, 0}}\n// >>> get_row([][]int{}, 1)\n// [][]interface{}{}\n// >>> get_row([]interface{}{[]interface{}{}, []int{1}, []int{1, 2, 3}}, 3)\n// [][]int{[]interface{}{2, 2}}\nfunc get_row(lst [][]int, x int) [][]interface{} {\nvar result [][]interface{}\n\nfor i, row := range lst {\n    var temp []interface{}\n    for j, col := range row {\n        if col == x {\n            temp = append(temp, j)\n        }\n    }\n    sort.Slice(temp, func(a, b int) bool { return temp[a].(int) > temp[b].(int) })\n    for _, t := range temp {\n        result = append(result, []interface{}{i, t})\n    }\n}\n\nreturn result\n}"
    ],
    [
        "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n int) []int {\n    var oddCollatz []int\n\n    for n != 1 {\n        if n % 2 != 0 {\n            oddCollatz = append(oddCollatz, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3*n + 1\n        }\n    }\n    oddCollatz = append(oddCollatz, 1)\n\n    // Sort the slice in increasing order\n    for i := 0; i < len(oddCollatz); i++ {\n        for j := i + 1; j < len(oddCollatz); j++ {\n            if oddCollatz[j] < oddCollatz[i] {\n                oddCollatz[i], oddCollatz[j] = oddCollatz[j], oddCollatz[i]\n            }\n        }\n    }\n    \n    return oddCollatz\n}",
        "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n int) []int {\n    var oddNumbers []int\n    for n != 1 {\n        if n%2 != 0 {\n            oddNumbers = append(oddNumbers, n)\n        }\n        if n%2 == 0 {\n            n = n / 2\n        } else {\n            n = 3*n + 1\n        }\n    }\n    oddNumbers = append(oddNumbers, 1)\n    sort.Ints(oddNumbers)\n    return oddNumbers\n}",
        "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n int) []int {\noddNumbers := make([]int, 0)\n\nfor n != 1 {\n    if n%2 != 0 {\n        oddNumbers = append(oddNumbers, n)\n    }\n    if n%2 == 0 {\n        n = n / 2\n    } else {\n        n = 3*n + 1\n    }\n}\n\n// append 1 to the end of the sequence\noddNumbers = append(oddNumbers, 1)\n\n// sort the slice in increasing order\nsort.Ints(oddNumbers)\n\nreturn oddNumbers\n",
        "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n int) []int {\n    var collatz []int\n\n    for n != 1 {\n        if n%2 != 0 {\n            collatz = append(collatz, n)\n        }\n        if n%2 == 0 {\n            n = n / 2\n        } else {\n            n = 3*n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n\n    // Sort the collatz slice in increasing order\n    for i := 0; i < len(collatz); i++ {\n        for j := 0; j < len(collatz)-i-1; j++ {\n            if collatz[j] > collatz[j+1] {\n                collatz[j], collatz[j+1] = collatz[j+1], collatz[j]\n            }\n        }\n    }\n\n    return collatz\n}",
        "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n int) []int {\n    var collatz []int\n    for n != 1 {\n        if n%2 != 0 {\n            collatz = append(collatz, n)\n        }\n        if n%2 == 0 {\n            n = n / 2\n        } else {\n            n = 3*n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n    sort.Ints(collatz)\n    return collatz\n}"
    ],
    [
        "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given list will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>> can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\nfor i := len(arr) - 1; i > 0; i-- {\n    if arr[i] < arr[i-1] {\n        return i\n    }\n}\nreturn -1\n}",
        "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given list will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>> can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\nfor i := len(arr) - 1; i > 0; i-- {\n    if arr[i] < arr[i-1] {\n        return i\n    }\n}\nreturn -1\n}",
        "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given list will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>> can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\nfor i := len(arr) - 1; i > 0; i-- {\n    if arr[i] < arr[i-1] {\n        return i\n    }\n}\nreturn -1\n}",
        "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given list will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>> can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\nfor i := len(arr) - 1; i > 0; i-- {\n    if arr[i] < arr[i-1] {\n        return i\n    }\n}\nreturn -1\n}",
        "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given list will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>> can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\nfor i := len(arr) - 1; i > 0; i-- {\n    if arr[i] < arr[i-1] {\n        return i\n    }\n}\nreturn -1\n}"
    ],
    [
        "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunc sort_numbers(numbers string) string {\n// Mapping of string numbers to their integer values\nnumMap := map[string]int{\n    \"zero\":  0,\n    \"one\":   1,\n    \"two\":   2,\n    \"three\": 3,\n    \"four\":  4,\n    \"five\":  5,\n    \"six\":   6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\":  9,\n}\n\n// Split the input string into a slice\nnumSlice := strings.Split(numbers, \" \")\n\n// Sort the slice using the integer values from the map\nsort.Slice(numSlice, func(i, j int) bool {\n    return numMap[numSlice[i]] < numMap[numSlice[j]]\n})\n\n// Join the sorted slice back into a string and return it\nreturn strings.Join(numSlice, \" \")",
        "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunc sort_numbers(numbers string) string {\n// Mapping of string numbers to integers\nnumMap := map[string]int{\n    \"zero\":  0,\n    \"one\":   1,\n    \"two\":   2,\n    \"three\": 3,\n    \"four\":  4,\n    \"five\":  5,\n    \"six\":   6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\":  9,\n}\n\n// Split the input string into a slice\nnumStrings := strings.Split(numbers, \" \")\n\n// Convert the strings to integers and store them in a slice\nnumInts := make([]int, len(numStrings))\nfor i, numString := range numStrings {\n    numInts[i] = numMap[numString]\n}\n\n// Sort the slice of integers\nsort.Ints(numInts)\n\n// Convert the sorted integers back to strings\nsortedNumStrings := make([]string, len(numInts))\nfor i, numInt := range numInts {\n    for k, v := range numMap {\n        if v == numInt {\n            sortedNumStrings[i] = k\n            break\n        }\n    }\n}\n\n// Join the sorted strings into a single string\nsortedNumbers := strings.Join(sortedNumStrings, \" \")\n\nreturn sortedNumbers",
        "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunc sort_numbers(numbers string) string {\n    numMap := map[string]int{\n        \"zero\":  0,\n        \"one\":   1,\n        \"two\":   2,\n        \"three\": 3,\n        \"four\":  4,\n        \"five\":  5,\n        \"six\":   6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\":  9,\n    }\n\n    reverseMap := map[int]string{\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n\n    words := strings.Fields(numbers)\n    nums := make([]int, len(words))\n\n    for i, word := range words {\n        nums[i] = numMap[word]\n    }\n\n    sort.Ints(nums)\n\n    for i, num := range nums {\n        words[i] = reverseMap[num]\n    }\n\n    return strings.Join(words, \" \")\n}",
        "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunc sort_numbers(numbers string) string {\n    numMap := map[string]int{\n        \"zero\":  0,\n        \"one\":   1,\n        \"two\":   2,\n        \"three\": 3,\n        \"four\":  4,\n        \"five\":  5,\n        \"six\":   6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\":  9,\n    }\n\n    reverseNumMap := map[int]string{\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n\n    splitNumbers := strings.Split(numbers, \" \")\n    intNumbers := make([]int, len(splitNumbers))\n\n    for i, num := range splitNumbers {\n        intNumbers[i] = numMap[num]\n    }\n\n    sort.Ints(intNumbers)\n\n    sortedNumbers := make([]string, len(intNumbers))\n    for i, num := range intNumbers {\n        sortedNumbers[i] = reverseNumMap[num]\n    }\n\n    return strings.Join(sortedNumbers, \" \")\n}",
        "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunc sort_numbers(numbers string) string {\n    numberMap := map[string]int{\n        \"zero\":  0,\n        \"one\":   1,\n        \"two\":   2,\n        \"three\": 3,\n        \"four\":  4,\n        \"five\":  5,\n        \"six\":   6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\":  9,\n    }\n\n    reverseMap := map[int]string{\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n\n    words := strings.Fields(numbers)\n    intSlice := make([]int, len(words))\n\n    for i, word := range words {\n        intSlice[i] = numberMap[word]\n    }\n\n    sort.Ints(intSlice)\n\n    sortedWords := make([]string, len(intSlice))\n    for i, num := range intSlice {\n        sortedWords[i] = reverseMap[num]\n    }\n\n    return strings.Join(sortedWords, \" \")\n}"
    ],
    [
        "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    xStr := fmt.Sprintf(\"%d\", x)\n    length := len(xStr)\n\n    if shift > length {\n        xStr = reverse(xStr)\n    } else {\n        xStr = xStr[length-shift:] + xStr[:length-shift]\n    }\n\n    return xStr\n}\n\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}",
        "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    xStr := fmt.Sprintf(\"%d\", x)\n    length := len(xStr)\n\n    if shift >= length {\n        return reverseString(xStr)\n    }\n\n    return xStr[length-shift:] + xStr[:length-shift]\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}",
        "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\nxStr := fmt.Sprintf(\"%d\", x)\nlength := len(xStr)\n\nif shift >= length {\n    xStr = reverse(xStr)\n} else {\n    xStr = xStr[length-shift:] + xStr[:length-shift]\n}\n\nreturn xStr\n}\n\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}",
        "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    xStr := fmt.Sprintf(\"%d\", x)\n    length := len(xStr)\n    \n    if shift >= length {\n        // Reverse the string\n        reversed := \"\"\n        for i := length - 1; i >= 0; i-- {\n            reversed += string(xStr[i])\n        }\n        return reversed\n    } else {\n        // Perform circular shift\n        shift = shift % length\n        return xStr[length-shift:] + xStr[:length-shift]\n    }\n}",
        "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\nxStr := fmt.Sprintf(\"%d\", x)\nlength := len(xStr)\n\nif shift > length {\n    shift = length\n}\n\nshift = length - shift % length\nshifted := xStr[shift:] + xStr[:shift]\n\nreturn shifted\n}"
    ],
    [
        "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\nsum := 0\nfor i, num := range lst {\n    if i % 3 == 0 {\n        sum += num * num\n    } else if i % 4 == 0 {\n        sum += num * num * num\n    } else {\n        sum += num\n    }\n}\nreturn sum\n}",
        "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\nsum := 0\nfor i, num := range lst {\n    if i % 3 == 0 {\n        sum += num * num\n    } else if i % 4 == 0 {\n        sum += num * num * num\n    } else {\n        sum += num\n    }\n}\nreturn sum\n}",
        "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n        if i % 3 == 0 {\n            sum += v * v\n        } else if i % 4 == 0 {\n            sum += v * v * v\n        } else {\n            sum += v\n        }\n    }\n    return sum\n}",
        "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for i, num := range lst {\n        if i % 3 == 0 {\n            sum += num * num\n        } else if i % 4 == 0 {\n            sum += num * num * num\n        } else {\n            sum += num\n        }\n    }\n    return sum\n}",
        "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\nsum := 0\nfor i, num := range lst {\n    if i % 3 == 0 {\n        sum += num * num\n    } else if i % 4 == 0 {\n        sum += num * num * num\n    } else {\n        sum += num\n    }\n}\nreturn sum\n}"
    ],
    [
        "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    largestPrime := 0\n\n    // Function to check if a number is prime\n    isPrime := func(n int) bool {\n        if n <= 1 {\n            return false\n        }\n        for i := 2; i*i <= n; i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Find the largest prime in the list\n    for _, num := range lst {\n        if isPrime(num) && num > largestPrime {\n            largestPrime = num\n        }\n    }\n\n    // Calculate the sum of digits of the largest prime\n    sum := 0\n    for largestPrime != 0 {\n        sum += largestPrime % 10\n        largestPrime /= 10\n    }\n\n    return sum\n}",
        "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    maxPrime := 0\n\n    // Check each number in the list\n    for _, num := range lst {\n        // Check if the number is prime\n        if isPrime(num) {\n            // If it is, and it's greater than the current maxPrime, update maxPrime\n            if num > maxPrime {\n                maxPrime = num\n            }\n        }\n    }\n\n    // Convert the maxPrime to a string\n    maxPrimeStr := fmt.Sprintf(\"%d\", maxPrime)\n\n    // Sum the digits of the maxPrime\n    sum := 0\n    for _, digit := range maxPrimeStr {\n        sum += int(digit - '0')\n    }\n\n    return sum\n}\n\n// Helper function to check if a number is prime\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    for i := 3; i*i <= n; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}",
        "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    // Function to check if a number is prime\n    isPrime := func(n int) bool {\n        if n <= 1 {\n            return false\n        }\n        for i := 2; i*i <= n; i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Function to calculate the sum of digits\n    sumDigits := func(n int) int {\n        sum := 0\n        for n != 0 {\n            sum += n % 10\n            n /= 10\n        }\n        return sum\n    }\n\n    // Find the largest prime number\n    largestPrime := -1\n    for _, num := range lst {\n        if isPrime(num) && num > largestPrime {\n            largestPrime = num\n        }\n    }\n\n    // If no prime number was found, return 0\n    if largestPrime == -1 {\n        return 0\n    }\n\n    // Return the sum of the digits of the largest prime number\n    return sumDigits(largestPrime)\n}",
        "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    maxPrime := 0\n\n    for _, num := range lst {\n        if isPrime(num) && num > maxPrime {\n            maxPrime = num\n        }\n    }\n\n    return sumDigits(maxPrime)\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    for i := 3; i*i <= n; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumDigits(n int) int {\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}",
        "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    maxPrime := 0\n    for _, num := range lst {\n        if isPrime(num) && num > maxPrime {\n            maxPrime = num\n        }\n    }\n    return sumDigits(maxPrime)\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    for i := 3; i*i <= n; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumDigits(n int) int {\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}"
    ],
    [
        "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0, 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers []int) []interface{} {\nsum := 0\nproduct := 1\n\nfor _, num := range numbers {\n    sum += num\n    product *= num\n}\n\nreturn []interface{}{sum, product}",
        "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0, 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers []int) []interface{} {\nsum := 0\nproduct := 1\n\nfor _, number := range numbers {\n    sum += number\n    product *= number\n}\n\nreturn []interface{}{sum, product}",
        "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0, 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers []int) []interface{} {\nsum := 0\nproduct := 1\n\nfor _, num := range numbers {\n    sum += num\n    product *= num\n}\n\nreturn []interface{}{sum, product}",
        "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0, 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers []int) []interface{} {\nsum := 0\nproduct := 1\n\nfor _, number := range numbers {\n    sum += number\n    product *= number\n}\n\nreturn []interface{}{sum, product}",
        "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0, 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers []int) []interface{} {\nsum := 0\nproduct := 1\n\nfor _, number := range numbers {\n    sum += number\n    product *= number\n}\n\nreturn []interface{}{sum, product}"
    ],
    [
        "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\nif x > y {\n    return -1\n}\n\nif y%2 != 0 {\n    y -= 1\n}\n\nif y >= x && y%2 == 0 {\n    return y\n}\n\nreturn -1\n}",
        "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\nif x > y {\n    return -1\n}\n\nif y%2 != 0 {\n    y -= 1\n}\n\nif y >= x && y%2 == 0 {\n    return y\n}\n\nreturn -1\n}",
        "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\nif x > y {\n    return -1\n}\n\nif y%2 != 0 {\n    y--\n}\n\nif y < x {\n    return -1\n}\n\nreturn y\n}",
        "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\nif x > y {\n    return -1\n}\n\nif y%2 != 0 {\n    y--\n}\n\nif y >= x && y%2 == 0 {\n    return y\n}\n\nreturn -1\n}",
        "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\nif x > y {\n    return -1\n}\n\nif y%2 != 0 {\n    y -= 1\n}\n\nif y >= x {\n    return y\n}\n\nreturn -1\n}"
    ],
    [
        "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n// []interface{}{nil, 1}\n// >>> largest_smallest_integers([]int{})\n// []interface{}{nil, nil}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{nil, nil}\nfunc largest_smallest_integers(lst []int) []interface{} {\nvar largestNegative, smallestPositive *int\n\nfor _, num := range lst {\n    if num < 0 {\n        if largestNegative == nil || num > *largestNegative {\n            largestNegative = &num\n        }\n    } else if num > 0 {\n        if smallestPositive == nil || num < *smallestPositive {\n            smallestPositive = &num\n        }\n    }\n}\n\nreturn []interface{}{largestNegative, smallestPositive}\n}",
        "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n// []interface{}{nil, 1}\n// >>> largest_smallest_integers([]int{})\n// []interface{}{nil, nil}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{nil, nil}\nfunc largest_smallest_integers(lst []int) []interface{} {\nvar largestNegative, smallestPositive *int\n\nfor _, num := range lst {\n\tif num < 0 {\n\t\tif largestNegative == nil || num > *largestNegative {\n\t\t\tlargestNegative = new(int)\n\t\t\t*largestNegative = num\n\t\t}\n\t} else if num > 0 {\n\t\tif smallestPositive == nil || num < *smallestPositive {\n\t\t\tsmallestPositive = new(int)\n\t\t\t*smallestPositive = num\n\t\t}\n\t}\n}\n\nreturn []interface{}{largestNegative, smallestPositive}",
        "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n// []interface{}{nil, 1}\n// >>> largest_smallest_integers([]int{})\n// []interface{}{nil, nil}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{nil, nil}\nfunc largest_smallest_integers(lst []int) []interface{} {\nvar largestNegative, smallestPositive *int\n\nfor _, num := range lst {\n    if num < 0 {\n        if largestNegative == nil || num > *largestNegative {\n            largestNegative = new(int)\n            *largestNegative = num\n        }\n    } else if num > 0 {\n        if smallestPositive == nil || num < *smallestPositive {\n            smallestPositive = new(int)\n            *smallestPositive = num\n        }\n    }\n}\n\nreturn []interface{}{largestNegative, smallestPositive}\n}",
        "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n// []interface{}{nil, 1}\n// >>> largest_smallest_integers([]int{})\n// []interface{}{nil, nil}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{nil, nil}\nfunc largest_smallest_integers(lst []int) []interface{} {\nvar largestNegative, smallestPositive *int\n\nfor _, num := range lst {\n    if num < 0 {\n        if largestNegative == nil || num > *largestNegative {\n            largestNegative = new(int)\n            *largestNegative = num\n        }\n    } else if num > 0 {\n        if smallestPositive == nil || num < *smallestPositive {\n            smallestPositive = new(int)\n            *smallestPositive = num\n        }\n    }\n}\n\nreturn []interface{}{largestNegative, smallestPositive}\n}",
        "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n// []interface{}{nil, 1}\n// >>> largest_smallest_integers([]int{})\n// []interface{}{nil, nil}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{nil, nil}\nfunc largest_smallest_integers(lst []int) []interface{} {\nvar largestNegative, smallestPositive *int\n\nfor _, num := range lst {\n    if num < 0 {\n        if largestNegative == nil || num > *largestNegative {\n            largestNegative = new(int)\n            *largestNegative = num\n        }\n    } else if num > 0 {\n        if smallestPositive == nil || num < *smallestPositive {\n            smallestPositive = new(int)\n            *smallestPositive = num\n        }\n    }\n}\n\nreturn []interface{}{largestNegative, smallestPositive}"
    ],
    [
        "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString string) int {\ncharMap := make(map[rune]bool)\nfor _, char := range myString {\n    lowerChar := unicode.ToLower(char)\n    if _, ok := charMap[lowerChar]; !ok {\n        charMap[lowerChar] = true\n    }\n}\nreturn len(charMap)",
        "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString string) int {\ncharMap := make(map[rune]bool)\nfor _, char := range myString {\n    charMap[char] = true\n}\nreturn len(charMap)\n}",
        "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString string) int {\ncharMap := make(map[rune]bool)\nfor _, char := range myString {\n    lowerChar := unicode.ToLower(char)\n    if _, exists := charMap[lowerChar]; !exists {\n        charMap[lowerChar] = true\n    }\n}\nreturn len(charMap)\n}",
        "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString string) int {\ncharMap := make(map[rune]bool)\nfor _, char := range myString {\n    lowerChar := unicode.ToLower(char)\n    if _, exists := charMap[lowerChar]; !exists {\n        charMap[lowerChar] = true\n    }\n}\nreturn len(charMap)\n}",
        "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString string) int {\ncharMap := make(map[rune]bool)\nfor _, char := range myString {\n    lowerChar := unicode.ToLower(char)\n    if _, ok := charMap[lowerChar]; !ok {\n        charMap[lowerChar] = true\n    }\n}\nreturn len(charMap)\n}"
    ],
    [
        "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\npile := make([]int, n)\nfor i := 0; i < n; i++ {\n    pile[i] = n + i*2\n}\nreturn pile",
        "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\npile := make([]int, n)\nfor i := 0; i < n; i++ {\n    pile[i] = n + i*2\n}\nreturn pile\n",
        "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\npile := make([]int, n)\nfor i := 0; i < n; i++ {\n    pile[i] = n + i*2\n}\nreturn pile",
        "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\npile := make([]int, n)\nfor i := 0; i < n; i++ {\n    pile[i] = n + i*2\n}\nreturn pile",
        "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\npile := make([]int, n)\nfor i := 0; i < n; i++ {\n    pile[i] = n + 2*i\n}\nreturn pile"
    ],
    [
        "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int) int {\nminSum := nums[0]\nfor i := 0; i < len(nums); i++ {\n    sum := 0\n    for j := i; j < len(nums); j++ {\n        sum += nums[j]\n        if sum < minSum {\n            minSum = sum\n        }\n    }\n}\nreturn minSum\n",
        "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int) int {\nminSum := nums[0]\ncurrentSum := nums[0]\n\nfor i := 1; i < len(nums); i++ {\n    currentSum = min(currentSum + nums[i], nums[i])\n    minSum = min(minSum, currentSum)\n}\n\nreturn minSum\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}",
        "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int) int {\n    minSum := nums[0]\n    currentSum := nums[0]\n\n    for i := 1; i < len(nums); i++ {\n        if currentSum > 0 {\n            currentSum = nums[i]\n        } else {\n            currentSum += nums[i]\n        }\n\n        if currentSum < minSum {\n            minSum = currentSum\n        }\n    }\n\n    return minSum\n}",
        "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int) int {\n    minSum := nums[0]\n    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j < len(nums); j++ {\n            sum += nums[j]\n            if sum < minSum {\n                minSum = sum\n            }\n        }\n    }\n    return minSum\n}",
        "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int) int {\n    minSum := nums[0]\n    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j < len(nums); j++ {\n            sum += nums[j]\n            if sum < minSum {\n                minSum = sum\n            }\n        }\n    }\n    return minSum\n}"
    ],
    [
        "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\nvar result string\nfor i := 0; i <= n; i++ {\n    result += fmt.Sprintf(\"%d \", i)\n}\nreturn result[:len(result)-1] // remove the trailing space\n}",
        "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\nresult := \"\"\nfor i := 0; i <= n; i++ {\n    if i != n {\n        result += fmt.Sprintf(\"%d \", i)\n    } else {\n        result += fmt.Sprintf(\"%d\", i)\n    }\n}\nreturn result",
        "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\nvar result string\nfor i := 0; i <= n; i++ {\n    if i == n {\n        result += fmt.Sprintf(\"%d\", i)\n    } else {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n}\nreturn result",
        "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\nvar result string\nfor i := 0; i <= n; i++ {\n    result += fmt.Sprintf(\"%d \", i)\n}\nreturn result[:len(result)-1] // Remove the trailing space\n}",
        "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\nvar result string\nfor i := 0; i <= n; i++ {\n    result += fmt.Sprintf(\"%d \", i)\n}\nreturn result[:len(result)-1] // remove the trailing space\n}"
    ],
    [
        "package cycpattern_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunc cycpattern_check(a string, b string) bool {\nfor i := 0; i < len(b); i++ {\n    b = b[len(b)-1:] + b[:len(b)-1]\n    if strings.Contains(a, b) {\n        return true\n    }\n}\nreturn false\n}",
        "package cycpattern_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunc cycpattern_check(a string, b string) bool {\n    // Create all rotations of b\n    rotations := []string{b}\n    for i := 1; i < len(b); i++ {\n        rotations = append(rotations, b[i:]+b[:i])\n    }\n\n    // Check if any rotation is a substring of a\n    for _, rotation := range rotations {\n        if strings.Contains(a, rotation) {\n            return true\n        }\n    }\n\n    return false\n}",
        "package cycpattern_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunc cycpattern_check(a string, b string) bool {\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b) {\n            return true\n        }\n        b = b[1:] + string(b[0])\n    }\n    return false\n}",
        "package cycpattern_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunc cycpattern_check(a string, b string) bool {\nfor i := 0; i < len(b); i++ {\n    b = b[len(b)-1:] + b[:len(b)-1]\n    if strings.Contains(a, b) {\n        return true\n    }\n}\nreturn false\n}",
        "package cycpattern_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunc cycpattern_check(a string, b string) bool {\n    for i := 0; i < len(b); i++ {\n        b = b[len(b)-1:] + b[:len(b)-1]\n        if strings.Contains(a, b) {\n            return true\n        }\n    }\n    return false\n}"
    ],
    [
        "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true is list elements are monotonically increasing or decreasing.\n// >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4, 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l []int) bool {\nif len(l) < 2 {\n        return true\n    }\n\n    delta := l[1] - l[0]\n    for i := 2; i < len(l); i++ {\n        if delta > 0 && l[i] < l[i-1] {\n            return false\n        } else if delta < 0 && l[i] > l[i-1] {\n            return false\n        } else if delta == 0 {\n            delta = l[i] - l[i-1]\n        }\n    }\n\n    return true\n}",
        "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true is list elements are monotonically increasing or decreasing.\n// >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4, 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l []int) bool {\nif len(l) < 2 {\n        return true\n    }\n    diff := l[1] - l[0]\n    for i := 2; i < len(l); i++ {\n        if diff > 0 && l[i]-l[i-1] < 0 {\n            return false\n        } else if diff < 0 && l[i]-l[i-1] > 0 {\n            return false\n        } else if diff == 0 {\n            diff = l[i] - l[i-1]\n        }\n    }\n    return true\n}",
        "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true is list elements are monotonically increasing or decreasing.\n// >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4, 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l []int) bool {\nif len(l) < 2 {\n        return true\n    }\n\n    var direction int\n    for i := 1; i < len(l); i++ {\n        diff := l[i] - l[i-1]\n        if diff != 0 {\n            if direction == 0 {\n                direction = diff\n            } else if (direction > 0 && diff < 0) || (direction < 0 && diff > 0) {\n                return false\n            }\n        }\n    }\n\n    return true\n}",
        "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true is list elements are monotonically increasing or decreasing.\n// >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4, 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l []int) bool {\nif len(l) < 2 {\n        return true\n    }\n\n    direction := l[1] - l[0]\n    for i := 2; i < len(l); i++ {\n        if direction > 0 && l[i] - l[i-1] < 0 {\n            return false\n        } else if direction < 0 && l[i] - l[i-1] > 0 {\n            return false\n        } else if direction == 0 {\n            direction = l[i] - l[i-1]\n        }\n    }\n    return true\n}",
        "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true is list elements are monotonically increasing or decreasing.\n// >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4, 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l []int) bool {\nif len(l) < 2 {\n        return true\n    }\n\n    var increasing, decreasing bool\n\n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n            increasing = true\n        } else if l[i] < l[i-1] {\n            decreasing = true\n        }\n\n        if increasing && decreasing {\n            return false\n        }\n    }\n\n    return true\n}"
    ],
    [
        "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if all numbers in the list l are below threshold t.\n// >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1, 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\nfor _, num := range l {\n    if num >= t {\n        return false\n    }\n}\nreturn true\n}",
        "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if all numbers in the list l are below threshold t.\n// >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1, 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\nfor _, num := range l {\n    if num >= t {\n        return false\n    }\n}\nreturn true\n}",
        "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if all numbers in the list l are below threshold t.\n// >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1, 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\nfor _, num := range l {\n    if num >= t {\n        return false\n    }\n}\nreturn true\n}",
        "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if all numbers in the list l are below threshold t.\n// >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1, 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\nfor _, num := range l {\n    if num >= t {\n        return false\n    }\n}\nreturn true\n}",
        "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if all numbers in the list l are below threshold t.\n// >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1, 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\nfor _, num := range l {\n        if num >= t {\n            return false\n        }\n    }\n    return true\n}"
    ],
    [
        "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n// Function to check if a number is prime\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n// Function to check if a number is product of 3 primes\ncount := 0\nfor i := 2; i <= a; i++ {\n    if a%i == 0 && isPrime(i) {\n        a = a / i\n        count++\n        i = 1\n    }\n}\n\nif count == 3 && a == 1 {\n    return true\n} else {\n    return false\n}\n",
        "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n// Define a helper function to check if a number is prime\n    isPrime := func(n int) bool {\n        if n <= 1 {\n            return false\n        }\n        for i := 2; i*i <= n; i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check the multiplication of 3 prime numbers\n    for i := 2; i < a; i++ {\n        if a%i == 0 && isPrime(i) {\n            for j := i; j < a; j++ {\n                if a/(i*j) > 1 && a%(i*j) == 0 && isPrime(j) && isPrime(a/(i*j)) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}",
        "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n// Function to check if a number is prime\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    for i := 3; i*i <= n; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n// Initialize counter\ncounter := 0\n\n// Check each number up to a\nfor i := 2; i <= a; i++ {\n    // If i is a prime number and a is divisible by i\n    if isPrime(i) && a%i == 0 {\n        // Increase counter\n        counter++\n        // Divide a by i\n        a = a / i\n    }\n}\n\n// If a is a prime number, increase counter\nif isPrime(a) {\n    counter++\n}\n\n// If counter is equal to 3, return true\nif counter == 3 {\n    return true\n}\n\n// Otherwise, return false\nreturn false\n",
        "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n// Define a helper function to check if a number is prime\nfunc is_prime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n// Check if the given number is the multiplication of 3 prime numbers\ncount := 0\nfor i := 2; i <= a; i++ {\n    if is_prime(i) && a%i == 0 {\n        a /= i\n        count++\n        // If the count is already 3 but there are still prime factors left, return false\n        if count == 3 && a != 1 {\n            return false\n        }\n        i = 1\n    }\n}\n\n// If the count is exactly 3, return true\nreturn count == 3\n",
        "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n// Create an array to hold the prime factors\nprimeFactors := []int{}\n\n// Find the prime factors of the number\nfor i := 2; i*i <= a; i++ {\n    for a%i == 0 {\n        primeFactors = append(primeFactors, i)\n        a /= i\n    }\n}\n\nif a > 1 {\n    primeFactors = append(primeFactors, a)\n}\n\n// Check if the number of prime factors is 3\nif len(primeFactors) == 3 {\n    return true\n}\n\nreturn false\n}"
    ],
    [
        "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1, 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l []int) []int {\nvar positives []int\nfor _, num := range l {\n    if num > 0 {\n        positives = append(positives, num)\n    }\n}\nreturn positives",
        "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1, 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l []int) []int {\nvar positive []int\nfor _, v := range l {\n    if v > 0 {\n        positive = append(positive, v)\n    }\n}\nreturn positive",
        "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1, 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l []int) []int {\nvar positive []int\nfor _, num := range l {\n    if num > 0 {\n        positive = append(positive, num)\n    }\n}\nreturn positive",
        "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1, 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l []int) []int {\nvar positiveNumbers []int\nfor _, num := range l {\n    if num > 0 {\n        positiveNumbers = append(positiveNumbers, num)\n    }\n}\nreturn positiveNumbers",
        "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1, 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l []int) []int {\nvar positiveNumbers []int\nfor _, num := range l {\n    if num > 0 {\n        positiveNumbers = append(positiveNumbers, num)\n    }\n}\nreturn positiveNumbers"
    ],
    [
        "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9, 5}\nfunc sort_third(l []int) []int {\n// Create a slice to store elements at indices divisible by 3\ndivisibleByThree := []int{}\nfor i := 0; i < len(l); i += 3 {\n    divisibleByThree = append(divisibleByThree, l[i])\n}\n\n// Sort the slice\nsort.Ints(divisibleByThree)\n\n// Replace the elements at indices divisible by 3 with the sorted elements\nj := 0\nfor i := 0; i < len(l); i += 3 {\n    l[i] = divisibleByThree[j]\n    j++\n}\n\nreturn l\n",
        "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9, 5}\nfunc sort_third(l []int) []int {\n// Create a slice to store the elements at indices divisible by 3\nthirdElements := make([]int, 0)\nfor i := 0; i < len(l); i += 3 {\n    thirdElements = append(thirdElements, l[i])\n}\n\n// Sort the thirdElements slice\nsort.Ints(thirdElements)\n\n// Replace the elements in the original slice at indices divisible by 3\nj := 0\nfor i := 0; i < len(l); i += 3 {\n    l[i] = thirdElements[j]\n    j++\n}\n\nreturn l\n",
        "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9, 5}\nfunc sort_third(l []int) []int {\n// Create a slice to store the elements at indices divisible by 3\ndivisibleByThree := make([]int, 0)\n\n// Iterate over the list and add elements at indices divisible by 3 to the new slice\nfor i, v := range l {\n    if i % 3 == 0 {\n        divisibleByThree = append(divisibleByThree, v)\n    }\n}\n\n// Sort the divisibleByThree slice\nsort.Ints(divisibleByThree)\n\n// Replace the elements at indices divisible by 3 in the original list with the sorted elements\nj := 0\nfor i := range l {\n    if i % 3 == 0 {\n        l[i] = divisibleByThree[j]\n        j++\n    }\n}\n\nreturn l\n",
        "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9, 5}\nfunc sort_third(l []int) []int {\n    // Create a slice to hold the values at indices divisible by three\n    divisibleByThree := []int{}\n    for i, v := range l {\n        if i % 3 == 0 {\n            divisibleByThree = append(divisibleByThree, v)\n        }\n    }\n\n    // Sort the divisibleByThree slice\n    sort.Ints(divisibleByThree)\n\n    // Replace the values at indices divisible by three in the original slice with the sorted values\n    j := 0\n    for i := range l {\n        if i % 3 == 0 {\n            l[i] = divisibleByThree[j]\n            j++\n        }\n    }\n\n    return l\n}",
        "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9, 5}\nfunc sort_third(l []int) []int {\n    var thirdIndexValues []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            thirdIndexValues = append(thirdIndexValues, v)\n        }\n    }\n\n    sort.Ints(thirdIndexValues)\n\n    j := 0\n    for i := range l {\n        if i % 3 == 0 {\n            l[i] = thirdIndexValues[j]\n            j++\n        }\n    }\n\n    return l\n}"
    ],
    [
        "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string string) []int {\nimport (\n    \"strings\"\n)\n\n// Create an empty slice to store the results\nresults := []int{}\n\n// Split the input string into groups by spaces\ngroups := strings.Split(paren_string, \" \")\n\n// Iterate over each group\nfor _, group := range groups {\n    // Initialize the current and max depth to 0\n    currentDepth, maxDepth := 0, 0\n\n    // Iterate over each character in the group\n    for _, char := range group {\n        // If the character is an opening parenthesis, increment the current depth\n        if char == '(' {\n            currentDepth++\n            // If the current depth is greater than the max depth, update the max depth\n            if currentDepth > maxDepth {\n                maxDepth = currentDepth\n            }\n        } else if char == ')' {\n            // If the character is a closing parenthesis, decrement the current depth\n            currentDepth--\n        }\n    }\n\n    // Append the max depth to the results slice\n    results = append(results, maxDepth)\n}\n\n// Return the results\nreturn results\n",
        "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string string) []int {\n    var result []int\n    var maxDepth, currentDepth int\n    var newGroup bool = true\n\n    for _, char := range paren_string {\n        if char == '(' {\n            currentDepth++\n            if currentDepth > maxDepth {\n                maxDepth = currentDepth\n            }\n            newGroup = false\n        } else if char == ')' {\n            currentDepth--\n        } else if char == ' ' && !newGroup {\n            result = append(result, maxDepth)\n            maxDepth, currentDepth = 0, 0\n            newGroup = true\n        }\n    }\n\n    // Append the max depth of the last group\n    if !newGroup {\n        result = append(result, maxDepth)\n    }\n\n    return result\n}",
        "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string string) []int {\n    import \"strings\"\n\n    // Split the input string by spaces to get individual groups\n    groups := strings.Split(paren_string, \" \")\n\n    // Initialize an empty slice to hold the results\n    var results []int\n\n    // Iterate over each group\n    for _, group := range groups {\n        // Initialize counters for current depth and maximum depth\n        currentDepth, maxDepth := 0, 0\n\n        // Iterate over each character in the group\n        for _, char := range group {\n            // If the character is an opening parenthesis, increment the current depth\n            if char == '(' {\n                currentDepth++\n                // If the current depth is greater than the maximum depth, update the maximum depth\n                if currentDepth > maxDepth {\n                    maxDepth = currentDepth\n                }\n            } else if char == ')' {\n                // If the character is a closing parenthesis, decrement the current depth\n                currentDepth--\n            }\n        }\n\n        // Append the maximum depth for the current group to the results\n        results = append(results, maxDepth)\n    }\n\n    // Return the results\n    return results\n}",
        "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string string) []int {\nimport (\n    \"strings\"\n)\n\n// Split the input string into groups\ngroups := strings.Split(paren_string, \" \")\n\n// Initialize a slice to hold the maximum depth for each group\ndepths := make([]int, len(groups))\n\n// Iterate over each group\nfor i, group := range groups {\n    // Initialize counters for current depth and maximum depth\n    currDepth, maxDepth := 0, 0\n\n    // Iterate over each character in the group\n    for _, char := range group {\n        // Increase current depth if open parenthesis is found\n        if char == '(' {\n            currDepth++\n            // Update maximum depth if current depth is greater\n            if currDepth > maxDepth {\n                maxDepth = currDepth\n            }\n        } else if char == ')' {\n            // Decrease current depth if close parenthesis is found\n            currDepth--\n        }\n    }\n\n    // Store the maximum depth for the current group\n    depths[i] = maxDepth\n}\n\n// Return the slice with maximum depths\nreturn depths",
        "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string string) []int {\nimport \"strings\"\n\n// Initialize an empty slice to hold the results\nresults := []int{}\n\n// Split the input string into individual groups\ngroups := strings.Split(paren_string, \" \")\n\n// Loop over each group\nfor _, group := range groups {\n    // Initialize a counter for the current depth and the maximum depth\n    currentDepth, maxDepth := 0, 0\n\n    // Loop over each character in the group\n    for _, char := range group {\n        // If the character is an opening parenthesis, increment the current depth\n        if char == '(' {\n            currentDepth++\n            // If the current depth is greater than the maximum depth, update the maximum depth\n            if currentDepth > maxDepth {\n                maxDepth = currentDepth\n            }\n        } else if char == ')' {\n            // If the character is a closing parenthesis, decrement the current depth\n            currentDepth--\n        }\n    }\n\n    // Append the maximum depth to the results\n    results = append(results, maxDepth)\n}\n\n// Return the results\nreturn results\n"
    ],
    [
        "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\nreturn 0.5 * float64(a) * float64(h)\n}",
        "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\nreturn 0.5 * float64(a) * float64(h)\n}",
        "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\nreturn float64(a) * float64(h) / 2.0\n}",
        "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\nreturn float64(a) * float64(h) / 2.0\n}",
        "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\nreturn float64(a * h) / 2.0\n}"
    ],
    [
        "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    unitDigitA := a % 10\n    unitDigitB := b % 10\n    return abs(unitDigitA * unitDigitB)\n}\n\nfunc abs(n int) int {\n    if n < 0 {\n        return -n\n    }\n    return n\n}",
        "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    unitDigitA := abs(a % 10)\n    unitDigitB := abs(b % 10)\n    return unitDigitA * unitDigitB\n}\n\nfunc abs(n int) int {\n    if n < 0 {\n        return -n\n    }\n    return n\n}",
        "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n// Get the unit digit of each number\nunitA := a % 10\nunitB := b % 10\n\n// Multiply the unit digits\nproduct := unitA * unitB\n\n// Return the product\nreturn product\n}",
        "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n// Get the unit digits of both numbers\nunitA := abs(a % 10)\nunitB := abs(b % 10)\n\n// Return the product of the unit digits\nreturn unitA * unitB\n}\n\n// Helper function to return the absolute value of an integer\nfunc abs(n int) int {\n    if n < 0 {\n        return -n\n    }\n    return n\n}",
        "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    unitDigitA := a % 10\n    unitDigitB := b % 10\n\n    if unitDigitA < 0 {\n        unitDigitA = -unitDigitA\n    }\n\n    if unitDigitB < 0 {\n        unitDigitB = -unitDigitB\n    }\n\n    return unitDigitA * unitDigitB\n}"
    ],
    [
        "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0, 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64 {\n    // Calculate the mean first\n    sum := 0.0\n    for _, number := range numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\n    // Calculate the mean absolute deviation\n    sumDifferences := 0.0\n    for _, number := range numbers {\n        difference := number - mean\n        if difference < 0 {\n            difference = -difference\n        }\n        sumDifferences += difference\n    }\n    return sumDifferences / float64(len(numbers))\n}",
        "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0, 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64 {\nif len(numbers) == 0 {\n        return 0.0\n    }\n\n    // Calculate the mean\n    sum := 0.0\n    for _, number := range numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\n    // Calculate the Mean Absolute Deviation\n    mad := 0.0\n    for _, number := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return mad / float64(len(numbers))\n}",
        "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0, 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64 {\n// Calculate mean\nsum := 0.0\nfor _, number := range numbers {\n    sum += number\n}\nmean := sum / float64(len(numbers))\n\n// Calculate mean absolute deviation\nmad := 0.0\nfor _, number := range numbers {\n    mad += math.Abs(number - mean)\n}\n\nreturn mad / float64(len(numbers))",
        "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0, 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64 {\n    var total float64\n    for _, number := range numbers {\n        total += number\n    }\n\n    mean := total / float64(len(numbers))\n\n    var deviations []float64\n    for _, number := range numbers {\n        deviation := number - mean\n        if deviation < 0 {\n            deviation = -deviation\n        }\n        deviations = append(deviations, deviation)\n    }\n\n    var totalDeviation float64\n    for _, deviation := range deviations {\n        totalDeviation += deviation\n    }\n\n    return totalDeviation / float64(len(deviations))\n}",
        "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0, 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64 {\nif len(numbers) == 0 {\n        return 0.0\n    }\n\n    sum := 0.0\n    for _, number := range numbers {\n        sum += number\n    }\n\n    mean := sum / float64(len(numbers))\n\n    totalDeviation := 0.0\n    for _, number := range numbers {\n        totalDeviation += math.Abs(number - mean)\n    }\n\n    return totalDeviation / float64(len(numbers))\n}"
    ],
    [
        "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique common elements for two lists.\n// >>> common([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n// >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1 []int, l2 []int) []int {\n// Create a map to store the unique elements\nuniqueElements := make(map[int]bool)\n\n// Iterate over the first list and add the elements to the map\nfor _, val := range l1 {\n    uniqueElements[val] = true\n}\n\n// Create a slice to store the common elements\nvar commonElements []int\n\n// Iterate over the second list\nfor _, val := range l2 {\n    // If the element is in the map, it is a common element\n    if uniqueElements[val] {\n        commonElements = append(commonElements, val)\n        // Remove the element from the map to avoid duplicates\n        delete(uniqueElements, val)\n    }\n}\n\n// Sort the slice of common elements\nsort.Ints(commonElements)\n\nreturn commonElements\n",
        "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique common elements for two lists.\n// >>> common([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n// >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1 []int, l2 []int) []int {\n// Create a map to hold the unique elements\nuniqueElements := make(map[int]bool)\n\n// Iterate over the first list\nfor _, num := range l1 {\n    uniqueElements[num] = true\n}\n\n// Create a slice to hold the common elements\nvar commonElements []int\n\n// Iterate over the second list\nfor _, num := range l2 {\n    // If the element is in the first list, add it to the common elements\n    if uniqueElements[num] {\n        commonElements = append(commonElements, num)\n        uniqueElements[num] = false\n    }\n}\n\n// Sort the common elements\nsort.Ints(commonElements)\n\nreturn commonElements\n",
        "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique common elements for two lists.\n// >>> common([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n// >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1 []int, l2 []int) []int {\n// Create a map to store the unique elements of the first list\n    m := make(map[int]bool)\n    for _, val := range l1 {\n        m[val] = true\n    }\n\n    // Create a slice to store the common elements\n    common := []int{}\n\n    // Iterate over the second list and check if the element is in the map\n    // If it is, add it to the common slice and remove it from the map to avoid duplicates\n    for _, val := range l2 {\n        if _, ok := m[val]; ok {\n            common = append(common, val)\n            delete(m, val)\n        }\n    }\n\n    // Sort the common slice\n    sort.Ints(common)\n\n    return common\n}",
        "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique common elements for two lists.\n// >>> common([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n// >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1 []int, l2 []int) []int {\n// Create a map to store the elements of l1\nm := make(map[int]bool)\nfor _, val := range l1 {\n    m[val] = true\n}\n\n// Create a slice to store the common elements\nvar commonElements []int\nfor _, val := range l2 {\n    if m[val] {\n        commonElements = append(commonElements, val)\n        // Remove the element from the map to avoid duplicates\n        delete(m, val)\n    }\n}\n\n// Sort the common elements\nsort.Ints(commonElements)\n\nreturn commonElements\n}",
        "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique common elements for two lists.\n// >>> common([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n// >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1 []int, l2 []int) []int {\n// create a map to store the common elements\ncommonMap := make(map[int]bool)\n\n// iterate over the first list\nfor _, val := range l1 {\n    // iterate over the second list\n    for _, val2 := range l2 {\n        // if the value is found in both lists, add it to the map\n        if val == val2 {\n            commonMap[val] = true\n        }\n    }\n}\n\n// create a slice to store the common elements\ncommonSlice := make([]int, 0, len(commonMap))\n\n// iterate over the map and add the keys to the slice\nfor key := range commonMap {\n    commonSlice = append(commonSlice, key)\n}\n\n// sort the slice\nsort.Ints(commonSlice)\n\n// return the slice\nreturn commonSlice\n"
    ],
    [
        "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunc int_to_mini_roman(number int) string {\n    romanNumerals := []struct {\n        value  int\n        symbol string\n    }{\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"},\n    }\n\n    result := \"\"\n\n    for _, numeral := range romanNumerals {\n        for number >= numeral.value {\n            result += numeral.symbol\n            number -= numeral.value\n        }\n    }\n\n    return result\n}",
        "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunc int_to_mini_roman(number int) string {\n// Define a map to hold the Roman numerals\nromanNumerals := map[int]string{\n    1000: \"m\",\n    900:  \"cm\",\n    500:  \"d\",\n    400:  \"cd\",\n    100:  \"c\",\n    90:   \"xc\",\n    50:   \"l\",\n    40:   \"xl\",\n    10:   \"x\",\n    9:    \"ix\",\n    5:    \"v\",\n    4:    \"iv\",\n    1:    \"i\",\n}\n\nresult := \"\"\n\n// Iterate over each numeral in the map\nfor key := range romanNumerals {\n    // While the number is greater than or equal to the numeral\n    for number >= key {\n        // Append the numeral to the result\n        result += romanNumerals[key]\n        // Subtract the numeral from the number\n        number -= key\n    }\n}\n\nreturn result",
        "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunc int_to_mini_roman(number int) string {\nromanNumerals := []struct {\n        value int\n        roman string\n    }{\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"},\n    }\n\n    result := \"\"\n    for _, numeral := range romanNumerals {\n        for number >= numeral.value {\n            result += numeral.roman\n            number -= numeral.value\n        }\n    }\n    return result\n}",
        "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunc int_to_mini_roman(number int) string {\n// Define mapping from integer to roman numeral\nromanNumerals := []struct {\n    Value  int\n    Symbol string\n}{\n    {1000, \"m\"},\n    {900, \"cm\"},\n    {500, \"d\"},\n    {400, \"cd\"},\n    {100, \"c\"},\n    {90, \"xc\"},\n    {50, \"l\"},\n    {40, \"xl\"},\n    {10, \"x\"},\n    {9, \"ix\"},\n    {5, \"v\"},\n    {4, \"iv\"},\n    {1, \"i\"},\n}\n\nroman := \"\"\nfor _, numeral := range romanNumerals {\n    // While we can still subtract this numeral from the number\n    for number >= numeral.Value {\n        // Append the corresponding roman numeral to our result string\n        roman += numeral.Symbol\n        // Subtract the value of this numeral from our number\n        number -= numeral.Value\n    }\n}\n\nreturn roman",
        "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunc int_to_mini_roman(number int) string {\n    romanNumerals := []struct {\n        value int\n        roman string\n    }{\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"},\n    }\n\n    result := \"\"\n\n    for _, numeral := range romanNumerals {\n        for number >= numeral.value {\n            result += numeral.roman\n            number -= numeral.value\n        }\n    }\n\n    return result\n}"
    ],
    [
        "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\nimport (\n    \"strings\"\n    \"strconv\"\n)\n\n// Split the string into words\nwords := strings.Fields(s)\n\n// Convert the number of apples and oranges to integers\napples, _ := strconv.Atoi(words[0])\noranges, _ := strconv.Atoi(words[3])\n\n// Subtract the number of apples and oranges from the total number of fruits\nmangoes := n - (apples + oranges)\n\nreturn mangoes\n",
        "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\nimport (\n    \"strings\"\n    \"strconv\"\n)\n\n// Split the string into words\nwords := strings.Fields(s)\n\n// Convert the number of apples and oranges from string to int\napples, _ := strconv.Atoi(words[0])\noranges, _ := strconv.Atoi(words[3])\n\n// Calculate and return the number of mangoes\nmangoes := n - (apples + oranges)\nreturn mangoes",
        "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\nimport (\n    \"strings\"\n    \"strconv\"\n)\n\n// Split the string by spaces\nwords := strings.Split(s, \" \")\n\n// Convert the first and fourth words to integers (these represent the number of apples and oranges)\napples, _ := strconv.Atoi(words[0])\noranges, _ := strconv.Atoi(words[3])\n\n// Subtract the number of apples and oranges from the total number of fruits to get the number of mangoes\nmangoes := n - (apples + oranges)\n\nreturn mangoes",
        "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\nimport (\n    \"strings\"\n    \"strconv\"\n)\n\n// Split the string into words\nwords := strings.Fields(s)\n\n// Convert the string numbers to integers\napples, _ := strconv.Atoi(words[0])\noranges, _ := strconv.Atoi(words[3])\n\n// Calculate and return the number of mangoes\nmangoes := n - (apples + oranges)\nreturn mangoes\n",
        "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\nimport (\n    \"strings\"\n    \"strconv\"\n)\n\n// split the string into words\nwords := strings.Fields(s)\n\n// convert the apple and orange counts to integers\napples, _ := strconv.Atoi(words[0])\noranges, _ := strconv.Atoi(words[3])\n\n// subtract the apples and oranges from the total fruit count\nmangoes := n - (apples + oranges)\n\nreturn mangoes"
    ],
    [
        "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n// create a map to store the characters in c\n    charMap := make(map[rune]bool)\n    for _, ch := range c {\n        charMap[ch] = true\n    }\n\n    // create a new string by deleting characters in s that are in c\n    var newStr string\n    for _, ch := range s {\n        if !charMap[ch] {\n            newStr += string(ch)\n        }\n    }\n\n    // check if the new string is a palindrome\n    isPalindrome := true\n    for i := 0; i < len(newStr)/2; i++ {\n        if newStr[i] != newStr[len(newStr)-1-i] {\n            isPalindrome = false\n            break\n        }\n    }\n\n    return []interface{}{newStr, isPalindrome}\n}",
        "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\nresult := \"\"\nfor _, char := range s {\n    if !strings.ContainsRune(c, char) {\n        result += string(char)\n    }\n}\n\nisPalindrome := result == Reverse(result)\n\nreturn []interface{}{result, isPalindrome}\n}\n\nfunc Reverse(s string) (result string) {\n    for _, v := range s {\n        result = string(v) + result\n    }\n    return\n}",
        "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n// Create a map to store the characters to be deleted\n    charMap := make(map[rune]bool)\n    for _, char := range c {\n        charMap[char] = true\n    }\n\n    // Construct the result string by skipping characters that are in the map\n    var result []rune\n    for _, char := range s {\n        if !charMap[char] {\n            result = append(result, char)\n        }\n    }\n\n    // Check if the result string is a palindrome\n    isPalindrome := true\n    for i := 0; i < len(result)/2; i++ {\n        if result[i] != result[len(result)-i-1] {\n            isPalindrome = false\n            break\n        }\n    }\n\n    return []interface{}{string(result), isPalindrome}\n}",
        "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n// create a map to store the characters in c\n    charMap := make(map[rune]bool)\n    for _, char := range c {\n        charMap[char] = true\n    }\n\n    // create a new string by excluding the characters in c\n    newStr := \"\"\n    for _, char := range s {\n        if _, ok := charMap[char]; !ok {\n            newStr += string(char)\n        }\n    }\n\n    // check if the new string is a palindrome\n    isPalindrome := true\n    for i := 0; i < len(newStr)/2; i++ {\n        if newStr[i] != newStr[len(newStr)-i-1] {\n            isPalindrome = false\n            break\n        }\n    }\n\n    // return the result\n    return []interface{}{newStr, isPalindrome}\n}",
        "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\nresult := \"\"\nfor _, char := range s {\n    if !strings.ContainsRune(c, char) {\n        result += string(char)\n    }\n}\n\nisPalindrome := result == reverse(result)\n\nreturn []interface{}{result, isPalindrome}\n}\n\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}"
    ],
    [
        "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\nif b == 0 {\n    return a\n} else {\n    return greatest_common_divisor(b, a%b)\n}",
        "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\nif b == 0 {\n    return a\n} else {\n    return greatest_common_divisor(b, a%b)\n}",
        "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\nif b == 0 {\n    return a\n} else {\n    return greatest_common_divisor(b, a%b)\n}",
        "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\nif b == 0 {\n    return a\n} else {\n    return greatest_common_divisor(b, a%b)\n}",
        "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\nif b == 0 {\n    return a\n} else {\n    return greatest_common_divisor(b, a%b)\n}"
    ],
    [
        "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this Kata, you have to sort a list of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n// >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n// >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr []int) []int {\nimport \"sort\"\n\n// Define a custom sort function\nsort.Slice(arr, func(i, j int) bool {\n    // Count the number of ones in the binary representation of both numbers\n    onesI := countOnes(arr[i])\n    onesJ := countOnes(arr[j])\n\n    // If the number of ones is the same, sort based on the decimal value\n    if onesI == onesJ {\n        return arr[i] < arr[j]\n    }\n\n    // Otherwise, sort based on the number of ones\n    return onesI < onesJ\n})\n\nreturn arr\n}\n\n// Helper function to count the number of ones in the binary representation of a number\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}",
        "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this Kata, you have to sort a list of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n// >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n// >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr []int) []int {\nimport \"sort\"\n\n// Create a custom sort function\nsort.Slice(arr, func(i, j int) bool {\n    // Count number of ones in binary representation\n    numOnesI := bits.OnesCount(uint(arr[i]))\n    numOnesJ := bits.OnesCount(uint(arr[j]))\n\n    // If number of ones is the same, sort by decimal value\n    if numOnesI == numOnesJ {\n        return arr[i] < arr[j]\n    }\n\n    // Otherwise, sort by number of ones\n    return numOnesI < numOnesJ\n})\n\nreturn arr\n",
        "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this Kata, you have to sort a list of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n// >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n// >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr []int) []int {\nimport \"sort\"\n\n// Function to count number of ones in binary representation\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}\n\n// Sort the array based on the number of ones in binary representation\nsort.Slice(arr, func(i, j int) bool {\n    x, y := countOnes(arr[i]), countOnes(arr[j])\n    return x < y || (x == y && arr[i] < arr[j])\n})\n\nreturn arr\n",
        "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this Kata, you have to sort a list of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n// >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n// >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr []int) []int {\nimport \"sort\"\n\n// Define a custom sort function\nsort.Slice(arr, func(i, j int) bool {\n    // Count the number of ones in the binary representation of arr[i] and arr[j]\n    onesI := bits.OnesCount(uint(arr[i]))\n    onesJ := bits.OnesCount(uint(arr[j]))\n\n    // If the number of ones is the same, sort based on decimal value\n    if onesI == onesJ {\n        return arr[i] < arr[j]\n    }\n\n    // Otherwise, sort based on the number of ones\n    return onesI < onesJ\n})\n\nreturn arr",
        "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this Kata, you have to sort a list of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n// >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n// >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr []int) []int {\nimport \"sort\"\n\n// Define a custom sort function\nsort.Slice(arr, func(i, j int) bool {\n    // Count the number of ones in the binary representation of arr[i] and arr[j]\n    numOnesI := bits.OnesCount(uint(arr[i]))\n    numOnesJ := bits.OnesCount(uint(arr[j]))\n\n    // If the number of ones is the same, sort based on decimal value\n    if numOnesI == numOnesJ {\n        return arr[i] < arr[j]\n    }\n\n    // Otherwise, sort based on the number of ones\n    return numOnesI < numOnesJ\n})\n\nreturn arr\n"
    ],
    [
        "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Concatenate list of strings into a single string\n// >>> concatenate([]string{})\n// \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings []string) string {\nvar result string\nfor _, str := range strings {\n    result += str\n}\nreturn result",
        "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Concatenate list of strings into a single string\n// >>> concatenate([]string{})\n// \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings []string) string {\nvar result string\nfor _, str := range strings {\n    result += str\n}\nreturn result",
        "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Concatenate list of strings into a single string\n// >>> concatenate([]string{})\n// \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings []string) string {\nvar result string\nfor _, str := range strings {\n    result += str\n}\nreturn result",
        "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Concatenate list of strings into a single string\n// >>> concatenate([]string{})\n// \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings []string) string {\nvar result string\nfor _, str := range strings {\n    result += str\n}\nreturn result",
        "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Concatenate list of strings into a single string\n// >>> concatenate([]string{})\n// \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings []string) string {\nvar result string\nfor _, str := range strings {\n    result += str\n}\nreturn result"
    ],
    [
        "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n// Create a new slice to store the even length strings\n    evenStrings := []string{}\n    \n    // Iterate over the provided list\n    for _, str := range lst {\n        // Check if the length of the string is even\n        if len(str)%2 == 0 {\n            // If it is, append it to the new slice\n            evenStrings = append(evenStrings, str)\n        }\n    }\n\n    // Sort the slice by length and then alphabetically\n    sort.Slice(evenStrings, func(i, j int) bool {\n        // If the lengths are equal, sort alphabetically\n        if len(evenStrings[i]) == len(evenStrings[j]) {\n            return evenStrings[i] < evenStrings[j]\n        }\n        // Otherwise, sort by length\n        return len(evenStrings[i]) < len(evenStrings[j])\n    })\n\n    // Return the sorted slice\n    return evenStrings\n",
        "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n// Create a new slice to hold the even length strings\nevenStrings := []string{}\n\n// Iterate over the list and add strings of even length to evenStrings\nfor _, str := range lst {\n    if len(str)%2 == 0 {\n        evenStrings = append(evenStrings, str)\n    }\n}\n\n// Sort the evenStrings slice by length, then alphabetically\nsort.Slice(evenStrings, func(i, j int) bool {\n    if len(evenStrings[i]) == len(evenStrings[j]) {\n        return evenStrings[i] < evenStrings[j]\n    }\n    return len(evenStrings[i]) < len(evenStrings[j])\n})\n\nreturn evenStrings\n",
        "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n// Create an empty slice to store even length strings\nevenStrings := []string{}\n\n// Iterate over the list and append even length strings to the new slice\nfor _, str := range lst {\n    if len(str)%2 == 0 {\n        evenStrings = append(evenStrings, str)\n    }\n}\n\n// Sort the slice by length and then alphabetically if lengths are equal\nsort.Slice(evenStrings, func(i, j int) bool {\n    if len(evenStrings[i]) == len(evenStrings[j]) {\n        return evenStrings[i] < evenStrings[j]\n    }\n    return len(evenStrings[i]) < len(evenStrings[j])\n})\n\n// Return the sorted slice\nreturn evenStrings\n",
        "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n// Create an empty slice to store strings with even length\nvar evenLengthStrings []string\n\n// Iterate over the list and check the length of each string\nfor _, str := range lst {\n    if len(str)%2 == 0 {\n        evenLengthStrings = append(evenLengthStrings, str)\n    }\n}\n\n// Sort the list by length and then alphabetically\nsort.Slice(evenLengthStrings, func(i, j int) bool {\n    if len(evenLengthStrings[i]) == len(evenLengthStrings[j]) {\n        return evenLengthStrings[i] < evenLengthStrings[j]\n    }\n    return len(evenLengthStrings[i]) < len(evenLengthStrings[j])\n})\n\nreturn evenLengthStrings\n",
        "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n// Create a new slice to store the even length strings\nvar evenLengthStrings []string\n\n// Iterate over the input list\nfor _, str := range lst {\n    // Check if the length of the string is even\n    if len(str)%2 == 0 {\n        // If it is, append it to the new slice\n        evenLengthStrings = append(evenLengthStrings, str)\n    }\n}\n\n// Sort the slice by length and then alphabetically\nsort.Slice(evenLengthStrings, func(i, j int) bool {\n    // If the lengths are equal, sort alphabetically\n    if len(evenLengthStrings[i]) == len(evenLengthStrings[j]) {\n        return evenLengthStrings[i] < evenLengthStrings[j]\n    }\n    // Otherwise, sort by length\n    return len(evenLengthStrings[i]) < len(evenLengthStrings[j])\n})\n\n// Return the sorted slice\nreturn evenLengthStrings\n"
    ],
    [
        "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n// >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings []string, substring string) []string {\nfilteredStrings := []string{}\nfor _, str := range strings {\n    if strings.Contains(str, substring) {\n        filteredStrings = append(filteredStrings, str)\n    }\n}\nreturn filteredStrings",
        "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n// >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings []string, substring string) []string {\nfilteredStrings := []string{}\n\nfor _, str := range strings {\n    if strings.Contains(str, substring) {\n        filteredStrings = append(filteredStrings, str)\n    }\n}\n\nreturn filteredStrings\n",
        "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n// >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings []string, substring string) []string {\nfilteredStrings := []string{}\n\nfor _, str := range strings {\n    if strings.Contains(str, substring) {\n        filteredStrings = append(filteredStrings, str)\n    }\n}\n\nreturn filteredStrings\n",
        "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n// >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings []string, substring string) []string {\nfilteredStrings := []string{}\n\nfor _, str := range strings {\n    if strings.Contains(str, substring) {\n        filteredStrings = append(filteredStrings, str)\n    }\n}\n\nreturn filteredStrings\n",
        "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n// >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings []string, substring string) []string {\nfilteredStrings := []string{}\nfor _, str := range strings {\n    if strings.Contains(str, substring) {\n        filteredStrings = append(filteredStrings, str)\n    }\n}\nreturn filteredStrings"
    ],
    [
        "package closest_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunc closest_integer(value string) int {\nimport \"strconv\"\n\nnum, err := strconv.ParseFloat(value, 64)\nif err != nil {\n    fmt.Println(err)\n    return 0\n}\n\nif num < 0 {\n    return int(num - 0.5)\n}\n\nreturn int(num + 0.5)",
        "package closest_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunc closest_integer(value string) int {\nimport \"strconv\"\nimport \"math\"\n\nfloatVal, err := strconv.ParseFloat(value, 64)\nif err != nil {\n    fmt.Println(err)\n    return 0\n}\n\nif floatVal < 0 {\n    return int(math.Ceil(floatVal - 0.5))\n}\n\nreturn int(math.Floor(floatVal + 0.5))",
        "package closest_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunc closest_integer(value string) int {\nimport (\n    \"strconv\"\n    \"math\"\n)\n\nfloatValue, err := strconv.ParseFloat(value, 64)\nif err != nil {\n    fmt.Println(err)\n    return 0\n}\n\nif floatValue < 0 {\n    return int(math.Ceil(floatValue - 0.5))\n}\n\nreturn int(math.Floor(floatValue + 0.5))",
        "package closest_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunc closest_integer(value string) int {\n    num, err := strconv.ParseFloat(value, 64)\n    if err != nil {\n        fmt.Println(err)\n        return 0\n    }\n    \n    if num < 0 {\n        return int(math.Ceil(num - 0.5))\n    }\n    return int(math.Floor(num + 0.5))\n}",
        "package closest_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunc closest_integer(value string) int {\nimport (\n    \"strconv\"\n    \"math\"\n)\n\n// convert the string to a float\nfloatValue, err := strconv.ParseFloat(value, 64)\nif err != nil {\n    fmt.Println(err)\n    return 0\n}\n\n// round the float value\nrounded := math.Round(floatValue)\n\n// return the rounded value as an integer\nreturn int(rounded)"
    ],
    [
        "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string) int {\ncount := 0\nvowels := []rune{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\nfor _, char := range s {\n    for _, vowel := range vowels {\n        if char == vowel {\n            count++\n            break\n        }\n    }\n}\nif s[len(s)-1] == 'y' || s[len(s)-1] == 'Y' {\n    count++\n}\nreturn count\n}",
        "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string) int {\ncount := 0\nvowels := \"aeiouAEIOU\"\n\nfor i, char := range s {\n    if strings.ContainsRune(vowels, char) {\n        count++\n    } else if char == 'y' || char == 'Y' {\n        if i == len(s)-1 {\n            count++\n        }\n    }\n}\nreturn count\n",
        "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string) int {\ncount := 0\nvowels := map[rune]bool{\n    'a': true,\n    'e': true,\n    'i': true,\n    'o': true,\n    'u': true,\n    'A': true,\n    'E': true,\n    'I': true,\n    'O': true,\n    'U': true,\n}\n\nfor i, c := range s {\n    if _, ok := vowels[c]; ok {\n        count++\n    }\n\n    if c == 'y' || c == 'Y' {\n        if i == len(s)-1 {\n            count++\n        }\n    }\n}\n\nreturn count\n",
        "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string) int {\ncount := 0\nvowels := \"aeiouAEIOU\"\n\nfor i, char := range s {\n    if strings.ContainsRune(vowels, char) {\n        count++\n    } else if char == 'y' || char == 'Y' {\n        if i == len(s)-1 {\n            count++\n        }\n    }\n}\n\nreturn count\n",
        "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string) int {\ncount := 0\nvowels := \"aeiouAEIOU\"\n\nfor i, char := range s {\n    if strings.ContainsRune(vowels, char) {\n        count++\n    } else if char == 'y' || char == 'Y' {\n        if i == len(s)-1 {\n            count++\n        }\n    }\n}\n\nreturn count\n"
    ],
    [
        "package find_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([]string{\"name\", \"of\", \"string\"})\n// \"string\"\n// >>> find_max([]string{\"name\", \"enam\", \"game\"})\n// \"enam\"\n// >>> find_max([]string{\"aaaaaaa\", \"bb\", \"cc\"})\n// \"aaaaaaa\"\nfunc find_max(words []string) string {\n    if len(words) == 0 {\n        return \"\"\n    }\n\n    maxUniqueChars := 0\n    maxWord := words[0]\n\n    for _, word := range words {\n        uniqueChars := make(map[rune]bool)\n        for _, char := range word {\n            uniqueChars[char] = true\n        }\n\n        if len(uniqueChars) > maxUniqueChars {\n            maxUniqueChars = len(uniqueChars)\n            maxWord = word\n        } else if len(uniqueChars) == maxUniqueChars && word < maxWord {\n            maxWord = word\n        }\n    }\n\n    return maxWord\n}",
        "package find_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([]string{\"name\", \"of\", \"string\"})\n// \"string\"\n// >>> find_max([]string{\"name\", \"enam\", \"game\"})\n// \"enam\"\n// >>> find_max([]string{\"aaaaaaa\", \"bb\", \"cc\"})\n// \"aaaaaaa\"\nfunc find_max(words []string) string {\nmaxUniqueChars := 0\nvar maxWord string\n\nfor _, word := range words {\n    uniqueChars := make(map[rune]bool)\n    for _, char := range word {\n        uniqueChars[char] = true\n    }\n    if len(uniqueChars) > maxUniqueChars {\n        maxUniqueChars = len(uniqueChars)\n        maxWord = word\n    } else if len(uniqueChars) == maxUniqueChars && word < maxWord {\n        maxWord = word\n    }\n}\n\nreturn maxWord\n",
        "package find_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([]string{\"name\", \"of\", \"string\"})\n// \"string\"\n// >>> find_max([]string{\"name\", \"enam\", \"game\"})\n// \"enam\"\n// >>> find_max([]string{\"aaaaaaa\", \"bb\", \"cc\"})\n// \"aaaaaaa\"\nfunc find_max(words []string) string {\nmaxUnique := 0\nmaxWord := \"\"\nfor _, word := range words {\n    uniqueChars := make(map[rune]bool)\n    for _, char := range word {\n        uniqueChars[char] = true\n    }\n    if len(uniqueChars) > maxUnique || (len(uniqueChars) == maxUnique && word < maxWord) {\n        maxUnique = len(uniqueChars)\n        maxWord = word\n    }\n}\nreturn maxWord",
        "package find_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([]string{\"name\", \"of\", \"string\"})\n// \"string\"\n// >>> find_max([]string{\"name\", \"enam\", \"game\"})\n// \"enam\"\n// >>> find_max([]string{\"aaaaaaa\", \"bb\", \"cc\"})\n// \"aaaaaaa\"\nfunc find_max(words []string) string {\nmaxUniqueChars := 0\nmaxWord := \"\"\n\nfor _, word := range words {\n    uniqueChars := map[rune]bool{}\n    for _, char := range word {\n        uniqueChars[char] = true\n    }\n\n    if len(uniqueChars) > maxUniqueChars {\n        maxUniqueChars = len(uniqueChars)\n        maxWord = word\n    } else if len(uniqueChars) == maxUniqueChars && word < maxWord {\n        maxWord = word\n    }\n}\n\nreturn maxWord\n",
        "package find_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([]string{\"name\", \"of\", \"string\"})\n// \"string\"\n// >>> find_max([]string{\"name\", \"enam\", \"game\"})\n// \"enam\"\n// >>> find_max([]string{\"aaaaaaa\", \"bb\", \"cc\"})\n// \"aaaaaaa\"\nfunc find_max(words []string) string {\nmaxUniqueChars := 0\nlexicoFirst := \"\"\nfor _, word := range words {\n    uniqueChars := make(map[rune]bool)\n    for _, char := range word {\n        uniqueChars[char] = true\n    }\n    if len(uniqueChars) > maxUniqueChars {\n        maxUniqueChars = len(uniqueChars)\n        lexicoFirst = word\n    } else if len(uniqueChars) == maxUniqueChars && word < lexicoFirst {\n        lexicoFirst = word\n    }\n}\nreturn lexicoFirst"
    ],
    [
        "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunc change_base(x int, base int) string {\nvar result string\nfor x > 0 {\n    remainder := x % base\n    result = fmt.Sprintf(\"%d\", remainder) + result\n    x = x / base\n}\nreturn result",
        "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunc change_base(x int, base int) string {\nvar result string\nfor x > 0 {\n    remainder := x % base\n    result = fmt.Sprintf(\"%d\", remainder) + result\n    x = x / base\n}\nreturn result",
        "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunc change_base(x int, base int) string {\nvar result string\nfor x > 0 {\n    result = fmt.Sprintf(\"%d\", x%base) + result\n    x = x / base\n}\nreturn result",
        "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunc change_base(x int, base int) string {\nvar result string\nfor x > 0 {\n    result = fmt.Sprintf(\"%d\", x%base) + result\n    x = x / base\n}\nreturn result",
        "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunc change_base(x int, base int) string {\nvar result string\nfor x > 0 {\n    result = fmt.Sprintf(\"%d\", x%base) + result\n    x = x / base\n}\nreturn result"
    ],
    [
        "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int, b int, c int) bool {\n// First, sort the sides so that c is the longest side\nif a > b {\n    a, b = b, a\n}\nif a > c {\n    a, c = c, a\n}\nif b > c {\n    b, c = c, b\n}\n\n// Check if the triangle is right-angled using Pythagoras' theorem\nreturn a*a + b*b == c*c\n}",
        "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int, b int, c int) bool {\n// First, sort the sides so that c is the longest side\nif a > b {\n    a, b = b, a\n}\nif b > c {\n    b, c = c, b\n}\nif a > b {\n    a, b = b, a\n}\n\n// Then, check the Pythagorean theorem\nreturn a*a + b*b == c*c\n}",
        "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int, b int, c int) bool {\n// Sort the sides so that c is the longest\nif a > c {\n\ta, c = c, a\n}\nif b > c {\n\tb, c = c, b\n}\n\n// Check if the triangle is right-angled\nif a*a + b*b == c*c {\n\treturn true\n}\nreturn false\n}",
        "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int, b int, c int) bool {\n// First, sort the sides so that c is the longest side\nif a > c {\n    a, c = c, a\n}\nif b > c {\n    b, c = c, b\n}\n\n// Check the Pythagorean theorem: a^2 + b^2 = c^2\nreturn a*a + b*b == c*c\n}",
        "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int, b int, c int) bool {\n// First sort the sides so that c is the longest side\nif a > b {\n    a, b = b, a\n}\nif a > c {\n    a, c = c, a\n}\nif b > c {\n    b, c = c, b\n}\n\n// Check if the triangle is right-angled\nreturn c*c == a*a + b*b\n}"
    ],
    [
        "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\nletterGrades := make([]string, len(grades))\n\nfor i, grade := range grades {\n    switch {\n    case grade == 4.0:\n        letterGrades[i] = \"A+\"\n    case grade > 3.7:\n        letterGrades[i] = \"A\"\n    case grade > 3.3:\n        letterGrades[i] = \"A-\"\n    case grade > 3.0:\n        letterGrades[i] = \"B+\"\n    case grade > 2.7:\n        letterGrades[i] = \"B\"\n    case grade > 2.3:\n        letterGrades[i] = \"B-\"\n    case grade > 2.0:\n        letterGrades[i] = \"C+\"\n    case grade > 1.7:\n        letterGrades[i] = \"C\"\n    case grade > 1.3:\n        letterGrades[i] = \"C-\"\n    case grade > 1.0:\n        letterGrades[i] = \"D+\"\n    case grade > 0.7:\n        letterGrades[i] = \"D\"\n    case grade > 0.0:\n        letterGrades[i] = \"D-\"\n    default:\n        letterGrades[i] = \"E\"\n    }\n}\n\nreturn letterGrades\n",
        "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    letterGrades := make([]string, len(grades))\n    for i, grade := range grades {\n        switch {\n        case grade == 4.0:\n            letterGrades[i] = \"A+\"\n        case grade > 3.7:\n            letterGrades[i] = \"A\"\n        case grade > 3.3:\n            letterGrades[i] = \"A-\"\n        case grade > 3.0:\n            letterGrades[i] = \"B+\"\n        case grade > 2.7:\n            letterGrades[i] = \"B\"\n        case grade > 2.3:\n            letterGrades[i] = \"B-\"\n        case grade > 2.0:\n            letterGrades[i] = \"C+\"\n        case grade > 1.7:\n            letterGrades[i] = \"C\"\n        case grade > 1.3:\n            letterGrades[i] = \"C-\"\n        case grade > 1.0:\n            letterGrades[i] = \"D+\"\n        case grade > 0.7:\n            letterGrades[i] = \"D\"\n        case grade > 0.0:\n            letterGrades[i] = \"D-\"\n        default:\n            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}",
        "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\nletterGrades := make([]string, len(grades))\n\nfor i, grade := range grades {\n    switch {\n    case grade == 4.0:\n        letterGrades[i] = \"A+\"\n    case grade > 3.7:\n        letterGrades[i] = \"A\"\n    case grade > 3.3:\n        letterGrades[i] = \"A-\"\n    case grade > 3.0:\n        letterGrades[i] = \"B+\"\n    case grade > 2.7:\n        letterGrades[i] = \"B\"\n    case grade > 2.3:\n        letterGrades[i] = \"B-\"\n    case grade > 2.0:\n        letterGrades[i] = \"C+\"\n    case grade > 1.7:\n        letterGrades[i] = \"C\"\n    case grade > 1.3:\n        letterGrades[i] = \"C-\"\n    case grade > 1.0:\n        letterGrades[i] = \"D+\"\n    case grade > 0.7:\n        letterGrades[i] = \"D\"\n    case grade > 0.0:\n        letterGrades[i] = \"D-\"\n    default:\n        letterGrades[i] = \"E\"\n    }\n}\n\nreturn letterGrades\n",
        "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var letterGrades []string\n\n    for _, grade := range grades {\n        switch {\n        case grade == 4.0:\n            letterGrades = append(letterGrades, \"A+\")\n        case grade > 3.7:\n            letterGrades = append(letterGrades, \"A\")\n        case grade > 3.3:\n            letterGrades = append(letterGrades, \"A-\")\n        case grade > 3.0:\n            letterGrades = append(letterGrades, \"B+\")\n        case grade > 2.7:\n            letterGrades = append(letterGrades, \"B\")\n        case grade > 2.3:\n            letterGrades = append(letterGrades, \"B-\")\n        case grade > 2.0:\n            letterGrades = append(letterGrades, \"C+\")\n        case grade > 1.7:\n            letterGrades = append(letterGrades, \"C\")\n        case grade > 1.3:\n            letterGrades = append(letterGrades, \"C-\")\n        case grade > 1.0:\n            letterGrades = append(letterGrades, \"D+\")\n        case grade > 0.7:\n            letterGrades = append(letterGrades, \"D\")\n        case grade > 0.0:\n            letterGrades = append(letterGrades, \"D-\")\n        default:\n            letterGrades = append(letterGrades, \"E\")\n        }\n    }\n\n    return letterGrades\n}",
        "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    letterGrades := make([]string, len(grades))\n\n    for i, grade := range grades {\n        switch {\n        case grade == 4.0:\n            letterGrades[i] = \"A+\"\n        case grade > 3.7:\n            letterGrades[i] = \"A\"\n        case grade > 3.3:\n            letterGrades[i] = \"A-\"\n        case grade > 3.0:\n            letterGrades[i] = \"B+\"\n        case grade > 2.7:\n            letterGrades[i] = \"B\"\n        case grade > 2.3:\n            letterGrades[i] = \"B-\"\n        case grade > 2.0:\n            letterGrades[i] = \"C+\"\n        case grade > 1.7:\n            letterGrades[i] = \"C\"\n        case grade > 1.3:\n            letterGrades[i] = \"C-\"\n        case grade > 1.0:\n            letterGrades[i] = \"D+\"\n        case grade > 0.7:\n            letterGrades[i] = \"D\"\n        case grade > 0.0:\n            letterGrades[i] = \"D-\"\n        default:\n            letterGrades[i] = \"E\"\n        }\n    }\n\n    return letterGrades\n}"
    ],
    [
        "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\nif len(numbers) == 0 {\n    return []int{}\n}\n\ninterspersed := make([]int, 0, 2*len(numbers)-1)\nfor i, num := range numbers {\n    if i != 0 {\n        interspersed = append(interspersed, delimeter)\n    }\n    interspersed = append(interspersed, num)\n}\n\nreturn interspersed\n}",
        "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\nif len(numbers) == 0 {\n    return numbers\n}\n\ninterspersed := make([]int, 0, 2*len(numbers)-1)\nfor i, num := range numbers {\n    if i > 0 {\n        interspersed = append(interspersed, delimeter)\n    }\n    interspersed = append(interspersed, num)\n}\n\nreturn interspersed\n}",
        "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\nif len(numbers) == 0 {\n    return []int{}\n}\n\nresult := make([]int, 0, 2*len(numbers)-1)\nfor i, num := range numbers {\n    if i > 0 {\n        result = append(result, delimeter)\n    }\n    result = append(result, num)\n}\nreturn result\n",
        "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\nif len(numbers) == 0 {\n    return []int{}\n}\n\nresult := make([]int, 0, 2*len(numbers)-1)\nfor i, number := range numbers {\n    if i > 0 {\n        result = append(result, delimeter)\n    }\n    result = append(result, number)\n}\nreturn result\n",
        "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\nif len(numbers) == 0 {\n    return []int{}\n}\n\nresult := make([]int, 0, 2*len(numbers)-1)\nfor i, num := range numbers {\n    if i > 0 {\n        result = append(result, delimeter)\n    }\n    result = append(result, num)\n}\nreturn result\n"
    ],
    [
        "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            strNum := fmt.Sprintf(\"%d\", num)\n            firstDigit := strNum[0]\n            lastDigit := strNum[len(strNum)-1]\n\n            if (firstDigit == '1' || firstDigit == '3' || firstDigit == '5' || firstDigit == '7' || firstDigit == '9') &&\n                (lastDigit == '1' || lastDigit == '3' || lastDigit == '5' || lastDigit == '7' || lastDigit == '9') {\n                count++\n            }\n        }\n    }\n    return count\n}",
        "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for _, num := range nums {\n        if num > 10 && num%2 != 0 {\n            strNum := fmt.Sprintf(\"%d\", num)\n            firstDigit := strNum[0]\n            lastDigit := strNum[len(strNum)-1]\n            if firstDigit == '1' || firstDigit == '3' || firstDigit == '5' || firstDigit == '7' || firstDigit == '9' {\n                if lastDigit == '1' || lastDigit == '3' || lastDigit == '5' || lastDigit == '7' || lastDigit == '9' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}",
        "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for _, num := range nums {\n        // Check if number is greater than 10\n        if num > 10 {\n            // Convert number to string\n            strNum := fmt.Sprintf(\"%d\", num)\n            // Get first and last digits\n            firstDigit := strNum[0]\n            lastDigit := strNum[len(strNum)-1]\n            // Check if both first and last digits are odd\n            if (firstDigit == '1' || firstDigit == '3' || firstDigit == '5' || firstDigit == '7' || firstDigit == '9') &&\n               (lastDigit == '1' || lastDigit == '3' || lastDigit == '5' || lastDigit == '7' || lastDigit == '9') {\n                count++\n            }\n        }\n    }\n    return count\n}",
        "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            numStr := fmt.Sprintf(\"%d\", num)\n            firstDigit := int(numStr[0] - '0')\n            lastDigit := int(numStr[len(numStr)-1] - '0')\n            if firstDigit%2 != 0 && lastDigit%2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}",
        "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            strNum := fmt.Sprintf(\"%d\", num)\n            firstDigit := strNum[0]\n            lastDigit := strNum[len(strNum)-1]\n            if firstDigit == '1' || firstDigit == '3' || firstDigit == '5' || firstDigit == '7' || firstDigit == '9' {\n                if lastDigit == '1' || lastDigit == '3' || lastDigit == '5' || lastDigit == '7' || lastDigit == '9' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"
    ],
    [
        "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\nsum := 0\nfor i := 1; i <= n; i++ {\n    sum += i\n}\nreturn sum\n}",
        "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\nsum := 0\nfor i := 1; i <= n; i++ {\n    sum += i\n}\nreturn sum\n",
        "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\nsum := 0\nfor i := 1; i <= n; i++ {\n    sum += i\n}\nreturn sum",
        "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\nsum := 0\nfor i := 1; i <= n; i++ {\n    sum += i\n}\nreturn sum\n}",
        "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\nsum := 0\nfor i := 1; i <= n; i++ {\n    sum += i\n}\nreturn sum"
    ],
    [
        "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1, 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int {\nseen := make(map[int]bool)\nresult := []int{}\n\nfor _, number := range numbers {\n    if !seen[number] {\n        seen[number] = true\n        result = append(result, number)\n    }\n}\n\nreturn result\n}",
        "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1, 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int {\nseen := make(map[int]bool)\nresult := []int{}\n\nfor _, value := range numbers {\n    if _, ok := seen[value]; !ok {\n        seen[value] = true\n        result = append(result, value)\n    }\n}\n\nreturn result\n",
        "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1, 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int {\n    uniqueNumbers := make([]int, 0)\n    seen := make(map[int]bool)\n\n    for _, number := range numbers {\n        if _, ok := seen[number]; !ok {\n            uniqueNumbers = append(uniqueNumbers, number)\n            seen[number] = true\n        }\n    }\n\n    return uniqueNumbers\n}",
        "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1, 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int {\nseen := make(map[int]bool)\nresult := []int{}\n\nfor _, num := range numbers {\n    if !seen[num] {\n        seen[num] = true\n        result = append(result, num)\n    }\n}\n\nreturn result\n",
        "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1, 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int {\nseen := make(map[int]bool)\nresult := []int{}\n\nfor _, value := range numbers {\n    if _, ok := seen[value]; !ok {\n        seen[value] = true\n        result = append(result, value)\n    }\n}\n\nreturn result\n"
    ],
    [
        "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n// Initialize an empty slice to store the even numbers\nvar evenNumbers []int\n\n// If a is greater than b, swap them\nif a > b {\n\ta, b = b, a\n}\n\n// Iterate from a to b\nfor i := a; i <= b; i++ {\n\t// Check if the number is even\n\tif i%2 == 0 {\n\t\t// If the number is even, append it to the slice\n\t\tevenNumbers = append(evenNumbers, i)\n\t}\n}\n\n// Return the slice of even numbers\nreturn evenNumbers\n",
        "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var start, end int\n    var result []int\n\n    if a < b {\n        start = a\n        end = b\n    } else {\n        start = b\n        end = a\n    }\n\n    for i := start; i <= end; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n\n    return result\n}",
        "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var start, end int\n    if a > b {\n        start = b\n        end = a\n    } else {\n        start = a\n        end = b\n    }\n\n    var result []int\n    for i := start; i <= end; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}",
        "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\nvar result []int\n\nif a > b {\n    a, b = b, a\n}\n\nfor i := a; i <= b; i++ {\n    if i%2 == 0 {\n        result = append(result, i)\n    }\n}\n\nreturn result",
        "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n\n    var result []int\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}"
    ],
    [
        "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([]int{1, 2, 3, 2, 3, 4, 2})\n// []int{1, 2, 3, 3, 3, 4, 4}\nfunc rolling_max(numbers []int) []int {\nresult := make([]int, len(numbers))\nmax := numbers[0]\n\nfor i, num := range numbers {\n    if num > max {\n        max = num\n    }\n    result[i] = max\n}\n\nreturn result\n",
        "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([]int{1, 2, 3, 2, 3, 4, 2})\n// []int{1, 2, 3, 3, 3, 4, 4}\nfunc rolling_max(numbers []int) []int {\nresult := make([]int, len(numbers))\nmax := numbers[0]\n\nfor i, num := range numbers {\n    if num > max {\n        max = num\n    }\n    result[i] = max\n}\n\nreturn result",
        "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([]int{1, 2, 3, 2, 3, 4, 2})\n// []int{1, 2, 3, 3, 3, 4, 4}\nfunc rolling_max(numbers []int) []int {\nresult := make([]int, len(numbers))\nmax := numbers[0]\nfor i, num := range numbers {\n    if num > max {\n        max = num\n    }\n    result[i] = max\n}\nreturn result",
        "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([]int{1, 2, 3, 2, 3, 4, 2})\n// []int{1, 2, 3, 3, 3, 4, 4}\nfunc rolling_max(numbers []int) []int {\nresult := make([]int, len(numbers))\nmax := numbers[0]\n\nfor i, num := range numbers {\n    if num > max {\n        max = num\n    }\n    result[i] = max\n}\n\nreturn result\n",
        "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([]int{1, 2, 3, 2, 3, 4, 2})\n// []int{1, 2, 3, 3, 3, 4, 4}\nfunc rolling_max(numbers []int) []int {\nresult := make([]int, len(numbers))\nmax := numbers[0]\n\nfor i, number := range numbers {\n    if number > max {\n        max = number\n    }\n    result[i] = max\n}\n\nreturn result\n"
    ],
    [
        "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2, 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations []int) bool {\nbalance := 0\nfor _, operation := range operations {\n    balance += operation\n    if balance < 0 {\n        return true\n    }\n}\nreturn false",
        "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2, 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations []int) bool {\nbalance := 0\nfor _, operation := range operations {\n    balance += operation\n    if balance < 0 {\n        return true\n    }\n}\nreturn false\n}",
        "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2, 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations []int) bool {\nbalance := 0\nfor _, operation := range operations {\n    balance += operation\n    if balance < 0 {\n        return true\n    }\n}\nreturn false",
        "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2, 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations []int) bool {\nbalance := 0\nfor _, operation := range operations {\n    balance += operation\n    if balance < 0 {\n        return true\n    }\n}\nreturn false\n}",
        "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2, 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations []int) bool {\nbalance := 0\nfor _, operation := range operations {\n    balance += operation\n    if balance < 0 {\n        return true\n    }\n}\nreturn false\n}"
    ],
    [
        "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([]int{4, 1, 2, 2, 3, 1})\n// 2\n// >>> search([]int{1, 2, 2, 3, 3, 3, 4, 4, 4})\n// 3\n// >>> search([]int{5, 5, 4, 4, 4})\n// -1\nfunc search(lst []int) int {\n// Create a map to store the frequency of each integer\nfreqMap := make(map[int]int)\n\n// Find the frequency of each integer\nfor _, num := range lst {\n    freqMap[num]++\n}\n\n// Initialize the result as -1\nresult := -1\n\n// Iterate through the map\nfor num, freq := range freqMap {\n    // If the frequency is greater than or equal to the integer itself\n    // and the integer is greater than the current result, update the result\n    if freq >= num && num > result {\n        result = num\n    }\n}\n\nreturn result",
        "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([]int{4, 1, 2, 2, 3, 1})\n// 2\n// >>> search([]int{1, 2, 2, 3, 3, 3, 4, 4, 4})\n// 3\n// >>> search([]int{5, 5, 4, 4, 4})\n// -1\nfunc search(lst []int) int {\n    freq := make(map[int]int)\n\n    for _, val := range lst {\n        freq[val]++\n    }\n\n    max := -1\n    for key, value := range freq {\n        if key <= value && key > max {\n            max = key\n        }\n    }\n\n    return max\n}",
        "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([]int{4, 1, 2, 2, 3, 1})\n// 2\n// >>> search([]int{1, 2, 2, 3, 3, 3, 4, 4, 4})\n// 3\n// >>> search([]int{5, 5, 4, 4, 4})\n// -1\nfunc search(lst []int) int {\n    frequencyMap := make(map[int]int)\n\n    for _, num := range lst {\n        frequencyMap[num]++\n    }\n\n    maxNum := -1\n    for num, freq := range frequencyMap {\n        if num <= freq && num > maxNum {\n            maxNum = num\n        }\n    }\n\n    return maxNum\n}",
        "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([]int{4, 1, 2, 2, 3, 1})\n// 2\n// >>> search([]int{1, 2, 2, 3, 3, 3, 4, 4, 4})\n// 3\n// >>> search([]int{5, 5, 4, 4, 4})\n// -1\nfunc search(lst []int) int {\n    // Create a map to store the frequency of each integer\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v]++\n    }\n\n    // Initialize the result as -1\n    result := -1\n\n    // Iterate over the frequency map\n    for k, v := range freqMap {\n        // Check if the frequency is greater than or equal to the integer itself\n        if k <= v && k > result {\n            // Update the result\n            result = k\n        }\n    }\n\n    return result\n}",
        "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([]int{4, 1, 2, 2, 3, 1})\n// 2\n// >>> search([]int{1, 2, 2, 3, 3, 3, 4, 4, 4})\n// 3\n// >>> search([]int{5, 5, 4, 4, 4})\n// -1\nfunc search(lst []int) int {\n    // Create a map to store the frequency of each integer\n    freqMap := make(map[int]int)\n\n    // Iterate through the list and update the frequency map\n    for _, num := range lst {\n        freqMap[num]++\n    }\n\n    // Initialize the result as -1\n    result := -1\n\n    // Iterate through the frequency map\n    for num, freq := range freqMap {\n        // Check if the frequency is greater than or equal to the number itself\n        if num <= freq && num > result {\n            // Update the result\n            result = num\n        }\n    }\n\n    // Return the result\n    return result\n}"
    ],
    [
        "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets string) bool {\n    count := 0\n    for _, bracket := range brackets {\n        if bracket == '(' {\n            count++\n        } else if bracket == ')' {\n            count--\n        }\n        if count < 0 {\n            return false\n        }\n    }\n    return count == 0\n}",
        "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets string) bool {\n    count := 0\n    for _, bracket := range brackets {\n        if bracket == '(' {\n            count++\n        } else if bracket == ')' {\n            count--\n        }\n        if count < 0 {\n            return false\n        }\n    }\n    return count == 0\n}",
        "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets string) bool {\ncount := 0\n\nfor _, bracket := range brackets {\n    if bracket == '(' {\n        count++\n    } else if bracket == ')' {\n        count--\n    }\n\n    if count < 0 {\n        return false\n    }\n}\n\nreturn count == 0\n}",
        "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets string) bool {\ncount := 0\nfor _, bracket := range brackets {\n\tif bracket == '(' {\n\t\tcount++\n\t} else if bracket == ')' {\n\t\tcount--\n\t}\n\tif count < 0 {\n\t\treturn false\n\t}\n}\nreturn count == 0\n",
        "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets string) bool {\ncount := 0\nfor _, r := range brackets {\n    switch r {\n    case '(':\n        count++\n    case ')':\n        count--\n    }\n    if count < 0 {\n        return false\n    }\n}\nreturn count == 0\n}"
    ],
    [
        "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3, 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evenIndices := make([]int, 0)\n    for i := 0; i < len(l); i += 2 {\n        evenIndices = append(evenIndices, l[i])\n    }\n\n    sort.Ints(evenIndices)\n\n    for i, j := 0, 0; i < len(l); i += 2 {\n        l[i] = evenIndices[j]\n        j++\n    }\n\n    return l\n}",
        "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3, 6, 5, 4}\nfunc sort_even(l []int) []int {\n// create a slice to store even index elements\nevenIndexElements := []int{}\nfor i, v := range l {\n    if i%2 == 0 {\n        evenIndexElements = append(evenIndexElements, v)\n    }\n}\n\n// sort the even index elements\nsort.Ints(evenIndexElements)\n\n// replace the elements at even indices with sorted elements\nj := 0\nfor i := range l {\n    if i%2 == 0 {\n        l[i] = evenIndexElements[j]\n        j++\n    }\n}\n\nreturn l\n}",
        "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3, 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evenIndices := []int{}\n    for i := 0; i < len(l); i += 2 {\n        evenIndices = append(evenIndices, l[i])\n    }\n\n    sort.Ints(evenIndices)\n\n    for i, j := 0, 0; i < len(l); i += 2 {\n        l[i] = evenIndices[j]\n        j++\n    }\n\n    return l\n}",
        "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3, 6, 5, 4}\nfunc sort_even(l []int) []int {\nevenIndices := []int{}\nfor i, v := range l {\n    if i%2 == 0 {\n        evenIndices = append(evenIndices, v)\n    }\n}\n\nsort.Ints(evenIndices)\n\nj := 0\nfor i := range l {\n    if i%2 == 0 {\n        l[i] = evenIndices[j]\n        j++\n    }\n}\n\nreturn l\n",
        "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3, 6, 5, 4}\nfunc sort_even(l []int) []int {\n// create a slice to hold the even indexed elements\nevenIndexed := []int{}\nfor i := 0; i < len(l); i += 2 {\n    evenIndexed = append(evenIndexed, l[i])\n}\n\n// sort the even indexed elements\nsort.Ints(evenIndexed)\n\n// replace the even indexed elements in the original slice with the sorted elements\nj := 0\nfor i := 0; i < len(l); i += 2 {\n    l[i] = evenIndexed[j]\n    j++\n}\n\nreturn l\n}"
    ],
    [
        "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunc same_chars(s0 string, s1 string) bool {\n// Create maps to count the occurrences of each character in both strings\n    charCount0 := make(map[rune]int)\n    charCount1 := make(map[rune]int)\n\n    // Count the occurrences of each character in the first string\n    for _, char := range s0 {\n        charCount0[char]++\n    }\n\n    // Count the occurrences of each character in the second string\n    for _, char := range s1 {\n        charCount1[char]++\n    }\n\n    // Compare the two maps. If they are not the same, return false.\n    for char, count := range charCount0 {\n        if charCount1[char] != count {\n            return false\n        }\n    }\n\n    // Also ensure every character in the second string is in the first string\n    for char, count := range charCount1 {\n        if charCount0[char] != count {\n            return false\n        }\n    }\n\n    // If we've made it this far, the strings have the same characters.\n    return true\n}",
        "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunc same_chars(s0 string, s1 string) bool {\n// Create a map to store the frequency of characters in s0\n    charCount := make(map[rune]int)\n    for _, char := range s0 {\n        charCount[char]++\n    }\n\n    // Decrement the count of each character in s1 from the map\n    for _, char := range s1 {\n        if _, ok := charCount[char]; ok {\n            charCount[char]--\n        } else {\n            // If the character is not in the map, return false\n            return false\n        }\n    }\n\n    // Check if all counts in the map are zero\n    for _, count := range charCount {\n        if count != 0 {\n            return false\n        }\n    }\n\n    // If all counts are zero, the strings have the same characters\n    return true\n",
        "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunc same_chars(s0 string, s1 string) bool {\nm0 := make(map[rune]int)\nm1 := make(map[rune]int)\n\nfor _, r := range s0 {\n    m0[r]++\n}\n\nfor _, r := range s1 {\n    m1[r]++\n}\n\nif len(m0) != len(m1) {\n    return false\n}\n\nfor k, v := range m0 {\n    if m1[k] != v {\n        return false\n    }\n}\n\nreturn true",
        "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunc same_chars(s0 string, s1 string) bool {\n// Create maps to store character frequencies\ncharCount0 := make(map[rune]int)\ncharCount1 := make(map[rune]int)\n\n// Count character frequencies in both strings\nfor _, char := range s0 {\n    charCount0[char]++\n}\nfor _, char := range s1 {\n    charCount1[char]++\n}\n\n// Compare the maps\nfor char, count0 := range charCount0 {\n    count1, ok := charCount1[char]\n    if !ok || count0 != count1 {\n        return false\n    }\n}\n\n// Check if there are any extra characters in the second string\nfor char := range charCount1 {\n    _, ok := charCount0[char]\n    if !ok {\n        return false\n    }\n}\n\nreturn true\n",
        "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunc same_chars(s0 string, s1 string) bool {\n// Create a map to count the frequency of each character in the strings\n    charCount := make(map[rune]int)\n\n    // Iterate over the first string, incrementing the count for each character\n    for _, char := range s0 {\n        charCount[char]++\n    }\n\n    // Iterate over the second string, decrementing the count for each character\n    for _, char := range s1 {\n        charCount[char]--\n    }\n\n    // If the count for any character is not zero, the strings do not have the same characters\n    for _, count := range charCount {\n        if count != 0 {\n            return false\n        }\n    }\n\n    // If we've made it this far, the strings have the same characters\n    return true\n}"
    ],
    [
        "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets string) bool {\n    count := 0\n    for _, bracket := range brackets {\n        if bracket == '<' {\n            count++\n        } else if bracket == '>' {\n            count--\n        }\n        if count < 0 {\n            return false\n        }\n    }\n    return count == 0\n}",
        "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets string) bool {\n    count := 0\n    for _, bracket := range brackets {\n        if bracket == '<' {\n            count++\n        } else if bracket == '>' {\n            count--\n            if count < 0 {\n                return false\n            }\n        }\n    }\n    return count == 0\n}",
        "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets string) bool {\ncount := 0\nfor _, bracket := range brackets {\n    if bracket == '<' {\n        count++\n    } else if bracket == '>' {\n        count--\n    }\n\n    if count < 0 {\n        return false\n    }\n}\n\nreturn count == 0\n}",
        "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets string) bool {\n    count := 0\n    for _, bracket := range brackets {\n        if bracket == '<' {\n            count++\n        } else if bracket == '>' {\n            count--\n            if count < 0 {\n                return false\n            }\n        }\n    }\n    return count == 0\n}",
        "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets string) bool {\ncount := 0\nfor _, bracket := range brackets {\n    if bracket == '<' {\n        count++\n    } else if bracket == '>' {\n        count--\n    }\n    if count < 0 {\n        return false\n    }\n}\nreturn count == 0\n}"
    ]
]