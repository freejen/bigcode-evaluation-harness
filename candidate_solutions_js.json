[
    [
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\nreturn string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\nreturn string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\nreturn string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\nreturn string.length;\n}",
        "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\nreturn string.length;\n}"
    ],
    [
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\nlet encrypted = '';\nfor(let i = 0; i < s.length; i++){\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 97 && ascii <= 122){\n        encrypted += String.fromCharCode((ascii - 97 + 4) % 26 + 97);\n    } else if(ascii >= 65 && ascii <= 90){\n        encrypted += String.fromCharCode((ascii - 65 + 4) % 26 + 65);\n    } else {\n        encrypted += s.charAt(i);\n    }\n}\nreturn encrypted;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\nlet encrypted = '';\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){\n      encrypted += String.fromCharCode((charCode - 65 + 4) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 122){\n      encrypted += String.fromCharCode((charCode - 97 + 4) % 26 + 97);\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\nlet result = '';\nfor(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 97 && charCode <= 122){\n        result += String.fromCharCode((charCode - 97 + 4) % 26 + 97);\n    } else if(charCode >= 65 && charCode <= 90){\n        result += String.fromCharCode((charCode - 65 + 4) % 26 + 65);\n    } else {\n        result += s[i];\n    }\n}\nreturn result;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\nlet encrypted = '';\nfor(let i = 0; i < s.length; i++){\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 97 && ascii <= 122){\n        let newAscii = ((ascii - 97 + 4) % 26) + 97;\n        encrypted += String.fromCharCode(newAscii);\n    } else if(ascii >= 65 && ascii <= 90){\n        let newAscii = ((ascii - 65 + 4) % 26) + 65;\n        encrypted += String.fromCharCode(newAscii);\n    } else {\n        encrypted += s[i];\n    }\n}\nreturn encrypted;\n}",
        "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\nlet result = '';\n  for(let i=0; i<s.length; i++){\n    let ascii = s.charCodeAt(i);\n    if(ascii >= 65 && ascii <= 90){\n      result += String.fromCharCode((ascii - 65 + 4) % 26 + 65);\n    }else if(ascii >= 97 && ascii <= 122){\n      result += String.fromCharCode((ascii - 97 + 4) % 26 + 97);\n    }else{\n      result += s[i];\n    }\n  }\n  return result;\n}"
    ],
    [
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\nif (Object.keys(dict).length === 0) {\n    return false;\n}\n\nlet allLowerCase = true;\nlet allUpperCase = true;\n\nfor (let key in dict) {\n    if (typeof key !== 'string') {\n        return false;\n    }\n\n    if (key !== key.toLowerCase()) {\n        allLowerCase = false;\n    }\n\n    if (key !== key.toUpperCase()) {\n        allUpperCase = false;\n    }\n}\n\nreturn allLowerCase || allUpperCase;\n}",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\nlet keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return false;\n  }\n  let isLower = keys.every(key => key === key.toLowerCase());\n  let isUpper = keys.every(key => key === key.toUpperCase());\n  return isLower || isUpper;\n}",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\nif (Object.keys(dict).length === 0) return false;\n\nlet allLower = true;\nlet allUpper = true;\n\nfor (let key in dict) {\n    if (typeof key !== 'string') return false;\n    if (key !== key.toLowerCase()) allLower = false;\n    if (key !== key.toUpperCase()) allUpper = false;\n}\n\nreturn allLower || allUpper;",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\nif (Object.keys(dict).length === 0) {\n    return false;\n}\n\nlet allLower = true;\nlet allUpper = true;\n\nfor (let key in dict) {\n    if (typeof key !== 'string') {\n        return false;\n    }\n    if (key !== key.toLowerCase()) {\n        allLower = false;\n    }\n    if (key !== key.toUpperCase()) {\n        allUpper = false;\n    }\n}\n\nreturn allLower || allUpper;",
        "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\nif (Object.keys(dict).length === 0) return false;\nlet isLower = true;\nlet isUpper = true;\nfor (let key in dict) {\n    if (typeof key !== 'string') return false;\n    if (key !== key.toLowerCase()) isLower = false;\n    if (key !== key.toUpperCase()) isUpper = false;\n}\nreturn isLower || isUpper;\n}"
    ],
    [
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n        sum += lst[i];\n    }\n}\nreturn sum;"
    ],
    [
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n// First, replace all occurrences of 2 or more consecutive spaces with a dash\ntext = text.replace(/ {2,}/g, '-');\n\n// Then, replace all remaining spaces with underscores\ntext = text.replace(/ /g, '_');\n\nreturn text;",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n// First, replace all occurrences of more than 2 spaces with a dash\ntext = text.replace(/ {3,}/g, '-');\n\n// Then, replace all remaining spaces with underscores\ntext = text.replace(/ /g, '_');\n\nreturn text;",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n// First, replace all consecutive spaces with -\ntext = text.replace(/\\s{2,}/g, \"-\");\n// Then, replace all remaining spaces with _\ntext = text.replace(/\\s/g, \"_\");\nreturn text;",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n// First, replace all occurrences of 2 or more spaces with a dash\ntext = text.replace(/ {2,}/g, \"-\");\n\n// Then, replace all remaining spaces with underscores\ntext = text.replace(/ /g, \"_\");\n\nreturn text;",
        "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\nlet result = text.replace(/\\s{2,}/g, '-').replace(/\\s/g, '_');\nreturn result;"
    ],
    [
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\nif (n === 0) return 0;\nif (n === 1) return 0;\nif (n === 2) return 1;\n\nlet fibfibArr = [0, 0, 1];\n\nfor (let i = 3; i <= n; i++) {\n    fibfibArr[i] = fibfibArr[i - 1] + fibfibArr[i - 2] + fibfibArr[i - 3];\n}\n\nreturn fibfibArr[n];\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\nif (n == 0) return 0;\nif (n == 1) return 0;\nif (n == 2) return 1;\n\nlet fibfibArray = [0, 0, 1];\n\nfor(let i = 3; i <= n; i++){\n    fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n}\n\nreturn fibfibArray[n];\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\nif (n === 0) return 0;\nif (n === 1) return 0;\nif (n === 2) return 1;\n\nlet fibfib = [0, 0, 1];\n\nfor (let i = 3; i <= n; i++) {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n}\n\nreturn fibfib[n];\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\nif (n <= 1) {\n    return 0;\n} else if (n == 2) {\n    return 1;\n} else {\n    let fibfib = [0, 0, 1];\n    for (let i = 3; i <= n; i++) {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n    }\n    return fibfib[n];\n}\n}",
        "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\nif (n === 0) return 0;\nif (n === 1) return 0;\nif (n === 2) return 1;\n\nlet fibfibArr = [0, 0, 1];\n\nfor(let i = 3; i <= n; i++) {\n    fibfibArr[i] = fibfibArr[i-1] + fibfibArr[i-2] + fibfibArr[i-3];\n}\n\nreturn fibfibArr[n];\n}"
    ],
    [
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] % 1 === 0 && lst[i] % 2 !== 0){\n        sum += Math.pow(lst[i], 2);\n    }\n}\nreturn sum;",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] % 2 != 0){\n        sum += lst[i] * lst[i];\n    }\n}\nreturn sum;",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] % 2 !== 0){\n        sum += Math.pow(lst[i], 2);\n    }\n}\nreturn sum;",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] % 2 !== 0){\n        sum += Math.pow(lst[i], 2);\n    }\n}\nreturn sum;",
        "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] % 2 !== 0){\n        sum += lst[i] * lst[i];\n    }\n}\nreturn sum;"
    ],
    [
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\nreturn values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\nreturn values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\nreturn values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\nreturn values.filter(value => Number.isInteger(value));\n}",
        "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\nreturn values.filter(value => Number.isInteger(value));\n}"
    ],
    [
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n// The number of collisions would be equal to the number of cars in one direction as each car will collide with a car from the opposite direction.\n  return n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n// Since every car moving left to right will collide with a car moving right to left, \n// the number of collisions will be equal to the number of cars in one direction.\n// Hence, the number of collisions will be n.\n\nreturn n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n// Since each car moving left to right will collide with each car moving right to left, \n// the total number of collisions will be n*n.\nreturn n*n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n// Since each car moving from left to right will definitely collide with each car moving from right to left, \n// the total number of collisions will be the product of the number of cars moving in each direction. \n// In this case, it's n*n or n^2.\n\nreturn n*n;\n}",
        "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n// Since each car moving from left to right will definitely collide with a car moving from right to left, \n// the total number of collisions will be equal to the number of cars moving in either direction.\n// Therefore, we simply return n as the result.\nreturn n;\n}"
    ],
    [
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\nlet notes = music_string.split(\" \");\nlet beats = [];\n\nfor (let note of notes) {\n    switch(note) {\n        case 'o':\n            beats.push(4);\n            break;\n        case 'o|':\n            beats.push(2);\n            break;\n        case '.|':\n            beats.push(1);\n            break;\n    }\n}\n\nreturn beats;",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\nlet notes = music_string.split(' ');\nlet beats = [];\n\nfor(let note of notes) {\n    switch(note) {\n        case 'o':\n            beats.push(4);\n            break;\n        case 'o|':\n            beats.push(2);\n            break;\n        case '.|':\n            beats.push(1);\n            break;\n    }\n}\n\nreturn beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\nlet notes = music_string.split(\" \");\nlet beats = [];\n\nfor(let i=0; i<notes.length; i++){\n    if(notes[i] === 'o'){\n        beats.push(4);\n    } else if(notes[i] === 'o|'){\n        beats.push(2);\n    } else if(notes[i] === '.|'){\n        beats.push(1);\n    }\n}\nreturn beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\nlet notes = music_string.split(\" \");\nlet beats = [];\n\nfor(let i = 0; i < notes.length; i++){\n    switch(notes[i]){\n        case 'o':\n            beats.push(4);\n            break;\n        case 'o|':\n            beats.push(2);\n            break;\n        case '.|':\n            beats.push(1);\n            break;\n    }\n}\n\nreturn beats;\n}",
        "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\nlet musicArray = music_string.split(\" \");\nlet beatsArray = [];\n\nfor (let i = 0; i < musicArray.length; i++) {\n  switch (musicArray[i]) {\n    case 'o':\n      beatsArray.push(4);\n      break;\n    case 'o|':\n      beatsArray.push(2);\n      break;\n    case '.|':\n      beatsArray.push(1);\n      break;\n  }\n}\n\nreturn beatsArray;\n}"
    ],
    [
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\nreturn \"db\" + decimal.toString(2) + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\nreturn \"db\" + decimal.toString(2) + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\nreturn \"db\" + decimal.toString(2) + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\nreturn \"db\" + decimal.toString(2) + \"db\";\n}",
        "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\nreturn \"db\" + decimal.toString(2) + \"db\";\n}"
    ],
    [
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\nlet prefixes = [];\nfor (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n}\nreturn prefixes;",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\nlet prefixes = [];\nfor(let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n}\nreturn prefixes;",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\nlet prefixes = [];\nfor (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n}\nreturn prefixes;",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\nlet prefixes = [];\nfor (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n}\nreturn prefixes;",
        "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\nlet prefixes = [];\nfor(let i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n}\nreturn prefixes;"
    ],
    [
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\nreturn x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\nreturn x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\nreturn x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\nreturn x + y;\n}",
        "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\nreturn x + y;\n}"
    ],
    [
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\nlet totalEaten;\nlet remainingCarrots;\n\nif (remaining >= need) {\n  totalEaten = number + need;\n  remainingCarrots = remaining - need;\n} else {\n  totalEaten = number + remaining;\n  remainingCarrots = 0;\n}\n\nreturn [totalEaten, remainingCarrots];\n}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\nlet eaten = number;\nlet left = remaining;\n\nif(remaining >= need) {\n    eaten += need;\n    left -= need;\n} else {\n    eaten += remaining;\n    left = 0;\n}\n\nreturn [eaten, left];}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\nlet carrotsToEat = Math.min(need, remaining);\nlet totalEaten = number + carrotsToEat;\nlet remainingCarrots = remaining - carrotsToEat;\n\nreturn [totalEaten, remainingCarrots];",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\nlet totalEaten = number;\nlet remainingCarrots = remaining;\n\nif (remaining >= need) {\n  totalEaten += need;\n  remainingCarrots -= need;\n} else {\n  totalEaten += remaining;\n  remainingCarrots = 0;\n}\n\nreturn [totalEaten, remainingCarrots];\n}",
        "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\nvar eatMore = Math.min(need, remaining);\nvar totalEaten = number + eatMore;\nvar left = remaining - eatMore;\nreturn [totalEaten, left];"
    ],
    [
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\nlet totalWater = 0;\n\n// Calculate total units of water in all wells\nfor(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[i].length; j++){\n        if(grid[i][j] === 1){\n            totalWater++;\n        }\n    }\n}\n\n// Calculate number of times to lower the buckets\nlet times = Math.ceil(totalWater / capacity);\n\nreturn times;",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\nlet totalWater = 0;\n\n// Count the total units of water in all wells\nfor(let i=0; i<grid.length; i++){\n    for(let j=0; j<grid[i].length; j++){\n        if(grid[i][j] === 1) totalWater += 1;\n    }\n}\n\n// Calculate the number of times to lower the buckets\nlet bucketLowers = Math.ceil(totalWater / capacity);\n\nreturn bucketLowers;",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n// Initialize a variable to count the number of times you need to lower the buckets\nlet count = 0;\n\n// Iterate over each column of the grid\nfor (let j = 0; j < grid[0].length; j++) {\n    // Initialize a variable to count the total water in the current column\n    let totalWater = 0;\n    \n    // Iterate over each row in the current column\n    for (let i = 0; i < grid.length; i++) {\n        // If the current cell contains water, add it to the total water count\n        if (grid[i][j] === 1) {\n            totalWater++;\n        }\n    }\n    \n    // Add the number of times you need to lower the bucket to empty the current well to the total count\n    // This is the total water in the well divided by the bucket capacity, rounded up to the nearest integer\n    count += Math.ceil(totalWater / capacity);\n}\n\n// Return the total count\nreturn count;",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n// Initialize a variable to keep count of the number of times we lower the buckets\nlet count = 0;\n\n// Iterate over the columns of the grid\nfor(let j = 0; j < grid[0].length; j++) {\n    // Initialize a variable to keep track of the water in the current well\n    let well = 0;\n    \n    // Iterate over the rows of the grid\n    for(let i = 0; i < grid.length; i++) {\n        // Add the amount of water in the current cell to the well\n        well += grid[i][j];\n    }\n    \n    // Increase the count by the number of times we need to lower the bucket to empty the well\n    // We use Math.ceil because we can't lower the bucket a fraction of a time\n    count += Math.ceil(well / capacity);\n}\n\n// Return the count\nreturn count;",
        "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\nlet totalWater = 0;\n\nfor (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] === 1) {\n            totalWater++;\n        }\n    }\n}\n\nreturn Math.ceil(totalWater / capacity);"
    ],
    [
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\nlet result = operand[0];\n\nfor(let i = 0; i < operator.length; i++){\n    switch(operator[i]){\n        case '+':\n            result += operand[i+1];\n            break;\n        case '-':\n            result -= operand[i+1];\n            break;\n        case '*':\n            result *= operand[i+1];\n            break;\n        case '//':\n            result = Math.floor(result / operand[i+1]);\n            break;\n        case '**':\n            result = Math.pow(result, operand[i+1]);\n            break;\n    }\n}\n\nreturn result;\n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\nlet result = operand[0];\nfor(let i = 0; i < operator.length; i++){\n    switch(operator[i]){\n        case '+':\n            result += operand[i+1];\n            break;\n        case '-':\n            result -= operand[i+1];\n            break;\n        case '*':\n            result *= operand[i+1];\n            break;\n        case '//':\n            result = Math.floor(result / operand[i+1]);\n            break;\n        case '**':\n            result = Math.pow(result, operand[i+1]);\n            break;\n    }\n}\nreturn result;",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\nlet result = operand[0];\nfor(let i = 0; i < operator.length; i++){\n    switch(operator[i]){\n        case '+':\n            result += operand[i+1];\n            break;\n        case '-':\n            result -= operand[i+1];\n            break;\n        case '*':\n            result *= operand[i+1];\n            break;\n        case '//':\n            result = Math.floor(result / operand[i+1]);\n            break;\n        case '**':\n            result = Math.pow(result, operand[i+1]);\n            break;\n    }\n}\nreturn result;\n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\nlet expression = operand[0];\nfor(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === \"//\"){\n        expression = Math.floor(expression / operand[i]);\n    } else if(operator[i-1] === \"**\"){\n        expression = Math.pow(expression, operand[i]);\n    } else {\n        expression = eval(expression + operator[i-1] + operand[i]);\n    }\n}\nreturn expression;  \n}",
        "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\nlet expression = operand[0];\n\nfor(let i = 0; i < operator.length; i++) {\n    if(operator[i] === '//') {\n        expression = Math.floor(expression / operand[i+1]);\n    } else if(operator[i] === '**') {\n        expression = Math.pow(expression, operand[i+1]);\n    } else {\n        expression = eval(expression + operator[i] + operand[i+1]);\n    }\n}\n\nreturn expression;"
    ],
    [
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\nreturn string.split('').map(function(char) {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n}).join('');}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\nreturn string.split('').map(function(char) {\n    return (char === char.toUpperCase()) ? char.toLowerCase() : char.toUpperCase();\n}).join('');}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\nreturn string.split('').map(function(char) {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n}).join('');}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\nreturn string.split('').map(function(char) {\n    return (char === char.toUpperCase()) ? char.toLowerCase() : char.toUpperCase();\n}).join('');}",
        "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\nreturn string.split('').map(function(char) {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n}).join('');}"
    ],
    [
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n// filter the array to include only numbers between 1 and 9\narr = arr.filter(num => num >= 1 && num <= 9);\n\n// sort the array in descending order\narr.sort((a, b) => b - a);\n\n// map each number to its corresponding name\narr = arr.map(num => {\n    switch(num) {\n        case 1:\n            return \"One\";\n        case 2:\n            return \"Two\";\n        case 3:\n            return \"Three\";\n        case 4:\n            return \"Four\";\n        case 5:\n            return \"Five\";\n        case 6:\n            return \"Six\";\n        case 7:\n            return \"Seven\";\n        case 8:\n            return \"Eight\";\n        case 9:\n            return \"Nine\";\n    }\n});\n\nreturn arr;",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n// Create an array of number names\nlet numberNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n\n// Filter the array to only include numbers between 1 and 9 inclusive\nlet filteredArr = arr.filter(num => num >= 1 && num <= 9);\n\n// Sort the array in reverse order\nfilteredArr.sort((a, b) => b - a);\n\n// Map each number to its corresponding name\nlet resultArr = filteredArr.map(num => numberNames[num - 1]);\n\nreturn resultArr;",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n// Filter the array to include only numbers between 1 and 9\narr = arr.filter(num => num >= 1 && num <= 9);\n\n// Sort the array in ascending order and then reverse it\narr.sort((a, b) => a - b).reverse();\n\n// Create a mapping of numbers to their corresponding names\nconst numToName = {\n  1: \"One\",\n  2: \"Two\",\n  3: \"Three\",\n  4: \"Four\",\n  5: \"Five\",\n  6: \"Six\",\n  7: \"Seven\",\n  8: \"Eight\",\n  9: \"Nine\"\n};\n\n// Replace each number in the array with its corresponding name\nreturn arr.map(num => numToName[num]);\n}",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n// Filter the array to only include numbers between 1 and 9\nlet filteredArr = arr.filter(num => num >= 1 && num <= 9);\n\n// Sort the array in descending order\nfilteredArr.sort((a, b) => b - a);\n\n// Map the numbers to their corresponding names\nlet namedArr = filteredArr.map(num => {\n    switch(num) {\n        case 1:\n            return \"One\";\n        case 2:\n            return \"Two\";\n        case 3:\n            return \"Three\";\n        case 4:\n            return \"Four\";\n        case 5:\n            return \"Five\";\n        case 6:\n            return \"Six\";\n        case 7:\n            return \"Seven\";\n        case 8:\n            return \"Eight\";\n        case 9:\n            return \"Nine\";\n        default:\n            return num;\n    }\n});\n\nreturn namedArr;",
        "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n// Filter the array to include only numbers between 1 and 9\n  arr = arr.filter(num => num >= 1 && num <= 9);\n\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n\n  // Create a map of numbers to their corresponding names\n  const numToName = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n\n  // Map each number in the array to its corresponding name\n  return arr.map(num => numToName[num]);\n}"
    ],
    [
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\nlet factors = [];\nfor (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n        factors.push(i);\n        n = n / i;\n    }\n}\nreturn factors;",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\nlet factors = [];\nfor(let i = 2; i <= n; i++){\n    while(n % i === 0){\n        factors.push(i);\n        n /= i;\n    }\n}\nreturn factors;\n}",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\nlet factors = [];\nfor (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n        factors.push(i);\n        n /= i;\n    }\n}\nreturn factors;",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\nlet factors = [];\nfor(let i = 2; i <= n; i++) {\n    while(n % i === 0) {\n        factors.push(i);\n        n /= i;\n    }\n}\nreturn factors;",
        "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\nlet factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;"
    ],
    [
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n// create an empty array to store prime numbers\nlet primes = [];\n\n// function to check if a number is prime\nfunction isPrime(num) {\n    for(let i = 2; i < num; i++)\n        if(num % i === 0) return false;\n    return num > 1;\n}\n\n// iterate from 2 to n and check if the number is prime\nfor(let i = 2; i < n; i++) {\n    if(isPrime(i)) {\n        primes.push(i);\n    }\n}\n\nreturn primes;",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n    for(let i = 2; i < num; i++)\n        if(num % i === 0) return false;\n    return num > 1;\n}\n\n// main function\nlet primes = [];\nfor(let i = 2; i < n; i++) {\n    if(isPrime(i)) {\n        primes.push(i);\n    }\n}\nreturn primes;",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\nlet primes = [];\nfor(let i = 2; i < n; i++){\n    if(isPrime(i)){\n        primes.push(i);\n    }\n}\nreturn primes;\n}\n\nfunction isPrime(num){\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\nlet primes = [];\nfor(let i = 2; i < n; i++){\n    if(isPrime(i)){\n        primes.push(i);\n    }\n}\nreturn primes;\n\nfunction isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}}",
        "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\nlet primes = [];\nfor(let i = 2; i < n; i++){\n    if(isPrime(i)){\n        primes.push(i);\n    }\n}\nreturn primes;\n}\n\nfunction isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}"
    ],
    [
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\nreturn [...new Set(l)].sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\nreturn [...new Set(l)].sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\nreturn [...new Set(l)].sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\nreturn [...new Set(l)].sort((a, b) => a - b);\n}",
        "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\nreturn [...new Set(l)].sort((a, b) => a - b);\n}"
    ],
    [
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\nlet totalChars1 = lst1.reduce((total, str) => total + str.length, 0);\nlet totalChars2 = lst2.reduce((total, str) => total + str.length, 0);\n\nreturn totalChars1 <= totalChars2 ? lst1 : lst2;\n}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\nlet totalCharsLst1 = lst1.join('').length;\nlet totalCharsLst2 = lst2.join('').length;\n\nif (totalCharsLst1 <= totalCharsLst2) {\n    return lst1;\n} else {\n    return lst2;\n}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\nlet chars1 = lst1.join('').length;\nlet chars2 = lst2.join('').length;\n\nif (chars1 <= chars2) {\n    return lst1;\n} else {\n    return lst2;\n}}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\nlet lst1CharCount = lst1.reduce((total, str) => total + str.length, 0);\nlet lst2CharCount = lst2.reduce((total, str) => total + str.length, 0);\n\nif (lst1CharCount <= lst2CharCount) {\n    return lst1;\n} else {\n    return lst2;\n}}",
        "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\nlet count1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\nlet count2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n\nif (count1 <= count2) {\n    return lst1;\n} else {\n    return lst2;\n}}"
    ],
    [
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\nreturn Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\nreturn Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\nreturn Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\nreturn Math.max(...l);\n}",
        "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\nreturn Math.max(...l);\n}"
    ],
    [
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\nlet stack = [];\nfor (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n        stack.push(string[i]);\n    } else {\n        if (stack.length === 0) {\n            return false;\n        }\n        stack.pop();\n    }\n}\nreturn stack.length === 0 ? false : true; \n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\nlet stack = [];\nfor(let i = 0; i < string.length; i++) {\n    if(string[i] === '[') {\n        stack.push('[');\n    } else if(string[i] === ']') {\n        if(stack.length === 0) {\n            return false;\n        }\n        stack.pop();\n    }\n}\nreturn stack.length === 0 ? false : true; \n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\nlet stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push('[');\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0 ? false : true;\n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\nlet stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n        } else if (string[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length !== string.length && stack.length === 0;\n}",
        "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\nlet stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length !== string.length / 2;\n}"
    ],
    [
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\nif(n > m) {\n    return -1;\n} else {\n    let sum = 0;\n    for(let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\nif(n > m) {\n    return -1;\n}\nlet sum = 0;\nfor(let i = n; i <= m; i++) {\n    sum += i;\n}\nlet avg = Math.round(sum / (m - n + 1));\nreturn \"0b\" + avg.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\nif(n > m) {\n    return -1;\n} else {\n    let sum = 0;\n    for(let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\nif(n > m) {\n    return -1;\n}\n\nlet sum = 0;\nfor(let i = n; i <= m; i++) {\n    sum += i;\n}\nlet avg = Math.round(sum / (m - n + 1));\n\nreturn \"0b\" + avg.toString(2);\n}",
        "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\nif(n > m) {\n    return -1;\n} else {\n    let sum = 0;\n    for(let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}"
    ],
    [
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\nreturn lst.map((str, idx) => {\n    let oddCount = str.split('').filter(char => parseInt(char) % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\nreturn lst.map((str, idx) => {\n    let oddCount = str.split('').filter(char => parseInt(char) % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\nreturn lst.map((str, idx) => {\n    let oddCount = Array.from(str).reduce((count, digit) => count + (parseInt(digit) % 2), 0);\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\nreturn lst.map((str, index) => {\n    let oddCount = [...str].filter(num => num % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n}",
        "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\nlet result = [];\nfor (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n        if (parseInt(lst[i][j]) % 2 !== 0) {\n            count++;\n        }\n    }\n    result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n}\nreturn result;\n}"
    ],
    [
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n// If the array is empty, return true\nif(arr.length === 0) {\n    return true;\n}\n\n// Sort the array in non-decreasing order\nlet sortedArr = [...arr].sort((a, b) => a - b);\n\n// Loop through the array\nfor(let i = 0; i < arr.length; i++) {\n    // Perform right shift operation\n    let shiftedArr = arr.slice(i).concat(arr.slice(0, i));\n\n    // If the shifted array is equal to the sorted array, return true\n    if(JSON.stringify(shiftedArr) === JSON.stringify(sortedArr)) {\n        return true;\n    }\n}\n\n// If no match found, return false\nreturn false;",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n// If the array is empty, return true\nif(arr.length === 0) return true;\n\n// Sort the array in ascending order\nlet sortedArr = [...arr].sort((a,b) => a-b);\n\n// Check if the array is already sorted\nif(JSON.stringify(arr) === JSON.stringify(sortedArr)) return true;\n\n// Perform the right shift operation for each element in the array\nfor(let i=0; i<arr.length; i++){\n    // Perform the right shift operation\n    let shiftedArr = arr.slice(-1).concat(arr.slice(0,-1));\n    // Check if the shifted array is equal to the sorted array\n    if(JSON.stringify(shiftedArr) === JSON.stringify(sortedArr)) return true;\n    // Update the array to the shifted array for the next iteration\n    arr = shiftedArr;\n}\n\n// If no sorted array is found after performing the right shift operation for each element, return false\nreturn false;",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n// If the array is empty, return true\nif(arr.length === 0) return true;\n\n// Create a copy of the array and sort it\nlet sortedArr = [...arr].sort((a, b) => a - b);\n\n// Iterate over the array\nfor(let i = 0; i < arr.length; i++) {\n    // Perform a right shift operation\n    let shiftedArr = arr.slice(-i).concat(arr.slice(0, -i));\n    // If the shifted array matches the sorted array, return true\n    if(JSON.stringify(shiftedArr) === JSON.stringify(sortedArr)) return true;\n}\n\n// If no match is found after iterating over the entire array, return false\nreturn false;",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\nif (arr.length === 0) {\n    return true;\n}\n\nlet sortedArr = [...arr].sort((a, b) => a - b);\nlet rotations = arr.length;\n\nfor (let i = 0; i < arr.length; i++) {\n    let rotatedArr = arr.slice(i).concat(arr.slice(0, i));\n    if (JSON.stringify(rotatedArr) === JSON.stringify(sortedArr)) {\n        return true;\n    }\n}\n\nreturn false;\n}",
        "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n// First, we need to check if the array is empty or contains only one element.\n// If so, we return true because it's already sorted.\nif (arr.length <= 1) {\n    return true;\n}\n\n// Next, we'll find the index where the array is not in non-decreasing order.\nlet shiftIndex = -1;\nfor (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n        shiftIndex = i + 1;\n        break;\n    }\n}\n\n// If the array is already sorted, we return true.\nif (shiftIndex === -1) {\n    return true;\n}\n\n// We split the array into two parts at the shift index and check if the\n// concatenated array is sorted.\nlet shiftedArr = arr.slice(shiftIndex).concat(arr.slice(0, shiftIndex));\nfor (let i = 0; i < shiftedArr.length - 1; i++) {\n    if (shiftedArr[i] > shiftedArr[i + 1]) {\n        return false;\n    }\n}\n\n// If we made it this far, it means we can sort the array with a right shift.\nreturn true;"
    ],
    [
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\nlet even = 0;\nlet odd = 0;\n\n// Function to check if a number is palindrome\nfunction isPalindrome(num) {\n    return num.toString() === num.toString().split('').reverse().join('');\n}\n\nfor (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n        if (i % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n}\n\nreturn [even, odd];",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\nlet evenCount = 0;\nlet oddCount = 0;\n\nfor(let i = 1; i <= n; i++){\n    let num = i.toString();\n    let reversedNum = num.split('').reverse().join('');\n    if(num === reversedNum){\n        if(i % 2 === 0){\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n}\nreturn [evenCount, oddCount];\n}",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\nlet even = 0;\nlet odd = 0;\n\nfunction isPalindrome(num) {\n    return num.toString() === num.toString().split('').reverse().join('');\n}\n\nfor(let i = 1; i <= n; i++) {\n    if(isPalindrome(i)) {\n        if(i % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n}\n\nreturn [even, odd];\n}",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\nlet evenCount = 0;\nlet oddCount = 0;\n\nfor(let i = 1; i <= n; i++){\n    let str = i.toString();\n    let reversedStr = str.split('').reverse().join('');\n    if(str === reversedStr){\n        if(i % 2 === 0){\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n}\n\nreturn [evenCount, oddCount];",
        "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\nlet evenCount = 0;\nlet oddCount = 0;\n\nfunction isPalindrome(num) {\n    return num.toString() === num.toString().split('').reverse().join('');\n}\n\nfor(let i = 1; i <= n; i++) {\n    if(isPalindrome(i)) {\n        if(i % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n}\n\nreturn [evenCount, oddCount];"
    ],
    [
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n// The smallest 4 positive even numbers are 2, 2, 2, 2 which sum up to 8\n// If n < 8, it can't be written as the sum of 4 positive even numbers\n// If n is odd, it can't be written as the sum of even numbers\n// If n is even and n >= 8, it can be written as the sum of 4 positive even numbers\n  if (n < 8 || n % 2 !== 0) {\n    return false;\n  } else {\n    return true;\n  }\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n// The smallest even number is 2. Therefore, the smallest sum of exactly 4 positive even numbers is 2+2+2+2=8.\n// Any number smaller than 8 cannot be written as the sum of exactly 4 positive even numbers.\n// Any even number greater than or equal to 8 can be written as the sum of exactly 4 positive even numbers.\n// Odd numbers cannot be written as the sum of even numbers.\n// Therefore, we return true if n is greater than or equal to 8 and even, and false otherwise.\nif(n >= 8 && n % 2 === 0) {\n    return true;\n} else {\n    return false;\n}\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n// The smallest even number is 2\n// If a number can be written as the sum of exactly 4 positive even numbers, it must be at least 8 (2+2+2+2)\n// Moreover, as we are dealing with even numbers, the number n must also be even\nif(n < 8 || n % 2 !== 0) {\n    return false;\n}\n// If n is even and greater than or equal to 8, it can be written as the sum of exactly 4 positive even numbers\nreturn true;",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n// If n is less than 8 or odd, it cannot be written as the sum of exactly 4 positive even numbers\n    if (n < 8 || n % 2 !== 0) {\n        return false;\n    }\n\n    // If n is divisible by 4, it can be written as the sum of exactly 4 positive even numbers\n    if (n % 4 === 0) {\n        return true;\n    }\n\n    // If n is not divisible by 4, it cannot be written as the sum of exactly 4 positive even numbers\n    return false;\n}",
        "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n// The smallest even number is 2, so the smallest sum of 4 even numbers is 8 (2+2+2+2). \n// Any number less than 8 cannot be written as the sum of 4 even numbers.\n// For any number greater than or equal to 8, if it is even, it can be written as the sum of 4 even numbers.\n// This is because we can always take away 2 from the number (which is even) and add it to the sum of 4 twos (which is also even).\n// Therefore, the resulting sum will still be even.\n\nif(n < 8) {\n    return false;\n} else {\n    return n % 2 === 0;\n}\n"
    ],
    [
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\nlet result = [];\nfor(let i = 1; i < xs.length; i++){\n    result.push(i * xs[i]);\n}\nreturn result;",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\nlet derivative = [];\nfor(let i = 1; i < xs.length; i++){\n    derivative.push(i * xs[i]);\n}\nreturn derivative;",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\nlet derivative = [];\nfor(let i = 1; i < xs.length; i++) {\n    derivative.push(i * xs[i]);\n}\nreturn derivative;",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\nlet result = [];\nfor(let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n}\nreturn result;",
        "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\nlet derivative = [];\nfor(let i=1; i<xs.length; i++){\n    derivative.push(xs[i] * i);\n}\nreturn derivative;"
    ],
    [
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\nlet sorted = true;\nlet duplicates = false;\nfor(let i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i+1]){\n        sorted = false;\n        break;\n    }\n    if(lst[i] === lst[i+1] && lst[i] === lst[i+2]){\n        duplicates = true;\n        break;\n    }\n}\nreturn sorted && !duplicates;\n}",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\nlet sorted = true;\nlet duplicates = false;\n\nfor(let i = 0; i < lst.length - 1; i++) {\n    if(lst[i] > lst[i+1]) {\n        sorted = false;\n        break;\n    }\n    if(lst[i] === lst[i+1]) {\n        duplicates = true;\n    }\n}\n\nreturn sorted && !duplicates;\n}",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n// Create a copy of the original array and sort it\nlet sortedArray = [...lst].sort((a, b) => a - b);\n\n// Check if original array is equal to sorted array\nfor(let i = 0; i < lst.length; i++) {\n    if(lst[i] !== sortedArray[i]) {\n        return false;\n    }\n}\n\n// Check for duplicates\nlet duplicates = new Set(lst);\nif(lst.length !== duplicates.size) {\n    return false;\n}\n\nreturn true;",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\nlet sorted = true;\nlet duplicates = false;\nfor(let i = 0; i < lst.length - 1; i++) {\n    if(lst[i] > lst[i+1]) {\n        sorted = false;\n        break;\n    }\n    if(lst[i] === lst[i+1]) {\n        if(duplicates) {\n            sorted = false;\n            break;\n        }\n        duplicates = true;\n    } else {\n        duplicates = false;\n    }\n}\nreturn sorted;",
        "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\nlet set = new Set(lst);\nif(set.size != lst.length) return false;\n\nfor(let i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i + 1]) return false;\n}\nreturn true;\n}"
    ],
    [
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\nlet hasLetter = false;\nlet result = '';\n\nfor(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-z]/i)){\n        hasLetter = true;\n        if(s[i] === s[i].toLowerCase()){\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i].toLowerCase();\n        }\n    } else {\n        result += s[i];\n    }\n}\n\nif(!hasLetter){\n    result = result.split('').reverse().join('');\n}\n\nreturn result;",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\nlet hasLetter = /[a-z]/i.test(s);\n  if (!hasLetter) {\n    return s.split('').reverse().join('');\n  } else {\n    return s.split('').map(char => \n      char === char.toUpperCase() ? \n      char.toLowerCase() : \n      char.toUpperCase()\n    ).join('');\n  }\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\nlet containsLetter = /[a-zA-Z]/.test(s);\nlet result = \"\";\n\nif (!containsLetter) {\n    return s.split(\"\").reverse().join(\"\");\n} else {\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\nlet hasLetter = /[a-z]/i.test(s);\nlet result = '';\n\nif (!hasLetter) {\n  return s.split('').reverse().join('');\n} else {\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n}",
        "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\nlet letters = /^[A-Za-z]+$/;\nif (s.match(letters)) {\n    return s.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n} else if (!s.match(letters)) {\n    return s.split('').reverse().join('');\n}\n}"
    ],
    [
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n// Initialize the first three elements of the Tribonacci series\n  let tribonacci = [1, 3, 2];\n\n  // If n is 0, 1 or 2, return the first n elements\n  if (n < 3) {\n    return tribonacci.slice(0, n + 1);\n  }\n\n  // Compute the rest of the series\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      // If i is even, the next element is 1 + i / 2\n      tribonacci.push(1 + i / 2);\n    } else {\n      // If i is odd, the next element is the sum of the previous three elements\n      tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n  }\n\n  return tribonacci;\n}",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n// Initialize the array with the first three values of the Tribonacci sequence\nlet sequence = [1, 3, 2];\n\n// If n is less than 3, return the slice of sequence up to n + 1\nif (n < 3) {\n    return sequence.slice(0, n + 1);\n}\n\n// Calculate the rest of the sequence\nfor (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n        sequence[i] = 1 + i / 2;\n    } else {\n        sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i - 3];\n    }\n}\n\nreturn sequence;",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n// Initialize the tribonacci sequence\nlet tribonacci = [1, 3, 2];\n\n// Calculate the tribonacci sequence up to n\nfor(let i = 3; i <= n; i++) {\n    if(i % 2 === 0) {\n        tribonacci[i] = 1 + i / 2;\n    } else {\n        tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3];\n    }\n}\n\n// Return the tribonacci sequence up to n\nreturn tribonacci.slice(0, n + 1);",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\nlet tribonacci = [1, 3];\nfor(let i = 2; i <= n; i++) {\n    if(i % 2 === 0) {\n        tribonacci[i] = 1 + i / 2;\n    } else {\n        tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + (1 + (i + 1) / 2);\n    }\n}\nreturn tribonacci;",
        "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n// Initialize the first three numbers\nlet tribonacci = [1, 3, 2];\nif (n < 3) {\n    return tribonacci.slice(0, n + 1);\n}\n\n// Calculate the rest of the sequence\nfor (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n        tribonacci[i] = 1 + i / 2;\n    } else {\n        tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3];\n    }\n}\n\nreturn tribonacci;"
    ],
    [
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\nlet count = 0;\nfor (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n        let str = i.toString();\n        for (let j = 0; j < str.length; j++) {\n            if (str[j] === '7') {\n                count++;\n            }\n        }\n    }\n}\nreturn count;",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\nlet count = 0;\nfor(let i = 1; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(str[j] === '7'){\n                count++;\n            }\n        }\n    }\n}\nreturn count;",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\nlet count = 0;\nfor(let i = 1; i < n; i++) {\n    if(i % 11 === 0 || i % 13 === 0) {\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++) {\n            if(str[j] === '7') {\n                count++;\n            }\n        }\n    }\n}\nreturn count;",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\nlet count = 0;\nfor(let i = 0; i < n; i++) {\n    if(i % 11 === 0 || i % 13 === 0) {\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++) {\n            if(str[j] === '7') {\n                count++;\n            }\n        }\n    }\n}\nreturn count;",
        "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\nlet count = 0;\nfor(let i = 1; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(str[j] === '7'){\n                count++;\n            }\n        }\n    }\n}\nreturn count;"
    ],
    [
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\nreturn strings.filter(str => str.startsWith(prefix));",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\nreturn strings.filter(str => str.startsWith(prefix));",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\nreturn strings.filter(str => str.startsWith(prefix));",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\nreturn strings.filter(str => str.startsWith(prefix));",
        "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\nreturn strings.filter(str => str.startsWith(prefix));"
    ],
    [
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\nlet binary = N.toString(2);\nlet sum = 0;\nfor(let i=0; i<binary.length; i++){\n  sum += parseInt(binary[i]);\n}\nreturn sum.toString(2); \n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\nlet binary = N.toString(2);\nlet sum = 0;\nfor(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n}\nreturn sum.toString(2); \n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\nlet binary = N.toString(2);\nlet sum = 0;\nfor(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n}\nreturn sum.toString(2);",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\nlet binary = N.toString(2);\nlet sum = 0;\nfor(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n}\nreturn sum.toString(2); \n}",
        "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\nlet binary = N.toString(2);\nlet sum = 0;\nfor(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n}\nreturn sum.toString(2); }"
    ],
    [
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n// Initialize variables\nlet N = grid.length;\nlet minPath = Array(k).fill(N * N + 1);\nlet directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]; // up, down, left, right\n\n// Helper function to check if a cell is valid\nlet isValid = (x, y) => x >= 0 && y >= 0 && x < N && y < N;\n\n// Helper function to update the minimum path\nlet updateMinPath = (path) => {\n    for (let i = 0; i < k; i++) {\n        if (path[i] < minPath[i]) {\n            minPath = path.slice();\n            break;\n        } else if (path[i] > minPath[i]) {\n            break;\n        }\n    }\n};\n\n// Helper function to perform depth-first search\nlet dfs = (x, y, path) => {\n    if (path.length === k) {\n        updateMinPath(path);\n        return;\n    }\n    for (let [dx, dy] of directions) {\n        let nx = x + dx, ny = y + dy;\n        if (isValid(nx, ny)) {\n            path.push(grid[nx][ny]);\n            dfs(nx, ny, path);\n            path.pop();\n        }\n    }\n};\n\n// Start from each cell\nfor (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n        dfs(i, j, [grid[i][j]]);\n    }\n}\n\nreturn minPath;",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n// Initialize variables\nlet N = grid.length;\nlet paths = [];\nlet directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]; // up, down, left, right\n\n// Helper function to check if a cell is valid\nlet isValid = (x, y) => {\n  return x >= 0 && y >= 0 && x < N && y < N;\n};\n\n// Helper function to generate all possible paths\nlet generatePaths = (x, y, path) => {\n  // If the path length is k, add it to the paths array\n  if (path.length === k) {\n    paths.push([...path]);\n    return;\n  }\n\n  // Try to move in all directions\n  for (let [dx, dy] of directions) {\n    let nx = x + dx;\n    let ny = y + dy;\n\n    // If the next cell is valid, add it to the path and continue generating\n    if (isValid(nx, ny)) {\n      path.push(grid[nx][ny]);\n      generatePaths(nx, ny, path);\n      path.pop();\n    }\n  }\n};\n\n// Generate all possible paths starting from each cell\nfor (let i = 0; i < N; i++) {\n  for (let j = 0; j < N; j++) {\n    generatePaths(i, j, [grid[i][j]]);\n  }\n}\n\n// Sort the paths lexicographically and return the first one\npaths.sort();\nreturn paths[0];",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n// Create a list of all possible starting positions in the grid\n  let positions = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      positions.push([i, j]);\n    }\n  }\n\n  // Initialize the minimum path and its value\n  let minPath = [];\n  let minValue = Infinity;\n\n  // Try all possible starting positions\n  for (let position of positions) {\n    let [x, y] = position;\n    let visited = new Set([`${x},${y}`]);\n    let path = [grid[x][y]];\n\n    // Use DFS to find all possible paths of length k\n    dfs(x, y, visited, path);\n\n    // If the value of the current path is less than the minimum value found so far, update the minimum path and its value\n    if (pathValue(path) < minValue) {\n      minPath = path;\n      minValue = pathValue(path);\n    }\n  }\n\n  return minPath;\n\n  function dfs(x, y, visited, path) {\n    if (path.length === k) return;\n\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    for (let direction of directions) {\n      let [dx, dy] = direction;\n      let newX = x + dx;\n      let newY = y + dy;\n\n      if (newX >= 0 && newX < grid.length && newY >= 0 && newY < grid[0].length && !visited.has(`${newX},${newY}`)) {\n        visited.add(`${newX},${newY}`);\n        path.push(grid[newX][newY]);\n        dfs(newX, newY, visited, path);\n        path.pop();\n        visited.delete(`${newX},${newY}`);\n      }\n    }\n  }\n\n  function pathValue(path) {\n    return path.reduce((value, cell) => value * 10 + cell, 0);\n  }\n}",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n// we will use a priority queue to always choose the smallest next step\n// we will use a set to keep track of visited cells\n// we will use a directions array to navigate the grid\n\n  const N = grid.length;\n  const pq = new PriorityQueue((a, b) => a[0] < b[0]);\n  const visited = new Set();\n  const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n  const result = [];\n\n  // iterate over the grid to find the smallest number and its position\n  let min = Infinity;\n  let minPos = [];\n  for(let i=0; i<N; i++){\n    for(let j=0; j<N; j++){\n      if(grid[i][j] < min){\n        min = grid[i][j];\n        minPos = [i, j];\n      }\n    }\n  }\n\n  // we start from the smallest number\n  pq.push([grid[minPos[0]][minPos[1]], minPos]);\n  visited.add(minPos.toString());\n\n  // while we have not visited k cells\n  while(result.length < k){\n    const [val, [x, y]] = pq.pop();\n    result.push(val);\n\n    // for each direction\n    for(let [dx, dy] of directions){\n      const nx = x + dx;\n      const ny = y + dy;\n\n      // if the next cell is inside the grid and not visited\n      if(nx >= 0 && ny >= 0 && nx < N && ny < N && !visited.has([nx, ny].toString())){\n        pq.push([grid[nx][ny], [nx, ny]]);\n        visited.add([nx, ny].toString());\n      }\n    }\n  }\n\n  return result;\n}\n\n// Priority Queue class\nclass PriorityQueue {\n  constructor(comparator = (a, b) => a > b) {\n    this._heap = [];\n    this._comparator = comparator;\n  }\n\n  size() {\n    return this._heap.length;\n  }\n\n  isEmpty() {\n    return this.size() == 0;\n  }\n\n  peek() {\n    return this._heap[0];\n  }\n\n  push(value) {\n    this._heap.push(value);\n    this._siftUp();\n  }\n\n  pop() {\n    const poppedValue = this.peek();\n    const bottom = this.size() - ",
        "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n// We'll use a priority queue to always get the smallest available cell.\n// We'll also use a 2D array to keep track of the best path we've found to each cell.\n// For each cell, we'll add all its neighbors to the queue.\n\n    const N = grid.length;\n    const dir = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    const visited = Array(N).fill(0).map(() => Array(N).fill(false));\n    const pq = new PriorityQueue((a, b) => a[0] < b[0]);\n\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            pq.push([grid[i][j], i, j]);\n        }\n    }\n\n    const path = [];\n    while (path.length < k) {\n        const [val, x, y] = pq.pop();\n        if (visited[x][y]) continue;\n        visited[x][y] = true;\n        path.push(val);\n\n        for (let [dx, dy] of dir) {\n            const nx = x + dx, ny = y + dy;\n            if (nx < 0 || ny < 0 || nx >= N || ny >= N || visited[nx][ny]) continue;\n            pq.push([grid[nx][ny], nx, ny]);\n        }\n    }\n\n    return path;\n}\n\n// Note: This solution assumes that a PriorityQueue class is available.\n// The PriorityQueue class should support the following operations:\n// - push(item): Adds an item to the queue.\n// - pop(): Removes and returns the smallest item from the queue.\n// The constructor of the PriorityQueue class takes a comparison function,\n// which is used to determine the order of the items in the queue."
    ],
    [
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\nlet count = 0;\nfor(let i = 0; i < s.length; i += 2){\n    if(['A', 'E', 'I', 'O', 'U'].includes(s[i])){\n        count++;\n    }\n}\nreturn count;",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\nlet count = 0;\nfor(let i = 0; i < s.length; i += 2){\n    if('AEIOU'.includes(s[i])){\n        count++;\n    }\n}\nreturn count;",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\nlet count = 0;\nfor(let i = 0; i < s.length; i+=2){\n    if(['A', 'E', 'I', 'O', 'U'].includes(s[i])) {\n        count++;\n    }\n}\nreturn count;",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\nlet count = 0;\nfor(let i = 0; i < s.length; i+=2){\n    if('AEIOU'.includes(s[i])){\n        count++;\n    }\n}\nreturn count;",
        "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\nlet count = 0;\nfor(let i = 0; i < s.length; i+=2){\n    if(['A', 'E', 'I', 'O', 'U'].includes(s[i])){\n        count++;\n    }\n}\nreturn count;"
    ],
    [
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n// sort the array in descending order\narr.sort((a, b) => b - a);\n// return the first k elements of the sorted array\nreturn arr.slice(0, k);",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n// Sort the array in descending order\narr.sort((a, b) => b - a);\n\n// Return the first k elements\nreturn arr.slice(0, k);",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n// sort the array in descending order\narr.sort((a, b) => b - a);\n// return the first k elements\nreturn arr.slice(0, k);",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n// Sort the array in descending order\narr.sort((a, b) => b - a);\n// Return the first k elements\nreturn arr.slice(0, k);",
        "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n// sort the array in descending order\narr.sort((a, b) => b - a);\n// return the first k elements\nreturn arr.slice(0, k);"
    ],
    [
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\nfor(let i = n-1; i > 0; i--) {\n    if(n % i == 0) {\n        return i;\n    }\n}\nreturn 1; // if no other divisors found, return 1 as it's the smallest divisor of any number.",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\nfor(let i = n-1; i > 0; i--){\n    if(n % i === 0){\n        return i;\n    }\n}\nreturn 1; // if no divisor found, return 1 (since 1 divides every number)",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\nfor(let i = n-1; i > 0; i--) {\n    if(n % i === 0) {\n        return i;\n    }\n}\nreturn 1; // If no divisor found, return 1 as every number is divisible by 1.",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\nfor(let i = n-1; i > 0; i--){\n    if(n % i === 0){\n        return i;\n    }\n}\nreturn 1; // if no larger divisor is found, return 1 (every number is divisible by 1)",
        "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\nfor(let i = n-1; i > 0; i--) {\n    if(n % i === 0) {\n        return i;\n    }\n}\nreturn 1; // if no divisor found, return 1 as every number is divisible by 1\n}"
    ],
    [
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n// Copy the array to a new variable to avoid changing the original array\n    let newArray = [...array];\n\n    // Check if the array is empty or has only one element\n    if (newArray.length <= 1) {\n        return newArray;\n    }\n\n    // Calculate the sum of the first and last element\n    let sum = newArray[0] + newArray[newArray.length - 1];\n\n    // Check if the sum is even or odd\n    if (sum % 2 === 0) {\n        // If the sum is even, sort in descending order\n        newArray.sort((a, b) => b - a);\n    } else {\n        // If the sum is odd, sort in ascending order\n        newArray.sort((a, b) => a - b);\n    }\n\n    return newArray;\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\nlet newArray = [...array];\nif((newArray[0] + newArray[newArray.length - 1]) % 2 === 0){\n    return newArray.sort((a, b) => b - a);\n} else {\n    return newArray.sort((a, b) => a - b);\n}\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n// Create a copy of the array\nlet arrayCopy = [...array];\n\n// Check if the array is empty or only contains one element\nif (arrayCopy.length <= 1) {\n    return arrayCopy;\n}\n\n// Calculate the sum of the first and last element\nlet sum = arrayCopy[0] + arrayCopy[arrayCopy.length - 1];\n\n// Check if the sum is odd or even\nif (sum % 2 === 0) {\n    // Sort the array in descending order\n    return arrayCopy.sort((a, b) => b - a);\n} else {\n    // Sort the array in ascending order\n    return arrayCopy.sort((a, b) => a - b);\n}",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n// copy the array\nlet sortedArray = [...array];\n\n// check if the array is empty or contains only one element\nif (array.length <= 1) {\n    return sortedArray;\n}\n\n// calculate the sum of the first and last element\nlet sum = array[0] + array[array.length - 1];\n\n// sort the array based on the sum\nif (sum % 2 === 0) {\n    // if the sum is even, sort in descending order\n    sortedArray.sort((a, b) => b - a);\n} else {\n    // if the sum is odd, sort in ascending order\n    sortedArray.sort((a, b) => a - b);\n}\n\nreturn sortedArray;",
        "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n// Copy the array to avoid modifying the original\nlet copiedArray = [...array];\n\n// If the array is empty or has only one element, return it as is\nif (copiedArray.length <= 1) {\n    return copiedArray;\n}\n\n// Calculate the sum of the first and last element\nlet sum = copiedArray[0] + copiedArray[copiedArray.length - 1];\n\n// If the sum is odd, sort in ascending order\nif (sum % 2 !== 0) {\n    return copiedArray.sort((a, b) => a - b);\n} \n// If the sum is even, sort in descending order\nelse {\n    return copiedArray.sort((a, b) => b - a);\n}"
    ],
    [
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\nlet result = [];\nfor(let i = 1; i <= n; i++) {\n    if(i % 2 === 0) {\n        let factorial = 1;\n        for(let j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        result.push(factorial);\n    } else {\n        let sum = 0;\n        for(let j = 1; j <= i; j++) {\n            sum += j;\n        }\n        result.push(sum);\n    }\n}\nreturn result;\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\nlet result = [];\nfor(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n        let factorial = 1;\n        for(let j = 1; j <= i; j++){\n            factorial *= j;\n        }\n        result.push(factorial);\n    } else {\n        let sum = 0;\n        for(let j = 1; j <= i; j++){\n            sum += j;\n        }\n        result.push(sum);\n    }\n}\nreturn result;\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\nlet arr = [];\nlet sum = 0;\nlet factorial = 1;\nfor(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n        factorial *= i;\n        arr.push(factorial);\n    } else {\n        sum += i;\n        arr.push(sum);\n    }\n}\nreturn arr;\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\nlet result = [];\nfor(let i = 1; i <= n; i++) {\n    if(i % 2 === 0) {\n        let factorial = 1;\n        for(let j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        result.push(factorial);\n    } else {\n        let sum = 0;\n        for(let j = 1; j <= i; j++) {\n            sum += j;\n        }\n        result.push(sum);\n    }\n}\nreturn result;\n}",
        "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\nlet result = [];\nfor(let i = 1; i <= n; i++) {\n    if(i % 2 === 0) {\n        let factorial = 1;\n        for(let j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        result.push(factorial);\n    } else {\n        let sum = 0;\n        for(let j = 1; j <= i; j++) {\n            sum += j;\n        }\n        result.push(sum);\n    }\n}\nreturn result;"
    ],
    [
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\nlet cubeRoot = Math.cbrt(a);\nreturn Number.isInteger(cubeRoot);\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\nlet cubeRoot = Math.cbrt(a);\nreturn Number.isInteger(cubeRoot);\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\nlet cubeRoot = Math.cbrt(a);\nreturn Number.isInteger(cubeRoot);\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\nlet cubeRoot = Math.cbrt(a);\nreturn Number.isInteger(cubeRoot);\n}",
        "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\nlet cubeRoot = Math.cbrt(a);\nreturn Number.isInteger(cubeRoot);\n}"
    ],
    [
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\nlet vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\nlet result = '';\n\nfor(let i = 0; i < message.length; i++) {\n    let char = message[i];\n\n    // Swap case of all letters\n    if(char >= 'a' && char <= 'z') {\n        char = char.toUpperCase();\n    } else if(char >= 'A' && char <= 'Z') {\n        char = char.toLowerCase();\n    }\n\n    // Replace all vowels with the letter that appears 2 places ahead of that vowel\n    if(vowels.includes(char)) {\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n    }\n\n    result += char;\n}\n\nreturn result;",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\nlet vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\nlet encodedMessage = '';\n\nfor(let i = 0; i < message.length; i++) {\n    let char = message[i];\n\n    if(vowels.includes(char)) {\n        let newChar = String.fromCharCode(char.charCodeAt(0) + 2);\n        encodedMessage += newChar;\n    } else if(char === char.toUpperCase()) {\n        encodedMessage += char.toLowerCase();\n    } else {\n        encodedMessage += char.toUpperCase();\n    }\n}\n\nreturn encodedMessage;",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\nlet encodedMessage = \"\";\nfor(let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if(char === ' ') {\n        encodedMessage += ' ';\n    } else if(char.match(/[aeiou]/i)) {\n        let newChar = String.fromCharCode(char.charCodeAt(0) + 2);\n        encodedMessage += char === char.toLowerCase() ? newChar.toUpperCase() : newChar.toLowerCase();\n    } else {\n        encodedMessage += char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n    }\n}\nreturn encodedMessage;\n}",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\nlet encodedMessage = \"\";\n\nfor(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char === ' '){\n        encodedMessage += ' ';\n        continue;\n    }\n    let isLowerCase = char === char.toLowerCase();\n    let newChar = char.toLowerCase();\n    if(['a','e','i','o','u'].includes(newChar)){\n        newChar = String.fromCharCode(newChar.charCodeAt(0) + 2);\n    }\n    encodedMessage += isLowerCase ? newChar.toUpperCase() : newChar.toLowerCase();\n}\nreturn encodedMessage;\n}",
        "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\nlet encodedMessage = '';\n\nfor (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === ' ') {\n        encodedMessage += ' ';\n        continue;\n    }\n    char = char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n    if (['a', 'e', 'i', 'o', 'u'].includes(char.toLowerCase())) {\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n    }\n    encodedMessage += char;\n}\n\nreturn encodedMessage;\n}"
    ],
    [
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n// Split the string into sentences\nlet sentences = S.split(/\\.|\\?|\\!/);\n\n// Initialize the count of boredoms to 0\nlet boredomCount = 0;\n\n// Iterate over each sentence\nfor(let i = 0; i < sentences.length; i++){\n    // If the sentence starts with \"I\", increment the count\n    if(sentences[i].trim().startsWith(\"I\")){\n        boredomCount++;\n    }\n}\n\n// Return the count of boredoms\nreturn boredomCount;",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n// Split the string into sentences\nvar sentences = S.split(/\\.|\\?|\\!/);\n\n// Initialize counter for boredoms\nvar boredomCount = 0;\n\n// Loop through each sentence\nfor (var i = 0; i < sentences.length; i++) {\n    // Trim leading and trailing whitespace from sentence\n    var sentence = sentences[i].trim();\n\n    // If the sentence starts with \"I\", increment the boredom count\n    if (sentence.startsWith(\"I\")) {\n        boredomCount++;\n    }\n}\n\n// Return the boredom count\nreturn boredomCount;",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n// Split the string into sentences\nlet sentences = S.split(/\\.|\\?|\\!/);\n\n// Initialize the boredom counter\nlet boredomCount = 0;\n\n// Loop through each sentence\nfor(let i = 0; i < sentences.length; i++){\n    // If the sentence starts with \"I\", increment the boredom counter\n    if(sentences[i].trim().startsWith(\"I\")){\n        boredomCount++;\n    }\n}\n\n// Return the boredom count\nreturn boredomCount;",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n// split the string into sentences\nlet sentences = S.split(/[.!?]/);\n\n// initialize boredom count\nlet boredomCount = 0;\n\n// iterate through each sentence\nfor(let sentence of sentences){\n    // trim white spaces and check if the sentence starts with \"I\"\n    if(sentence.trim().startsWith(\"I\")){\n        boredomCount++;\n    }\n}\n\nreturn boredomCount;",
        "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\nlet sentences = S.split(/\\.|\\?|\\!/);\nlet count = 0;\nfor(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith('I')){\n        count++;\n    }\n}\nreturn count;"
    ],
    [
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\nlet map = {};\n\nfor(let i = 0; i < l.length; i++) {\n    if(map[l[i]] !== undefined) {\n        return true;\n    } else {\n        map[-l[i]] = i;\n    }\n}\n\nreturn false;",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\nlet map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }\n        map[-l[i]] = true;\n    }\n    return false;\n}",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\nlet map = {};\nfor (let i = 0; i < l.length; i++) {\n    if (map[-l[i]]) {\n        return true;\n    }\n    map[l[i]] = true;\n}\nreturn false;",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\nlet map = {};\n  for(let i = 0; i < l.length; i++){\n    if(map[l[i]]){\n      return true;\n    } else {\n      map[-l[i]] = true;\n    }\n  }\n  return false;\n}",
        "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\nlet map = {};\nfor(let i = 0; i < l.length; i++){\n    if(map[l[i]]){\n        return true;\n    } else {\n        map[-l[i]] = true;\n    }\n}\nreturn false;"
    ],
    [
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\nif ((a + b > c) && (a + c > b) && (b + c > a)) {\n    var s = (a + b + c) / 2;\n    var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n} else {\n    return -1;\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\nif ((a + b > c) && (a + c > b) && (b + c > a)) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\nif ((a + b > c) && (a + c > b) && (b + c > a)) {\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\nif ((a + b > c) && (a + c > b) && (b + c > a)) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Math.round(area * 100) / 100;\n} else {\n    return -1;\n}",
        "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\nif ((a + b > c) && (a + c > b) && (b + c > a)) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return parseFloat(area.toFixed(2));\n} else {\n    return -1;\n}"
    ],
    [
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\nconst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    const start = Math.min(index1, index2);\n    const end = Math.max(index1, index2);\n    return planets.slice(start + 1, end);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\nconst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nlet index1 = planets.indexOf(planet1);\nlet index2 = planets.indexOf(planet2);\n\nif (index1 === -1 || index2 === -1) {\n    return [];\n}\n\nif (index1 > index2) {\n    [index1, index2] = [index2, index1];\n}\n\nreturn planets.slice(index1 + 1, index2);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\nconst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nlet index1 = planets.indexOf(planet1);\nlet index2 = planets.indexOf(planet2);\n\nif (index1 === -1 || index2 === -1) {\n    return [];\n}\n\nif (index1 > index2) {\n    [index1, index2] = [index2, index1];\n}\n\nreturn planets.slice(index1 + 1, index2);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\nconst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nconst index1 = planets.indexOf(planet1);\nconst index2 = planets.indexOf(planet2);\n\nif (index1 === -1 || index2 === -1) {\n    return [];\n}\n\nconst start = Math.min(index1, index2);\nconst end = Math.max(index1, index2);\n\nreturn planets.slice(start + 1, end);\n}",
        "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\nconst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nlet index1 = planets.indexOf(planet1);\nlet index2 = planets.indexOf(planet2);\n\nif (index1 === -1 || index2 === -1) {\n    return [];\n}\n\nif (index1 > index2) {\n    [index1, index2] = [index2, index1];\n}\n\nreturn planets.slice(index1 + 1, index2);\n}"
    ],
    [
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\nlet str = n.toString();\nlet product = 1;\nlet hasOdd = false;\n\nfor(let i = 0; i < str.length; i++){\n    let num = parseInt(str[i]);\n    if(num % 2 !== 0){\n        product *= num;\n        hasOdd = true;\n    }\n}\n\nreturn hasOdd ? product : 0;\n}",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\nlet str = n.toString();\nlet product = 1;\nlet hasOdd = false;\n\nfor(let i = 0; i < str.length; i++){\n    let digit = parseInt(str[i]);\n    if(digit % 2 !== 0){\n        product *= digit;\n        hasOdd = true;\n    }\n}\n\nreturn hasOdd ? product : 0;",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\nlet str = n.toString();\nlet product = 1;\nlet hasOdd = false;\n\nfor (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 !== 0) {\n        product *= parseInt(str[i]);\n        hasOdd = true;\n    }\n}\n\nreturn hasOdd ? product : 0;",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\nlet str = n.toString();\nlet product = 1;\nlet hasOdd = false;\n\nfor(let i = 0; i < str.length; i++){\n    let num = parseInt(str[i]);\n    if(num % 2 !== 0){\n        product *= num;\n        hasOdd = true;\n    }\n}\n\nreturn hasOdd ? product : 0;",
        "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\nlet str = n.toString();\nlet product = 1;\nlet hasOdd = false;\n\nfor(let i = 0; i < str.length; i++){\n    let num = parseInt(str[i]);\n    if(num % 2 !== 0){\n        product *= num;\n        hasOdd = true;\n    }\n}\n\nreturn hasOdd ? product : 0;"
    ],
    [
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\nreturn s.split(/[\\s,]+/);\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\nreturn s.split(/[\\s,]+/);\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\nreturn s.split(/[\\s,]+/);\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\nreturn s.split(/[\\s,]+/);\n}",
        "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\nreturn s.replace(/,/g, ' ').split(' ');"
    ],
    [
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\nlet count = 0;\nlet position = 0;\n\nwhile (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n        count++;\n        position++;\n    } else {\n        break;\n    }\n}\n\nreturn count;",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\nlet count = 0;\nlet position = 0;\n\nwhile (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n        count++;\n        position++;\n    } else {\n        break;\n    }\n}\n\nreturn count;",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\nlet count = 0;\nlet position = string.indexOf(substring);\n\nwhile (position !== -1) {\n  count++;\n  position = string.indexOf(substring, position + 1);\n}\n\nreturn count;",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\nlet count = 0;\nlet position = 0;\n\nwhile (true) {\n    position = string.indexOf(substring, position);\n    if (position >= 0) {\n        count++;\n        position++;\n    } else {\n        break;\n    }\n}\n\nreturn count;",
        "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\nlet count = 0;\nfor(let i = 0; i < string.length; i++){\n    if(string.substring(i, i + substring.length) === substring){\n        count++;\n    }\n}\nreturn count;"
    ],
    [
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n// transform strings to numbers if needed\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(',', '.'));\n  }\n  if (typeof b === 'string') {\n    b = parseFloat(b.replace(',', '.'));\n  }\n\n  // compare and return the larger value\n  if (a > b) {\n    return a;\n  } else if (b > a) {\n    return b;\n  }\n\n  // return undefined if the values are equal\n  return undefined;\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n// first, convert strings to numbers if necessary\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(',', '.'));\n  }\n  if (typeof b === 'string') {\n    b = parseFloat(b.replace(',', '.'));\n  }\n\n  // then, compare the numbers\n  if (a > b) {\n    return a;\n  } else if (b > a) {\n    return b;\n  } else {\n    return undefined;\n  }\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n// Convert strings to numbers for comparison\n  var numA = typeof a === \"string\" ? parseFloat(a.replace(',', '.')) : a;\n  var numB = typeof b === \"string\" ? parseFloat(b.replace(',', '.')) : b;\n\n  // Compare the numbers\n  if (numA > numB) {\n    return a;\n  } else if (numA < numB) {\n    return b;\n  } else {\n    return undefined;\n  }\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n// Convert strings to numbers if necessary\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(',', '.'));\n  }\n  if (typeof b === 'string') {\n    b = parseFloat(b.replace(',', '.'));\n  }\n\n  // Compare the values\n  if (a > b) {\n    return a;\n  } else if (b > a) {\n    return b;\n  } else {\n    return undefined;\n  }\n}",
        "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n// First, replace ',' with '.' in case the numbers are represented as strings\n  if (typeof a === 'string') {\n    a = a.replace(',', '.');\n  }\n  if (typeof b === 'string') {\n    b = b.replace(',', '.');\n  }\n\n  // Then, convert the strings to numbers if possible\n  if (!isNaN(a)) {\n    a = Number(a);\n  }\n  if (!isNaN(b)) {\n    b = Number(b);\n  }\n\n  // Finally, compare the two values\n  if (a > b) {\n    return a;\n  } else if (a < b) {\n    return b;\n  } else {\n    return undefined;\n  }\n}"
    ],
    [
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\nreturn text.replace(/[aeiouAEIOU]/g, ''); \n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\nreturn text.replace(/[aeiouAEIOU]/g, '');\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\nreturn text.replace(/[aeiouAEIOU]/g, \"\");\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\nreturn text.replace(/[aeiouAEIOU]/g, '');\n}",
        "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\nreturn text.replace(/[aeiouAEIOU]/g, '');\n}"
    ],
    [
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\nlet result = [];\nwhile(lst.length > 0){\n    let min = Math.min(...lst);\n    lst.splice(lst.indexOf(min), 1);\n    result.push(min);\n    if(lst.length > 0){\n        let max = Math.max(...lst);\n        lst.splice(lst.indexOf(max), 1);\n        result.push(max);\n    }\n}\nreturn result;\n}",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\nlet sortedList = lst.sort((a, b) => a - b);\nlet result = [];\n\nwhile (sortedList.length) {\n    result.push(sortedList.shift());\n    if (sortedList.length) result.push(sortedList.pop());\n}\n\nreturn result;",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\nlet sortedList = lst.sort((a, b) => a - b);\nlet result = [];\nwhile (sortedList.length) {\n  result.push(sortedList.shift());\n  if (sortedList.length) result.push(sortedList.pop());\n}\nreturn result;",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\nlet sortedList = lst.sort((a, b) => a - b);\nlet result = [];\nwhile(sortedList.length) {\n    result.push(sortedList.shift());\n    if(sortedList.length) result.push(sortedList.pop());\n}\nreturn result;",
        "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\nlet sortedList = lst.sort((a, b) => a - b);\nlet result = [];\nwhile (sortedList.length) {\n    result.push(sortedList.shift());\n    if (sortedList.length) result.push(sortedList.pop());\n}\nreturn result;"
    ],
    [
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\nnumbers.sort((a, b) => a - b);\nlet minDiff = Infinity;\nlet pair = [];\n\nfor (let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n        minDiff = diff;\n        pair = [numbers[i], numbers[i + 1]];\n    }\n}\n\nreturn pair;",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\nnumbers.sort((a, b) => a - b);\n\nlet minDiff = Infinity;\nlet pair = [];\n\nfor (let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n        minDiff = diff;\n        pair = [numbers[i], numbers[i + 1]];\n    }\n}\n\nreturn pair;",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\nnumbers.sort((a, b) => a - b);\nlet minDiff = Math.abs(numbers[1] - numbers[0]);\nlet pair = [numbers[0], numbers[1]];\n\nfor (let i = 1; i < numbers.length - 1; i++) {\n    let diff = Math.abs(numbers[i + 1] - numbers[i]);\n    if (diff < minDiff) {\n        minDiff = diff;\n        pair = [numbers[i], numbers[i + 1]];\n    }\n}\n\nreturn pair;",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\nnumbers.sort((a, b) => a - b);\nlet minDiff = Infinity;\nlet closestPair = [];\n\nfor (let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n        minDiff = diff;\n        closestPair = [numbers[i], numbers[i + 1]];\n    }\n}\n\nreturn closestPair;",
        "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\nnumbers.sort((a, b) => a - b);\nlet minDiff = Infinity;\nlet result = [];\n\nfor(let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i+1] - numbers[i];\n    if(diff < minDiff) {\n        minDiff = diff;\n        result = [numbers[i], numbers[i+1]];\n    }\n}\n\nreturn result;"
    ],
    [
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\nif (n === 1) {\n    return x === 1;\n} else {\n    while (x > 1) {\n        if (x % n !== 0) {\n            return false;\n        }\n        x = x / n;\n    }\n    return x === 1;\n} }",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\nif (n === 1) {\n    return x === 1;\n} else {\n    let i = 0;\n    while (Math.pow(n, i) < x) {\n        i++;\n    }\n    return Math.pow(n, i) === x;\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\nif (n === 1) {\n    return x === 1;\n}\nfor(let i = 0; ; i++) {\n    let power = Math.pow(n, i);\n    if(power === x) {\n        return true;\n    } else if(power > x) {\n        return false;\n    }\n}\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\nif (n === 1) {\n    return x === 1;\n}\nfor (let i = 0; ; i++) {\n    let power = Math.pow(n, i);\n    if (power === x) {\n        return true;\n    } else if (power > x) {\n        return false;\n    }\n}\n}",
        "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\nif (n === 1) {\n    return x === 1;\n}\n\nlet value = n;\n\nwhile (value < x) {\n    value *= n;\n}\n\nreturn value === x;\n}"
    ],
    [
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\n// helper function to generate fibonacci sequence\nfunction fibonacci(num){\n    let a = 1, b = 0, temp;\n    while (num >= 0){\n        temp = a;\n        a = a + b;\n        b = temp;\n        num--;\n    }\n    return b;\n}\n\nlet count = 0;\nlet fib = 0;\nlet i = 0;\n\nwhile (count < n) {\n    fib = fibonacci(i);\n    if (isPrime(fib)) {\n        count++;\n    }\n    i++;\n}\n\nreturn fib;",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\n// Helper function to generate fibonacci sequence\nfunction fibonacci(num){\n    let a = 1, b = 0, temp;\n\n    while (num >= 0){\n        temp = a;\n        a = a + b;\n        b = temp;\n        num--;\n    }\n\n    return b;\n}\n\nlet count = 0;\nlet fib = 0;\nlet i = 0;\n\nwhile(count < n){\n    fib = fibonacci(i);\n    if(isPrime(fib)){\n        count++;\n    }\n    i++;\n}\n\nreturn fib;",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\n// helper function to generate fibonacci sequence\nfunction fibonacci(num){\n    let a = 1, b = 0, temp;\n    while (num >= 0){\n        temp = a;\n        a = a + b;\n        b = temp;\n        num--;\n    }\n    return b;\n}\n\n// main function\nlet count = 0;\nlet i = 0;\nlet fib = 0;\nwhile (count < n) {\n    fib = fibonacci(i);\n    if (isPrime(fib)) {\n        count++;\n    }\n    i++;\n}\nreturn fib;",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\n// helper function to generate fibonacci sequence\nfunction fibonacci(num){\n    let a = 1, b = 0, temp;\n    while (num >= 0){\n        temp = a;\n        a = a + b;\n        b = temp;\n        num--;\n    }\n    return b;\n}\n\nlet count = 0;\nlet fib = 0;\nlet i = 0;\n\nwhile(count < n){\n    if(isPrime(fibonacci(i))){\n        count++;\n        if(count === n){\n            fib = fibonacci(i);\n        }\n    }\n    i++;\n}\n\nreturn fib;",
        "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\nlet fib = [0, 1];\n    let primeFibs = [];\n    let i = 2;\n\n    // Function to check if a number is prime\n    const isPrime = num => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    // Generate Fibonacci sequence and check if they are prime\n    while(primeFibs.length < n) {\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])) primeFibs.push(fib[i]);\n        i++;\n    }\n\n    return primeFibs[n-1];\n}"
    ],
    [
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\nreturn nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    let sumB = b.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    return sumA - sumB;\n});",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\nreturn nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    let sumB = b.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    return sumA - sumB;\n});",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\nreturn nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n    return sumA - sumB;\n});",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\nreturn nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    let sumB = b.toString().split('').reduce((acc, digit) => acc + Math.abs(parseInt(digit)), 0);\n    return sumA - sumB;\n});",
        "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\nreturn nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n    return sumA - sumB;\n});"
    ],
    [
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\nfor (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n        if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n            return true;\n        }\n    }\n}\nreturn false;",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\nfor(let i = 0; i < numbers.length; i++) {\n    for(let j = i + 1; j < numbers.length; j++) {\n        if(Math.abs(numbers[i] - numbers[j]) < threshold) {\n            return true;\n        }\n    }\n}\nreturn false;",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\nfor(let i = 0; i < numbers.length; i++) {\n    for(let j = i + 1; j < numbers.length; j++) {\n        if(Math.abs(numbers[i] - numbers[j]) < threshold) {\n            return true;\n        }\n    }\n}\nreturn false;",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\nfor(let i = 0; i < numbers.length; i++) {\n    for(let j = i + 1; j < numbers.length; j++) {\n        if(Math.abs(numbers[i] - numbers[j]) < threshold) {\n            return true;\n        }\n    }\n}\nreturn false;",
        "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\nfor(let i = 0; i < numbers.length; i++){\n    for(let j = i+1; j < numbers.length; j++){\n        if(Math.abs(numbers[i] - numbers[j]) < threshold){\n            return true;\n        }\n    }\n}\nreturn false;\n}"
    ],
    [
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\nlet reversedString = string.split('').reverse().join('');\nfor (let i = string.length; i >= 0; i--) {\n    if (string.substring(0, i) === reversedString.substring(reversedString.length - i)) {\n        return string + reversedString.substring(i);\n    }\n}\nreturn null;\n}",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\nif (string === \"\") return \"\";\n\nlet reverse = string.split('').reverse().join('');\nif (string === reverse) return string;\n\nfor (let i = string.length; i > 0; i--) {\n    let prefix = string.slice(0, i);\n    let reversePrefix = prefix.split('').reverse().join('');\n\n    if (prefix === reversePrefix) {\n        let postfix = string.slice(i);\n        let reversePostfix = postfix.split('').reverse().join('');\n        return string + reversePostfix;\n    }\n}\n\nreturn string + string.slice(1).split('').reverse().join('');}",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\nlet reversed = string.split('').reverse().join('');\nfor(let i = string.length; i >= 0; i--){\n    if(string.substring(0, i) == reversed.substring(reversed.length - i))\n        return string + reversed.substring(i);\n}\nreturn string + reversed; }",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\nlet reversed = string.split('').reverse().join('');\nif (reversed === string) return string;\nfor (let i = string.length; i >= 0; i--) {\n    if (string.slice(0, i) === reversed.slice(reversed.length - i)) {\n        return string + reversed.slice(0, reversed.length - i);\n    }\n}\nreturn string + reversed;",
        "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\nlet reversedString = string.split('').reverse().join('');\n    if (string == reversedString) {\n        return string;\n    }\n    else {\n        for (let i = string.length; i > 0; i--) {\n            let prefix = string.slice(0, i);\n            let reversedPrefix = prefix.split('').reverse().join('');\n            if (prefix == reversedPrefix) {\n                let suffix = string.slice(i);\n                let reversedSuffix = suffix.split('').reverse().join('');\n                return string + reversedSuffix;\n            }\n        }\n    }\n}"
    ],
    [
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\nlet result = '';\nfor(let i = 0; i < a.length; i++){\n    result += a[i] ^ b[i];\n}\nreturn result;",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\nlet result = '';\nfor(let i = 0; i < a.length; i++){\n    result += a[i] ^ b[i];\n}\nreturn result;",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\nlet result = \"\";\nfor(let i = 0; i < a.length; i++){\n    result += (a[i] ^ b[i]).toString();\n}\nreturn result;",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\nlet result = \"\";\nfor(let i = 0; i < a.length; i++){\n    result += a[i] ^ b[i];\n}\nreturn result;",
        "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\nlet result = \"\";\nfor(let i = 0; i < a.length; i++){\n    result += a[i] ^ b[i];\n}\nreturn result;"
    ],
    [
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\nlet result = 1;\nfor(let i = n; i > 0; i--){\n    let factorial = 1;\n    for(let j = i; j > 0; j--){\n        factorial *= j;\n    }\n    result *= factorial;\n}\nreturn result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\nlet result = 1;\nfor(let i=n; i>0; i--){\n    let factorial = 1;\n    for(let j=i; j>0; j--){\n        factorial *= j;\n    }\n    result *= factorial;\n}\nreturn result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\nlet result = 1;\nfor(let i = n; i > 0; i--){\n    let factorial = 1;\n    for(let j = i; j > 0; j--){\n        factorial *= j;\n    }\n    result *= factorial;\n}\nreturn result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\nlet result = 1;\nfor(let i = n; i > 0; i--){\n    let factorial = 1;\n    for(let j = i; j > 0; j--){\n        factorial *= j;\n    }\n    result *= factorial;\n}\nreturn result;\n}",
        "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\nlet result = 1;\nfor(let i = n; i > 0; i--){\n    let factorial = 1;\n    for(let j = i; j > 0; j--){\n        factorial *= j;\n    }\n    result *= factorial;\n}\nreturn result;\n}"
    ],
    [
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\nlet sum = 0;\nfor(let i = 0; i < k; i++){\n    if(arr[i] < 100){\n        sum += arr[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\nlet sum = 0;\nfor(let i = 0; i < k; i++){\n    if(arr[i] < 100){\n        sum += arr[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\nlet sum = 0;\nfor(let i = 0; i < k; i++){\n    if(arr[i] < 100){\n        sum += arr[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\nlet sum = 0;\nfor(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n        sum += arr[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\nlet sum = 0;\nfor(let i = 0; i < k; i++){\n    if(arr[i] < 100){\n        sum += arr[i];\n    }\n}\nreturn sum;"
    ],
    [
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\nif(n <= 0) return 0;\nif(n === 2) return 2;\nif(n === 3) return 0;\n\nlet fib = [0, 0, 2, 0];\n\nfor(let i = 4; i <= n; i++) {\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n}\n\nreturn fib[n];\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\nif(n < 2) return 0;\nif(n === 2) return 2;\nif(n === 3) return 0;\n\nlet fib = [0, 0, 2, 0];\nfor(let i = 4; i <= n; i++) {\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n}\nreturn fib[n];\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\nif (n < 2) return 0;\nif (n === 2) return 2;\nif (n === 3) return 0;\n\nlet a = 0, b = 0, c = 2, d = 0, next;\n\nfor (let i = 4; i <= n; i++) {\n    next = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = next;\n}\nreturn next;",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\nif (n === 0) return 0;\nif (n === 1) return 0;\nif (n === 2) return 2;\nif (n === 3) return 0;\n\nlet fibs = [0, 0, 2, 0];\n\nfor (let i = 4; i <= n; i++) {\n    let nextFib = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n    fibs.shift();\n    fibs.push(nextFib);\n}\n\nreturn fibs[3];\n}",
        "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\nif (n == 0) return 0;\nif (n == 1) return 0;\nif (n == 2) return 2;\nif (n == 3) return 0;\n\nlet fib = [0, 0, 2, 0];\n\nfor (let i = 4; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n}\n\nreturn fib[n];\n}"
    ],
    [
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\nreturn x.filter(num => !num.toString().split('').some(digit => digit % 2 === 0)).sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\nreturn x.filter(num => !/[02468]/.test(num)).sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\nlet result = x.filter(num => !num.toString().split('').some(digit => digit % 2 === 0));\nreturn result.sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\nreturn x.filter(num => !num.toString().split('').some(digit => digit % 2 === 0)).sort((a, b) => a - b);\n}",
        "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\nreturn x.filter(num => !num.toString().split('').some(digit => digit % 2 === 0)).sort((a, b) => a - b);\n}"
    ],
    [
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\nif(s === \"\") return [];\n  \n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let words = s.split(' ');\n  let result = [];\n  \n  for(let word of words){\n    let consonantCount = 0;\n    for(let char of word){\n      if(!vowels.includes(char.toLowerCase())){\n        consonantCount++;\n      }\n    }\n    if(consonantCount === n){\n      result.push(word);\n    }\n  }\n  return result;\n}",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\nif (s === \"\") return [];\n\nconst vowels = ['a', 'e', 'i', 'o', 'u'];\nlet words = s.split(' ');\nlet result = [];\n\nfor (let word of words) {\n    let consonantsCount = 0;\n    for (let char of word) {\n        if (!vowels.includes(char.toLowerCase())) {\n            consonantsCount++;\n        }\n    }\n    if (consonantsCount === n) {\n        result.push(word);\n    }\n}\n\nreturn result;",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\nif(s.length === 0) return [];\n\nconst words = s.split(' ');\nconst vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\nlet result = [];\n\nfor(let word of words) {\n    let consonantsCount = 0;\n    for(let char of word) {\n        if(!vowels.includes(char)) {\n            consonantsCount++;\n        }\n    }\n    if(consonantsCount === n) {\n        result.push(word);\n    }\n}\n\nreturn result;",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\nif(s === \"\") return [];\n\nlet words = s.split(\" \");\nlet consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\nlet result = [];\n\nfor(let word of words){\n    let count = 0;\n    for(let char of word){\n        if(consonants.includes(char)) count++;\n    }\n    if(count === n) result.push(word);\n}\n\nreturn result;",
        "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\nif (s === \"\") {\n        return [];\n    }\n\n    let words = s.split(\" \");\n    let result = [];\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"];\n\n    for (let word of words) {\n        let consonantsCount = 0;\n        for (let letter of word) {\n            if (!vowels.includes(letter)) {\n                consonantsCount++;\n            }\n        }\n        if (consonantsCount === n) {\n            result.push(word);\n        }\n    }\n\n    return result;"
    ],
    [
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n// check if array is palindrome\nfunction isPalindrome(arr) {\n    return arr.toString() == arr.reverse().toString();\n}\n\n// calculate sum of array\nfunction sumArray(arr) {\n    return arr.reduce((a, b) => a + b, 0);\n}\n\n// check if it's balanced and sum of elements is less than or equal to w\nreturn isPalindrome(q) && sumArray(q) <= w;",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n// Check if array is palindromic\nlet isPalindromic = q.toString() === q.reverse().toString();\n\n// Calculate the sum of array elements\nlet sum = q.reduce((a, b) => a + b, 0);\n\n// Return true if array is palindromic and sum is less than or equal to w\nreturn isPalindromic && sum <= w;",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n// Check if the array is palindromic\nlet isPalindromic = q.toString() === q.reverse().toString();\n\n// Calculate the sum of the array elements\nlet sum = q.reduce((a, b) => a + b, 0);\n\n// Return true if the array is palindromic and the sum is less than or equal to the maximum weight\nreturn isPalindromic && sum <= w;",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n// Check if array is palindromic\nlet isPalindromic = q.toString() === q.reverse().toString();\n// Check if sum of array elements is less than or equal to w\nlet sum = q.reduce((a, b) => a + b, 0);\nreturn isPalindromic && sum <= w;\n}",
        "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n// Check if array is palindromic\nlet isPalindromic = q.toString() === q.reverse().toString();\n\n// Calculate sum of array elements\nlet sum = q.reduce((a, b) => a + b, 0);\n\n// Return true if array is palindromic and sum is less than or equal to w\nreturn isPalindromic && sum <= w;"
    ],
    [
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\nif(n <= 2) {\n    return 1;\n} else {\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++) {\n        fibNums.push(fibNums[i-1] + fibNums[i-2]);\n    }\n    return fibNums[n-1];\n}\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\nif(n <= 2) {\n    return 1;\n} else {\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++) {\n        fibNums.push(fibNums[i - 1] + fibNums[i - 2]);\n    }\n    return fibNums[n - 1];\n}}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\nif (n <= 1)\n    return n;\nelse\n    return fib(n - 1) + fib(n - 2);\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\nif(n <= 1)\n    return n;\nelse\n    return fib(n - 1) + fib(n - 2);\n}",
        "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\nif(n <= 1)\n    return n;\nelse\n    return fib(n - 1) + fib(n - 2);\n}"
    ],
    [
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\nlet strongestExtension = extensions[0];\nlet highestStrength = getStrength(strongestExtension);\n\nfor (let i = 1; i < extensions.length; i++) {\n    let currentStrength = getStrength(extensions[i]);\n    if (currentStrength > highestStrength) {\n        highestStrength = currentStrength;\n        strongestExtension = extensions[i];\n    }\n}\n\nreturn `${class_name}.${strongestExtension}`;\n}\n\nfunction getStrength(extension) {\nlet CAP = 0;\nlet SM = 0;\n\nfor (let i = 0; i < extension.length; i++) {\n    if (extension[i] === extension[i].toUpperCase()) {\n        CAP++;\n    } else {\n        SM++;\n    }\n}\n\nreturn CAP - SM;\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\nlet strongest_ext = \"\";\nlet max_strength = -Infinity;\n\nfor(let i = 0; i < extensions.length; i++){\n    let CAP = 0, SM = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n        if(extensions[i][j] === extensions[i][j].toUpperCase()){\n            CAP++;\n        } else {\n            SM++;\n        }\n    }\n    let strength = CAP - SM;\n    if(strength > max_strength){\n        max_strength = strength;\n        strongest_ext = extensions[i];\n    }\n}\n\nreturn class_name + \".\" + strongest_ext;\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\nlet strongestExtension = \"\";\nlet maxStrength = -Infinity;\n\nfor (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let cap = 0;\n    let sm = 0;\n\n    for (let j = 0; j < extension.length; j++) {\n        if (extension[j] === extension[j].toUpperCase()) {\n            cap++;\n        } else {\n            sm++;\n        }\n    }\n\n    let strength = cap - sm;\n\n    if (strength > maxStrength) {\n        maxStrength = strength;\n        strongestExtension = extension;\n    }\n}\n\nreturn `${class_name}.${strongestExtension}`;\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\nlet strongestExtension = extensions[0];\nlet maxStrength = getStrength(extensions[0]);\n\nfor(let i = 1; i < extensions.length; i++) {\n    let currentStrength = getStrength(extensions[i]);\n    if(currentStrength > maxStrength) {\n        maxStrength = currentStrength;\n        strongestExtension = extensions[i];\n    }\n}\n\nreturn `${class_name}.${strongestExtension}`;\n\nfunction getStrength(extension) {\n    let cap = 0;\n    let sm = 0;\n    for(let i = 0; i < extension.length; i++) {\n        if(extension[i] === extension[i].toUpperCase()) {\n            cap++;\n        } else {\n            sm++;\n        }\n    }\n    return cap - sm;\n}\n}",
        "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\nlet strongestExtension = '';\nlet maxStrength = -Infinity;\n\nfor (let i = 0; i < extensions.length; i++) {\n    let cap = 0;\n    let sm = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n        if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n            cap++;\n        } else {\n            sm++;\n        }\n    }\n    let strength = cap - sm;\n    if (strength > maxStrength) {\n        maxStrength = strength;\n        strongestExtension = extensions[i];\n    }\n}\n\nreturn `${class_name}.${strongestExtension}`;\n}"
    ],
    [
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n// Count the number of open and close parentheses in both strings\nlet openCount = 0;\nlet closeCount = 0;\n\nfor (let str of lst) {\n    for (let char of str) {\n        if (char === '(') {\n            openCount++;\n        } else if (char === ')') {\n            closeCount++;\n        }\n    }\n}\n\n// If the number of open and close parentheses are equal, it is possible to form a balanced string\nif (openCount === closeCount) {\n    return 'Yes';\n} else {\n    return 'No';\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n// count the number of open and close parentheses in both strings\nlet openParens = 0;\nlet closeParens = 0;\n\nfor (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n        if (lst[i][j] === '(') {\n            openParens++;\n        } else if (lst[i][j] === ')') {\n            closeParens++;\n        }\n    }\n}\n\n// if the number of open and close parentheses is equal, return 'Yes'\nif (openParens === closeParens) {\n    return 'Yes';\n} else {\n    return 'No';\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n// Initialize counters for open and close parentheses\nlet openCount = 0;\nlet closeCount = 0;\n\n// Loop through each string in the array\nfor (let str of lst) {\n    // Loop through each character in the string\n    for (let char of str) {\n        // If the character is an open parenthesis, increment the open count\n        if (char === '(') {\n            openCount++;\n        }\n        // If the character is a close parenthesis, increment the close count\n        else if (char === ')') {\n            closeCount++;\n        }\n    }\n}\n\n// If the counts of open and close parentheses are equal, return 'Yes'\nif (openCount === closeCount) {\n    return 'Yes';\n}\n// Otherwise, return 'No'\nelse {\n    return 'No';\n}",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\nlet str1 = lst[0];\nlet str2 = lst[1];\n\nlet count1 = 0;\nlet count2 = 0;\n\nfor(let i = 0; i < str1.length; i++) {\n    if(str1[i] === '(') {\n        count1++;\n    } else {\n        count1--;\n    }\n    if(count1 < 0) {\n        return 'No';\n    }\n}\n\nfor(let i = 0; i < str2.length; i++) {\n    if(str2[i] === '(') {\n        count2++;\n    } else {\n        count2--;\n    }\n    if(count2 < 0 && count1 <= 0) {\n        return 'No';\n    }\n}\n\nreturn count1 + count2 === 0 ? 'Yes' : 'No';",
        "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n// Count the number of open and close parentheses in both strings\n  var open = 0;\n  var close = 0;\n  \n  for (var i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  \n  for (var i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  \n  // If the number of open and close parentheses are equal, return 'Yes'\n  if (open === close) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}"
    ],
    [
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\nlet uniqueArray = [...new Set(lst)];\nif (uniqueArray.length < 2) return undefined;\nuniqueArray.sort((a, b) => a - b);\nreturn uniqueArray[1];}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\nlet uniqueArray = [...new Set(lst)];\nif(uniqueArray.length < 2) {\n    return undefined;\n} else {\n    uniqueArray.sort((a, b) => a - b);\n    return uniqueArray[1];\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\nlet uniqueArray = [...new Set(lst)];\nif (uniqueArray.length < 2) {\n    return undefined;\n} else {\n    uniqueArray.sort((a, b) => a - b);\n    return uniqueArray[1];\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\nlet uniqueArray = [...new Set(lst)]; // remove duplicates\nif(uniqueArray.length < 2) return undefined; // if there is no 2nd smallest element\nuniqueArray.sort((a, b) => a - b); // sort in ascending order\nreturn uniqueArray[1]; // return the 2nd smallest element\n}",
        "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\nlet uniqueArray = [...new Set(lst)];\nif (uniqueArray.length < 2) return undefined;\nuniqueArray.sort((a, b) => a - b);\nreturn uniqueArray[1];\n}"
    ],
    [
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\nif (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return (x + y === z) || (x + z === y) || (y + z === x);\n} else {\n    return false;\n}\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\nif (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    }\n}\nreturn false;\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\nif(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x + y === z || x + z === y || y + z === x){\n        return true;\n    }\n}\nreturn false;\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\nif (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return (x + y === z) || (x + z === y) || (y + z === x);\n} else {\n    return false;\n}\n}",
        "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\nif (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return (x === y + z) || (y === x + z) || (z === x + y);\n} else {\n    return false;\n}\n}"
    ],
    [
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\nreturn number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\nreturn number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\nreturn number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\nreturn number - Math.floor(number);\n}",
        "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\nreturn number - Math.floor(number);\n}"
    ],
    [
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\nreturn l.map(num => num + 1);",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\nreturn l.map(num => num + 1);",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\nreturn l.map(num => num + 1);",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\nreturn l.map(num => num + 1);",
        "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\nreturn l.map(num => num + 1);"
    ],
    [
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n// Function to check if number is prime\nfunction isPrime(num) {\n    for(let i = 2; i < num; i++)\n        if(num % i === 0) return false;\n    return num > 1;\n}\n\n// Check if n is prime and return x or y accordingly\nif(isPrime(n)) {\n    return x;\n} else {\n    return y;\n}}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n  if (num <= 1) {\n    return false;\n  }\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Main function\nif (isPrime(n)) {\n  return x;\n} else {\n  return y;\n}\n}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n// Function to check if a number is prime\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\n// Check if n is prime\nif (isPrime(n)) {\n    return x;\n} else {\n    return y;\n}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    for (let i = 2; i < Math.sqrt(num) + 1; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\n// Main function\nif (isPrime(n)) {\n    return x;\n} else {\n    return y;\n}}",
        "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if(num % i === 0) return false; \n  return true;\n}\n\n// main function\nif(isPrime(n)) {\n  return x;\n} else {\n  return y;\n}"
    ],
    [
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\nreturn Math.pow(2, n) % p;",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\nreturn Math.pow(2, n) % p;",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\nreturn Math.pow(2, n) % p;",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\nreturn Math.pow(2, n) % p;",
        "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\nreturn Math.pow(2, n) % p;"
    ],
    [
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\nlet strNum = Math.abs(num).toString();\nlet evenCount = 0;\nlet oddCount = 0;\n\nfor(let i = 0; i < strNum.length; i++){\n    if(parseInt(strNum[i]) % 2 === 0){\n        evenCount++;\n    } else {\n        oddCount++;\n    }\n}\n\nreturn [evenCount, oddCount];",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\nlet numString = Math.abs(num).toString();\nlet evenCount = 0;\nlet oddCount = 0;\n\nfor(let i = 0; i < numString.length; i++){\n    if(parseInt(numString[i]) % 2 === 0){\n        evenCount++;\n    } else {\n        oddCount++;\n    }\n}\n\nreturn [evenCount, oddCount];",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\nlet strNum = Math.abs(num).toString();\nlet evenCount = 0;\nlet oddCount = 0;\n\nfor(let i = 0; i < strNum.length; i++){\n    if(parseInt(strNum[i]) % 2 == 0){\n        evenCount++;\n    } else {\n        oddCount++;\n    }\n}\n\nreturn [evenCount, oddCount];",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\nlet strNum = Math.abs(num).toString();\nlet evenCount = 0;\nlet oddCount = 0;\n\nfor(let i = 0; i < strNum.length; i++){\n    if(parseInt(strNum[i]) % 2 === 0){\n        evenCount++;\n    } else {\n        oddCount++;\n    }\n}\n\nreturn [evenCount, oddCount];",
        "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\nlet strNum = Math.abs(num).toString();\nlet evenCount = 0;\nlet oddCount = 0;\n\nfor(let i = 0; i < strNum.length; i++){\n    if(parseInt(strNum[i]) % 2 === 0){\n        evenCount++;\n    } else {\n        oddCount++;\n    }\n}\n\nreturn [evenCount, oddCount];"
    ],
    [
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\nif(s.length < 3) {\n    return false;\n}\n\nfor(let i = 0; i < s.length - 2; i++) {\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) {\n        return false;\n    }\n}\n\nreturn true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\nif(s.length < 3) {\n    return false;\n}\n\nfor(let i = 0; i < s.length - 2; i++) {\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) {\n        return false;\n    }\n}\n\nreturn true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\nif(s.length < 3) {\n    return false;\n}\n\nfor(let i = 0; i < s.length - 2; i++) {\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) {\n        return false;\n    }\n}\n\nreturn true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\nif(s.length < 3) {\n    return false;\n}\n\nfor(let i = 0; i < s.length - 2; i++) {\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) {\n        return false;\n    }\n}\n\nreturn true;\n}",
        "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\nif (s.length < 3) {\n    return false;\n}\nfor (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n        return false;\n    }\n}\nreturn true;\n}"
    ],
    [
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\nlet maxPrime = -1;\n\nwhile (n % 2 == 0) {\n    maxPrime = 2;\n    n >>= 1; // equivalent to n /= 2\n}\n\nfor (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n        maxPrime = i;\n        n = n / i;\n    }\n}\n\nif (n > 2) {\n    maxPrime = n;\n}\n\nreturn maxPrime;\n}",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\nlet maxPrime = -1;\n\n// Check for divisibility by 2\nwhile (n % 2 == 0) {\n    maxPrime = 2;\n    n >>= 1; // equivalent to n /= 2\n}\n\n// Check for odd numbers up to the square root of n\nfor (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n        maxPrime = i;\n        n = n / i;\n    }\n}\n\n// This condition is to handle the case when n is a prime number\n// greater than 2\nif (n > 2) {\n    maxPrime = n;\n}\n\nreturn maxPrime;",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\nlet maxPrime = -1;\n\n// Divide n by 2 until n is not divisible\nwhile (n % 2 == 0) {\n    maxPrime = 2;\n    n >>= 1; // equivalent to n /= 2\n}\n\n// n must be odd at this point, thus skip the even numbers and iterate only for odd\nfor (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n        maxPrime = i;\n        n = n / i;\n    }\n}\n\n// This condition is to handle the case when n is a prime number greater than 2\nif (n > 2) {\n    maxPrime = n;\n}\n\nreturn maxPrime;",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\nlet i = 2;\nwhile (i * i <= n) {\n    if (n % i)\n        i++;\n    else\n        n /= i;\n}\nreturn n;",
        "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\nlet i = 2;\nwhile (i <= n) {\n    if (n % i == 0) {\n        n = n / i;    \n    } else {\n        i++;\n    }\n}\nreturn i;"
    ],
    [
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\nlet sum = 0;\nfor(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n        sum += s.charCodeAt(i);\n    }\n}\nreturn sum;",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\nlet sum = 0;\nfor(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n        sum += s.charCodeAt(i);\n    }\n}\nreturn sum;",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\nlet sum = 0;\nfor(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n        sum += s.charCodeAt(i);\n    }\n}\nreturn sum;",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\nlet sum = 0;\nfor(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n        sum += s.charCodeAt(i);\n    }\n}\nreturn sum;",
        "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\nlet sum = 0;\nfor(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n        sum += s.charCodeAt(i);\n    }\n}\nreturn sum;"
    ],
    [
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\nlet min = Math.min(...numbers);\nlet max = Math.max(...numbers);\n\nreturn numbers.map(num => (num - min) / (max - min));\n}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\nlet min = Math.min(...numbers);\nlet max = Math.max(...numbers);\nreturn numbers.map(num => (num - min) / (max - min));}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\nlet min = Math.min(...numbers);\nlet max = Math.max(...numbers);\nreturn numbers.map(num => (num - min) / (max - min));}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\nlet min = Math.min(...numbers);\nlet max = Math.max(...numbers);\n\nreturn numbers.map(number => (number - min) / (max - min));}",
        "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\nlet min = Math.min(...numbers);\nlet max = Math.max(...numbers);\n\nreturn numbers.map(num => (num - min) / (max - min));"
    ],
    [
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(i % 2 == 0 && lst[i] % 2 != 0){\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++) {\n    if(i % 2 === 0 && lst[i] % 2 !== 0) {\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n        sum += lst[i];\n    }\n}\nreturn sum;"
    ],
    [
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\nlet smallestEven = Infinity;\nlet index = -1;\n\nfor(let i = 0; i < arr.length; i++) {\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven) {\n        smallestEven = arr[i];\n        index = i;\n    }\n}\n\nif(smallestEven === Infinity) {\n    return [];\n} else {\n    return [smallestEven, index];\n}\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\nlet smallestEven = Infinity;\nlet smallestIndex = -1;\n\nfor(let i = 0; i < arr.length; i++) {\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven) {\n        smallestEven = arr[i];\n        smallestIndex = i;\n    }\n}\n\nif(smallestEven === Infinity) {\n    return [];\n} else {\n    return [smallestEven, smallestIndex];\n}\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\nlet smallestEven = Infinity;\nlet smallestIndex = -1;\n\nfor(let i = 0; i < arr.length; i++) {\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven) {\n        smallestEven = arr[i];\n        smallestIndex = i;\n    }\n}\n\nif(smallestEven === Infinity) {\n    return [];\n} else {\n    return [smallestEven, smallestIndex];\n}\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\nlet smallestEven = Infinity;\nlet index = -1;\n\nfor(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n        smallestEven = arr[i];\n        index = i;\n    }\n}\n\nif(smallestEven === Infinity){\n    return [];\n}else{\n    return [smallestEven, index];\n}\n}",
        "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\nlet smallestEven = Infinity;\nlet index = -1;\n\nfor(let i = 0; i < arr.length; i++) {\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven) {\n        smallestEven = arr[i];\n        index = i;\n    }\n}\n\nif(smallestEven === Infinity) {\n    return [];\n} else {\n    return [smallestEven, index];\n}\n}"
    ],
    [
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = new Array(n);\n    let count = 0;\n\n    for(let i = 1; i <= n; i++) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n\n    let count = 0;\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n// Create the array\nlet a = [];\nfor(let i = 1; i <= n; i++){\n    a.push(i * i - i + 1);\n}\n\nlet count = 0;\n\n// Check all possible triples\nfor(let i = 0; i < n; i++){\n    for(let j = i + 1; j < n; j++){\n        for(let k = j + 1; k < n; k++){\n            if((a[i] + a[j] + a[k]) % 3 === 0){\n                count++;\n            }\n        }\n    }\n}\n\nreturn count;",
        "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\nlet a = [];\n  for(let i = 1; i <= n; i++){\n    a.push(i*i - i + 1);\n  }\n\n  let count = 0;\n  for(let i = 0; i < n; i++){\n    for(let j = i+1; j < n; j++){\n      for(let k = j+1; k < n; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"
    ],
    [
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n// count the number of odd numbers in lst1\nlet oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n\n// count the number of even numbers in lst2\nlet evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n// if the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2\n// then it's possible to exchange elements to make lst1 an array of only even numbers\nif (oddCount1 <= evenCount2) {\n    return \"YES\";\n} else {\n    return \"NO\";\n}\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n// count the odd numbers in lst1 and even numbers in lst2\nlet oddInLst1 = lst1.filter(num => num % 2 !== 0).length;\nlet evenInLst2 = lst2.filter(num => num % 2 === 0).length;\n\n// if the count of odd numbers in lst1 is less than or equal to the count of even numbers in lst2\n// then we can exchange the odd numbers in lst1 with the even numbers in lst2\n// and make all the numbers in lst1 even\nif (oddInLst1 <= evenInLst2) {\n    return \"YES\";\n} else {\n    return \"NO\";\n}\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n// Count the number of odd numbers in lst1\nlet oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n\n// Count the number of even numbers in lst2\nlet evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n// If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2, return \"YES\"\n// Else, return \"NO\"\nreturn oddCount1 <= evenCount2 ? \"YES\" : \"NO\";",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n// count odd numbers in lst1\n    let oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n\n    // count even numbers in lst2\n    let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n    // if there are more or equal even numbers in lst2 than odd numbers in lst1, return \"YES\"\n    if (evenCount2 >= oddCount1) {\n        return \"YES\";\n    }\n\n    // otherwise, return \"NO\"\n    return \"NO\";\n}",
        "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n// Count the number of odd numbers in lst1\nlet oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n\n// Count the number of even numbers in lst2\nlet evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n// If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2,\n// it means we can exchange all odd numbers in lst1 with even numbers in lst2\nif (oddCount1 <= evenCount2) {\n    return \"YES\";\n} else {\n    return \"NO\";\n}\n"
    ],
    [
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\nl.sort(function(a, b){return a-b});\nvar half = Math.floor(l.length / 2);\n\nif(l.length % 2)\n    return l[half];\nelse\n    return (l[half - 1] + l[half]) / 2.0;",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\nl.sort(function(a, b){return a-b});\nvar half = Math.floor(l.length/2);\n\nif(l.length % 2)\n    return l[half];\nelse\n    return (l[half-1] + l[half]) / 2.0;\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\nl.sort((a, b) => a - b);\nlet len = l.length;\nif (len % 2 === 0) {\n    return (l[len / 2 - 1] + l[len / 2]) / 2;\n} else {\n    return l[(len - 1) / 2];\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\nl.sort(function(a, b){return a-b});\nvar half = Math.floor(l.length/2);\n\nif(l.length % 2)\n    return l[half];\nelse\n    return (l[half-1] + l[half]) / 2.0;\n}",
        "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\nl.sort(function(a, b){return a-b});\nvar middle = Math.floor(l.length / 2);\n\nif(l.length % 2)\n    return l[middle];\nelse\n    return (l[middle - 1] + l[middle]) / 2.0;\n}"
    ],
    [
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\n// Check if the length of the string is a prime number\nreturn isPrime(string.length);",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n    if(num < 2) return false;\n    for(let i = 2; i < num; i++)\n        if(num % i === 0) return false;\n    return true;\n}\n\n// Check if the length of the string is prime\nreturn isPrime(string.length);",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\nlet length = string.length;\nif(length < 2) return false;\nfor(let i = 2; i < length; i++){\n    if(length % i === 0) return false;\n}\nreturn true;\n}",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\n// main function\nlet length = string.length;\nreturn isPrime(length);",
        "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n    for (let i = 3; i * i <= num; i += 2) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\n// get the length of the string\nlet length = string.length;\n\n// check if the length is prime\nreturn isPrime(length);"
    ],
    [
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\nlet start = 0;\nlet end = arr.length - 1;\nlet changes = 0;\n\nwhile (start <= end) {\n    if (arr[start] !== arr[end]) {\n        changes++;\n    }\n    start++;\n    end--;\n}\n\nreturn changes;",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\nlet start = 0;\nlet end = arr.length - 1;\nlet changes = 0;\n\nwhile(start <= end) {\n    if(arr[start] !== arr[end]) {\n        changes++;\n    }\n    start++;\n    end--;\n}\n\nreturn changes;  \n}",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\nlet start = 0;\nlet end = arr.length - 1;\nlet changes = 0;\n\nwhile (start <= end) {\n    if (arr[start] !== arr[end]) {\n        changes++;\n    }\n    start++;\n    end--;\n}\n\nreturn changes;",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\nlet i = 0;\nlet j = arr.length - 1;\nlet changes = 0;\n\nwhile(i < j) {\n    if(arr[i] !== arr[j]) {\n        changes++;\n    }\n    i++;\n    j--;\n}\n\nreturn changes;",
        "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\nlet i = 0;\nlet j = arr.length - 1;\nlet changes = 0;\n\nwhile(i < j) {\n    if(arr[i] !== arr[j]) {\n        changes++;\n    }\n    i++;\n    j--;\n}\n\nreturn changes;"
    ],
    [
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\nlet sum = 0;\nfor(let i=0; i<lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n}\nreturn sum;",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n}\nreturn sum;",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    let num = Math.ceil(lst[i]);\n    sum += num * num;\n}\nreturn sum;",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    let num = Math.ceil(lst[i]);\n    sum += num * num;\n}\nreturn sum;",
        "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n}\nreturn sum;"
    ],
    [
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\nlet parts = file_name.split('.');\nlet digitCount = file_name.replace(/[^0-9]/g,\"\").length;\n\nif (parts.length !== 2) {\n    return 'No';\n}\n\nif (digitCount > 3) {\n    return 'No';\n}\n\nif (!/^[a-zA-Z]/.test(parts[0]) || parts[0] === '') {\n    return 'No';\n}\n\nif (!['txt', 'exe', 'dll'].includes(parts[1])) {\n    return 'No';\n}\n\nreturn 'Yes';\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\nlet splitName = file_name.split(\".\");\n    let digitCount = file_name.replace(/[^0-9]/g,\"\").length;\n    let validExtensions = ['txt', 'exe', 'dll'];\n\n    if (digitCount > 3) {\n        return 'No';\n    }\n\n    if (splitName.length !== 2) {\n        return 'No';\n    }\n\n    if (!splitName[0] || !/^[a-zA-Z]/.test(splitName[0])) {\n        return 'No';\n    }\n\n    if (!validExtensions.includes(splitName[1])) {\n        return 'No';\n    }\n\n    return 'Yes';\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\nlet extension = ['txt', 'exe', 'dll'];\nlet splitName = file_name.split(\".\");\nlet digitCount = (file_name.match(/\\d/g) || []).length;\n\nif (splitName.length !== 2) {\n    return 'No';\n}\n\nif (digitCount > 3) {\n    return 'No';\n}\n\nif (!/^[a-zA-Z]/.test(splitName[0]) || splitName[0] === '') {\n    return 'No';\n}\n\nif (!extension.includes(splitName[1])) {\n    return 'No';\n}\n\nreturn 'Yes';\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\nlet regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$/;\n    if (regex.test(file_name)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}",
        "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\nlet parts = file_name.split('.');\n    let name = parts[0];\n    let extension = parts[1];\n\n    if (parts.length !== 2) {\n        return 'No';\n    }\n\n    if (!name || !name.match(/^[a-zA-Z]/)) {\n        return 'No';\n    }\n\n    if (name.replace(/[^\\d]/g, '').length > 3) {\n        return 'No';\n    }\n\n    if (!['txt', 'exe', 'dll'].includes(extension)) {\n        return 'No';\n    }\n\n    return 'Yes';\n}"
    ],
    [
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\nfor(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n        for(let k = j + 1; k < l.length; k++) {\n            if(l[i] + l[j] + l[k] === 0) {\n                return true;\n            }\n        }\n    }\n}\nreturn false;",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\nfor(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n        for(let k = j + 1; k < l.length; k++) {\n            if(l[i] + l[j] + l[k] === 0) {\n                return true;\n            }\n        }\n    }\n}\nreturn false;",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\nfor(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n        for(let k = j + 1; k < l.length; k++) {\n            if(l[i] + l[j] + l[k] === 0) {\n                return true;\n            }\n        }\n    }\n}\nreturn false;",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\nfor(let i = 0; i < l.length - 2; i++) {\n    for(let j = i + 1; j < l.length - 1; j++) {\n        for(let k = j + 1; k < l.length; k++) {\n            if(l[i] + l[j] + l[k] === 0) {\n                return true;\n            }\n        }\n    }\n}\nreturn false;",
        "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\nfor (let i = 0; i < l.length - 2; i++) {\n    for (let j = i + 1; j < l.length - 1; j++) {\n        for (let k = j + 1; k < l.length; k++) {\n            if (l[i] + l[j] + l[k] === 0) {\n                return true;\n            }\n        }\n    }\n}\nreturn false;"
    ],
    [
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n// Find the intersection\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n\n  // If the intervals don't intersect\n  if (start > end) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  let length = end - start;\n\n  // Check if the length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n\n  for (let i = 2; i * i <= length; i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n// calculate the intersection\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  \n  // check if there is an intersection\n  if (end < start) {\n    return \"NO\";\n  }\n  \n  // calculate the length of the intersection\n  const length = end - start;\n  \n  // check if the length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n  \n  for (let i = 2; i * i <= length; i++) {\n    if (length % i == 0) {\n      return \"NO\";\n    }\n  }\n  \n  return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n// Find the intersection of the two intervals\n    var start = Math.max(interval1[0], interval2[0]);\n    var end = Math.min(interval1[1], interval2[1]);\n\n    // If the intervals do not intersect, return \"NO\"\n    if (start > end) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    var length = end - start;\n\n    // Check if the length is a prime number\n    if (length < 2) {\n        return \"NO\";\n    }\n    for (var i = 2; i * i <= length; i++) {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n// Calculate the intersection\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  \n  // If the intervals do not intersect, return \"NO\"\n  if (start > end) return \"NO\";\n\n  // Calculate the length of the intersection\n  let length = end - start;\n\n  // Check if the length is a prime number\n  if (length < 2) return \"NO\";\n  for (let i = 2; i * i <= length; i++) {\n    if (length % i === 0) return \"NO\";\n  }\n  return \"YES\";\n}",
        "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n// Find the intersection\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    // If there's no intersection\n    if (start > end) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    let length = end - start + 1;\n\n    // Check if the length is a prime number\n    if (length < 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}"
    ],
    [
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\nlet result = [];\nlet stack = [];\nlet group = '';\n\nparen_string = paren_string.replace(/\\s/g, '');\n\nfor (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n        stack.push(paren_string[i]);\n        group += paren_string[i];\n    } else if (paren_string[i] === ')') {\n        stack.pop();\n        group += paren_string[i];\n        if (stack.length === 0) {\n            result.push(group);\n            group = '';\n        }\n    }\n}\n\nreturn result;",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\nlet result = [];\nlet stack = [];\nlet group = \"\";\n\nparen_string = paren_string.replace(/\\s/g, \"\");\n\nfor(let i = 0; i < paren_string.length; i++) {\n    if(paren_string[i] === \"(\") {\n        stack.push(paren_string[i]);\n    } else if(paren_string[i] === \")\") {\n        stack.pop();\n    }\n    group += paren_string[i];\n    \n    if(stack.length === 0) {\n        result.push(group);\n        group = \"\";\n    }\n}\n\nreturn result;",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\nlet result = [];\nlet stack = [];\nlet group = '';\n\nparen_string = paren_string.replace(/\\s/g, '');\n\nfor(let i = 0; i < paren_string.length; i++) {\n    if(paren_string[i] === '(') {\n        stack.push('(');\n        group += '(';\n    }\n    else if(paren_string[i] === ')') {\n        stack.pop();\n        group += ')';\n        if(stack.length === 0) {\n            result.push(group);\n            group = '';\n        }\n    }\n}\n\nreturn result;",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\nlet result = [];\nlet stack = [];\nlet group = '';\n\nparen_string = paren_string.replace(/\\s/g, ''); // remove spaces\n\nfor (let i = 0; i < paren_string.length; i++) {\n    let char = paren_string[i];\n    group += char;\n\n    if (char === '(') {\n        stack.push(char);\n    } else if (char === ')') {\n        stack.pop();\n        if (stack.length === 0) {\n            result.push(group);\n            group = '';\n        }\n    }\n}\n\nreturn result;",
        "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\nlet result = [];\nlet stack = [];\nlet group = '';\n\nparen_string = paren_string.replace(/\\s/g, ''); // remove spaces\n\nfor(let i = 0; i < paren_string.length; i++) {\n    let char = paren_string[i];\n    if(char === '(') {\n        stack.push(char);\n        group += char;\n    }\n    else if(char === ')') {\n        stack.pop();\n        group += char;\n        if(stack.length === 0) {\n            result.push(group);\n            group = '';\n        }\n    }\n}\n\nreturn result;"
    ],
    [
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\nreturn game.map((score, index) => Math.abs(score - guess[index]));\n}",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\nlet result = [];\nfor(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n}\nreturn result;",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\nlet result = [];\nfor(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n}\nreturn result;",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\nreturn game.map((score, index) => Math.abs(score - guess[index]));\n}",
        "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\nreturn game.map((score, index) => Math.abs(score - guess[index]));\n}"
    ],
    [
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\nif(n == 1) {\n    return 1;\n} else {\n    return 2 * Math.pow(10, n-1);\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\nif(n == 1) {\n    return 1;\n} else {\n    return 2 * Math.pow(10, n - 1);\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n// There are 10^(n-1) numbers that start with 1 and 10^(n-1) numbers that end with 1\n// But we have to subtract the overlap (numbers that start and end with 1) which is 10^(n-2)\n// So the total count is 2*10^(n-1) - 10^(n-2)\n\nreturn 2 * Math.pow(10, n-1) - Math.pow(10, n-2);\n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\nif(n === 1) {\n    return 1;\n} else {\n    return 2 * Math.pow(10, n - 1);\n} \n}",
        "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\nif(n == 1){\n    return 1;\n} else {\n    return 2 * Math.pow(10, n - 1);\n}"
    ],
    [
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\nif(txt.length === 0) return false;\nlet lastChar = txt[txt.length - 1];\nif(lastChar === \" \") return false;\nif(!lastChar.match(/[a-z]/i)) return false;\nif(txt[txt.length - 2] === \" \") return true;\nreturn false; \n}",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\nif(txt.length === 0) {\n    return false;\n}\nlet lastChar = txt[txt.length - 1];\nif(lastChar === ' ') {\n    return false;\n}\nlet secondLastChar = txt[txt.length - 2];\nreturn /^[a-zA-Z]$/.test(lastChar) && secondLastChar === ' ';\n}",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n// trim the input string\ntxt = txt.trim();\n\n// check if the string is empty\nif (txt.length === 0) {\n    return false;\n}\n\n// get the last character of the string\nlet lastChar = txt[txt.length - 1];\n\n// check if the last character is a letter and not part of a word\nif (lastChar.match(/[a-z]/i) && (txt[txt.length - 2] === ' ' || txt.length === 1)) {\n    return true;\n}\n\nreturn false;",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n// Remove trailing spaces\ntxt = txt.trim();\n\n// Check if the string is empty\nif (txt.length === 0) {\n  return false;\n}\n\n// Get the last character of the string\nlet lastChar = txt[txt.length - 1];\n\n// Check if the last character is a letter\nif (lastChar.match(/[a-z]/i)) {\n  // Check if the last character is part of a word\n  if (txt[txt.length - 2] === ' ') {\n    return true;\n  }\n}\n\nreturn false;",
        "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n// Check if txt is empty\nif (!txt) return false;\n\n// Get the last character\nlet lastChar = txt[txt.length - 1];\n\n// Check if last character is not a space and is an alphabetical character\nif (lastChar !== ' ' && /^[a-zA-Z]$/.test(lastChar)) {\n    // Check if character before last character is a space or start of string\n    if (txt.length === 1 || txt[txt.length - 2] === ' ') {\n        return true;\n    }\n}\n\nreturn false;\n}"
    ],
    [
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n// Split the date string by \"-\"\n  let parts = date.split(\"-\");\n\n  // Check if date string is not empty and has three parts: month, day, year\n  if (parts.length !== 3) {\n    return false;\n  }\n\n  // Parse the parts to integers\n  let month = parseInt(parts[0], 10);\n  let day = parseInt(parts[1], 10);\n  let year = parseInt(parts[2], 10);\n\n  // Check if parts are numbers\n  if (isNaN(month) || isNaN(day) || isNaN(year)) {\n    return false;\n  }\n\n  // Check if month is between 1 and 12\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  // Check if day is valid according to the month\n  if (month === 2) {\n    // February\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  } else if ([4, 6, 9, 11].includes(month)) {\n    // April, June, September, November\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  } else {\n    // January, March, May, July, August, October, December\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n\n  // If all checks passed, the date is valid\n  return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n// Split the date string by '-'\n    let parts = date.split('-');\n\n    // Check if date string is not empty and has correct format\n    if (parts.length !== 3 || parts[0].length !== 2 || parts[1].length !== 2 || parts[2].length !== 4) {\n        return false;\n    }\n\n    // Parse the date parts\n    let month = parseInt(parts[0], 10);\n    let day = parseInt(parts[1], 10);\n    let year = parseInt(parts[2], 10);\n\n    // Check if date parts are numbers\n    if (isNaN(month) || isNaN(day) || isNaN(year)) {\n        return false;\n    }\n\n    // Check if month is valid\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check if day is valid\n    if (day < 1 || day > 31) {\n        return false;\n    }\n\n    // Check if day is valid for specific month\n    if ((month === 4 || month === 6 || month === 9 || month === 11) && day > 30) {\n        return false;\n    }\n\n    // Check if day is valid for February\n    if (month === 2) {\n        // Check for leap year\n        let isLeapYear = (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n        if (day > 29 || (day === 29 && !isLeapYear)) {\n            return false;\n        }\n    }\n\n    // If all checks passed, return true\n    return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\nlet datePattern = /^(\\d{2})-(\\d{2})-(\\d{4})$/;\n    let matchArray = date.match(datePattern);\n    if (matchArray == null) {\n        return false;\n    }\n    let month = matchArray[1];\n    let day = matchArray[2];\n    let year = matchArray[3];\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day == 31) {\n        return false;\n    }\n    if (month == 2) {\n        let isLeap = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n        if (day > 29 || (day == 29 && !isLeap)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\nconst datePattern = /^(\\d{2})-(\\d{2})-(\\d{4})$/;\n    const match = date.match(datePattern);\n    \n    if (!match) {\n        return false;\n    }\n\n    const month = parseInt(match[1], 10);\n    const day = parseInt(match[2], 10);\n    const year = parseInt(match[3], 10);\n\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    if (day < 1 || day > 31) {\n        return false;\n    }\n\n    if ([4, 6, 9, 11].includes(month) && day > 30) {\n        return false;\n    }\n\n    if (month === 2) {\n        const isLeapYear = (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n        if (day > 29 || (day === 29 && !isLeapYear)) {\n            return false;\n        }\n    }\n\n    return true;\n}",
        "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n// Split the date string by \"-\"\n  let dateParts = date.split(\"-\");\n  \n  // Check if the date string is empty or not in the correct format\n  if (dateParts.length !== 3 || dateParts[0].length !== 2 || dateParts[1].length !== 2 || dateParts[2].length !== 4) {\n    return false;\n  }\n  \n  // Parse the month, day, and year from the date string\n  let month = parseInt(dateParts[0]);\n  let day = parseInt(dateParts[1]);\n  let year = parseInt(dateParts[2]);\n\n  // Check if the month is valid\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  \n  // Check if the day is valid\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  \n  // Check the number of days in February\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  \n  // Check the number of days in months with 30 days\n  if ([4, 6, 9, 11].includes(month) && day > 30) {\n    return false;\n  }\n  \n  // If all checks pass, return true\n  return true;\n}"
    ],
    [
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\nlet count = 0;\nfor(let i = 0; i < arr.length; i++){\n    let sum = 0;\n    let num = arr[i].toString();\n    for(let j = 0; j < num.length; j++){\n        if(num[j] !== '-'){\n            sum += parseInt(num[j]);\n        } else {\n            sum -= parseInt(num[j+1]);\n            j++;\n        }\n    }\n    if(sum > 0){\n        count++;\n    }\n}\nreturn count;",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\nlet count = 0;\n\nfor(let i = 0; i < arr.length; i++){\n    let sum = 0;\n    let num = arr[i].toString().split('');\n\n    for(let j = 0; j < num.length; j++){\n        if(num[j] !== '-'){\n            sum += parseInt(num[j]);\n        }else{\n            sum -= parseInt(num[j+1]);\n            j++;\n        }\n    }\n\n    if(sum > 0){\n        count++;\n    }\n}\n\nreturn count;",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\nlet count = 0;\nfor(let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = arr[i].toString();\n    for(let j = 0; j < num.length; j++) {\n        if(num[j] === '-') {\n            sum -= parseInt(num[j + 1]);\n            j++;\n        } else {\n            sum += parseInt(num[j]);\n        }\n    }\n    if(sum > 0) {\n        count++;\n    }\n}\nreturn count;\n}",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\nlet count = 0;\nfor(let i = 0; i < arr.length; i++){\n    let sum = 0;\n    let num = arr[i].toString();\n    for(let j = 0; j < num.length; j++){\n        if(num[j] !== '-'){\n            sum += parseInt(num[j]);\n        }else{\n            sum -= parseInt(num[j+1]);\n            j++;\n        }\n    }\n    if(sum > 0){\n        count++;\n    }\n}\nreturn count;\n}",
        "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\nlet count = 0;\nfor(let i = 0; i < arr.length; i++){\n    let sum = 0;\n    let num = arr[i].toString();\n    for(let j = 0; j < num.length; j++){\n        if(num[j] !== '-'){\n            sum += parseInt(num[j]);\n        } else {\n            sum -= parseInt(num[j+1]);\n            j++;\n        }\n    }\n    if(sum > 0){\n        count++;\n    }\n}\nreturn count;\n}"
    ],
    [
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\nreturn s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\nlet words = s.split(\" \");\nfor(let i=0; i<words.length; i++){\n    words[i] = words[i].split(\"\").sort().join(\"\");\n}\nreturn words.join(\" \");}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\nreturn s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\nreturn s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}",
        "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\nreturn s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}"
    ],
    [
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\nlet reversedText = text.split('').reverse().join('');\nreturn text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\nlet reversedText = text.split('').reverse().join('');\nreturn text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\nlet reversedText = text.split('').reverse().join('');\nreturn text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\nvar reversedText = text.split('').reverse().join('');\nreturn text === reversedText;\n}",
        "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\nlet reversedText = text.split('').reverse().join('');\nreturn text === reversedText;\n}"
    ],
    [
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\nlet vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\nlet closestVowel = '';\n\nfor(let i = word.length - 1; i > 0; i--){\n    if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n        closestVowel = word[i];\n        break;\n    }\n}\nreturn closestVowel;\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\nlet vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\nlet foundVowel = \"\";\n\nfor(let i = word.length - 2; i > 0; i--) {\n    if(vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n        foundVowel = word[i];\n        break;\n    }\n}\n\nreturn foundVowel;\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\nlet vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\nlet foundVowel = '';\n\nfor(let i = word.length - 1; i > 0; i--) {\n    if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])) {\n        foundVowel = word[i];\n        break;\n    }\n}\n\nreturn foundVowel;\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\nconst vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\nlet closestVowel = '';\n\nfor (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n        closestVowel = word[i];\n        break;\n    }\n}\n\nreturn closestVowel;\n}",
        "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\nlet vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\nlet foundVowel = '';\n\nfor (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n        foundVowel = word[i];\n        break;\n    }\n}\n\nreturn foundVowel;\n}"
    ],
    [
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\nif (n <= 1) {\n    return false;\n}\nif (n === 2) {\n    return true;\n}\nif (n % 2 === 0) {\n    return false;\n}\nfor (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n        return false;\n    }\n}\nreturn true;\n}",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\nif (n <= 1) {\n    return false;\n}\nfor (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n        return false;\n    }\n}\nreturn true;",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\nif (n <= 1) {\n    return false;\n} else if (n <= 3) {\n    return true;\n} else if (n % 2 === 0 || n % 3 === 0) {\n    return false;\n}\nlet i = 5;\nwhile (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) {\n        return false;\n    }\n    i += 6;\n}\nreturn true;\n}",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\nif (n <= 1) {\n    return false;\n}\nfor(let i = 2; i < n; i++) {\n    if(n % i === 0) {\n        return false;\n    }\n}\nreturn true;",
        "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\nif (n <= 1) {\n    return false;\n}\nfor (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n        return false;\n    }\n}\nreturn true;"
    ],
    [
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n// split the strings into arrays\n  let xArr = x.split(\"/\");\n  let nArr = n.split(\"/\");\n\n  // convert the strings into numbers\n  let xNumerator = Number(xArr[0]);\n  let xDenominator = Number(xArr[1]);\n  let nNumerator = Number(nArr[0]);\n  let nDenominator = Number(nArr[1]);\n\n  // calculate the product of the two fractions\n  let product = (xNumerator * nNumerator) / (xDenominator * nDenominator);\n\n  // check if the product is a whole number\n  if (Number.isInteger(product)) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n// Split the fractions into their numerators and denominators\n  let [numX, denX] = x.split('/');\n  let [numN, denN] = n.split('/');\n\n  // Multiply the numerators together and the denominators together\n  let numerator = numX * numN;\n  let denominator = denX * denN;\n\n  // If the numerator is divisible by the denominator with no remainder, return true\n  // Otherwise, return false\n  return numerator % denominator === 0;\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n// split the fractions into arrays of numerator and denominator\nlet xArr = x.split(\"/\");\nlet nArr = n.split(\"/\");\n\n// calculate the product of the fractions\nlet numerator = parseInt(xArr[0]) * parseInt(nArr[0]);\nlet denominator = parseInt(xArr[1]) * parseInt(nArr[1]);\n\n// check if the product is a whole number\nreturn numerator % denominator === 0; }",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n// split the fractions into numerator and denominator\nlet [numX, denX] = x.split('/').map(Number);\nlet [numN, denN] = n.split('/').map(Number);\n\n// multiply the numerators and denominators\nlet numResult = numX * numN;\nlet denResult = denX * denN;\n\n// check if the result is a whole number\nreturn Number.isInteger(numResult / denResult);\n}",
        "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n//First, we'll split the fractions into their numerators and denominators\n  let [numX, denX] = x.split(\"/\");\n  let [numN, denN] = n.split(\"/\");\n  \n  //Then, we'll multiply the numerators together and the denominators together\n  let numerator = numX * numN;\n  let denominator = denX * denN;\n  \n  //If the numerator is divisible by the denominator with no remainder, it means that the result is a whole number\n  return numerator % denominator === 0;\n}"
    ],
    [
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n// create an array of prime hexadecimal digits\n  const hexPrimes = ['2', '3', '5', '7', 'B', 'D'];\n\n  // convert the input string to an array\n  const numArray = num.split('');\n\n  // filter out non-prime digits and count the remaining ones\n  const primeCount = numArray.filter(digit => hexPrimes.includes(digit)).length;\n\n  return primeCount;\n}",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\nlet count = 0;\nlet primeHexDigits = ['2', '3', '5', '7', 'B', 'D'];\n\nfor(let i = 0; i < num.length; i++) {\n    if(primeHexDigits.includes(num[i])){\n        count++;\n    }\n}\n\nreturn count;",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\nlet count = 0;\nlet primeHex = ['2', '3', '5', '7', 'B', 'D'];\n\nfor(let i = 0; i < num.length; i++){\n    if(primeHex.includes(num[i].toUpperCase())){\n        count++;\n    }\n}\nreturn count;",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\nconst hexPrimes = ['2', '3', '5', '7', 'B', 'D'];\nlet count = 0;\nfor(let i = 0; i < num.length; i++) {\n    if(hexPrimes.includes(num[i])) {\n        count++;\n    }\n}\nreturn count;",
        "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n// Create a list of hexadecimal prime numbers\nconst hexPrimes = ['2', '3', '5', '7', 'B', 'D'];\n\n// Convert the string to an array\nlet numArray = num.split('');\n\n// Filter the array for prime numbers and return the count\nreturn numArray.filter(n => hexPrimes.includes(n)).length;\n}"
    ],
    [
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n// helper function to check if a number is prime\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  // split the sentence into words\n  let words = sentence.split(' ');\n  let primeWords = [];\n\n  // iterate over the words\n  for (let word of words) {\n    // if the length of the word is a prime number, add it to the primeWords array\n    if (isPrime(word.length)) {\n      primeWords.push(word);\n    }\n  }\n\n  // join the primeWords array into a string with spaces and return it\n  return primeWords.join(' ');\n}",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n  if (num < 2) return false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\n// split the sentence into words\nlet words = sentence.split(' ');\nlet primeWords = [];\n\n// iterate over the words\nfor (let word of words) {\n  // if the length of the word is a prime number, add it to the primeWords array\n  if (isPrime(word.length)) {\n    primeWords.push(word);\n  }\n}\n\n// join the primeWords array into a string with spaces between the words\nreturn primeWords.join(' ');",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\n// Split the sentence into words\nlet words = sentence.split(' ');\n\n// Filter out the words that have prime length\nlet primeWords = words.filter(word => isPrime(word.length));\n\n// Join the words back into a sentence\nreturn primeWords.join(' ');",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\n// split the sentence into words\nlet words = sentence.split(' ');\nlet result = [];\n\n// iterate over the words\nfor (let word of words) {\n    // if the length of the word is a prime number, add it to the result\n    if (isPrime(word.length)) {\n        result.push(word);\n    }\n}\n\n// join the result into a string and return it\nreturn result.join(' ');",
        "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n    if(num < 2) return false;\n    for(let i = 2; i < num; i++) {\n        if(num % i === 0) return false;\n    }\n    return true;\n}\n\n// split the sentence into words\nlet words = sentence.split(' ');\n\n// filter out the words whose length is not a prime number\nlet primeWords = words.filter(word => isPrime(word.length));\n\n// join the words back into a sentence\nreturn primeWords.join(' ');"
    ],
    [
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\nlet letters = test.split(' ');\nlet histogram = {};\nlet maxCount = 0;\n\nfor (let letter of letters) {\n    if (letter !== '') {\n        if (!histogram[letter]) {\n            histogram[letter] = 1;\n        } else {\n            histogram[letter]++;\n        }\n        if (histogram[letter] > maxCount) {\n            maxCount = histogram[letter];\n        }\n    }\n}\n\nlet result = {};\nfor (let letter in histogram) {\n    if (histogram[letter] === maxCount) {\n        result[letter] = maxCount;\n    }\n}\n\nreturn result;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\nlet letters = test.split(' ');\nlet histogram = {};\nlet maxCount = 0;\n\nfor(let i = 0; i < letters.length; i++){\n    if(letters[i] !== ''){\n        if(histogram[letters[i]]){\n            histogram[letters[i]]++;\n        } else {\n            histogram[letters[i]] = 1;\n        }\n        if(histogram[letters[i]] > maxCount){\n            maxCount = histogram[letters[i]];\n        }\n    }\n}\n\nlet result = {};\nfor(let letter in histogram){\n    if(histogram[letter] === maxCount){\n        result[letter] = maxCount;\n    }\n}\n\nreturn result;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\nlet arr = test.split(\" \");\nlet obj = {};\nlet max = 0;\nlet result = {};\n\nfor(let i=0; i<arr.length; i++){\n    if(arr[i] !== ''){\n        if(!obj[arr[i]]) obj[arr[i]] = 1;\n        else obj[arr[i]]++;\n        if(obj[arr[i]] > max) max = obj[arr[i]];\n    }\n}\n\nfor(let key in obj){\n    if(obj[key] === max) result[key] = max;\n}\n\nreturn result;",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\nlet letters = test.split(' ');\nlet letterCounts = {};\nlet maxCount = 0;\nlet maxLetters = {};\n\n// Count the occurrences of each letter\nfor (let i = 0; i < letters.length; i++) {\n    if (letters[i] !== '') {\n        if (letterCounts[letters[i]]) {\n            letterCounts[letters[i]]++;\n        } else {\n            letterCounts[letters[i]] = 1;\n        }\n\n        // Update maxCount if necessary\n        if (letterCounts[letters[i]] > maxCount) {\n            maxCount = letterCounts[letters[i]];\n        }\n    }\n}\n\n// Find all letters with maxCount occurrences\nfor (let letter in letterCounts) {\n    if (letterCounts[letter] === maxCount) {\n        maxLetters[letter] = maxCount;\n    }\n}\n\nreturn maxLetters;\n}",
        "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\nlet letters = test.split(' ');\nlet letterCounts = {};\nlet maxCount = 0;\nlet maxLetters = {};\n\n// Count the occurrences of each letter\nfor(let i = 0; i < letters.length; i++) {\n    if(letters[i] !== '') {\n        if(letterCounts[letters[i]] === undefined) {\n            letterCounts[letters[i]] = 1;\n        } else {\n            letterCounts[letters[i]]++;\n        }\n\n        // Keep track of the max count\n        if(letterCounts[letters[i]] > maxCount) {\n            maxCount = letterCounts[letters[i]];\n        }\n    }\n}\n\n// Find all letters with the max count\nfor(let letter in letterCounts) {\n    if(letterCounts[letter] === maxCount) {\n        maxLetters[letter] = maxCount;\n    }\n}\n\nreturn maxLetters;"
    ],
    [
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\nlet result = [];\nfor(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n        if(lst[i][j] === x){\n            result.push([i, j]);\n        }\n    }\n}\nresult.sort((a, b) => {\n    if(a[0] === b[0]){\n        return b[1] - a[1];\n    }\n    return a[0] - b[0];\n});\nreturn result;",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\nlet coordinates = [];\nfor(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n        if(lst[i][j] === x){\n            coordinates.push([i, j]);\n        }\n    }\n}\ncoordinates.sort((a, b) => {\n    if(a[0] === b[0]){\n        return b[1] - a[1];\n    }else{\n        return a[0] - b[0];\n    }\n});\nreturn coordinates;",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\nlet result = [];\n\nfor(let i = 0; i < lst.length; i++) {\n    for(let j = 0; j < lst[i].length; j++) {\n        if(lst[i][j] === x) {\n            result.push([i, j]);\n        }\n    }\n}\n\nresult.sort((a, b) => {\n    if(a[0] === b[0]) {\n        return b[1] - a[1];\n    }\n    return a[0] - b[0];\n});\n\nreturn result;",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\nlet result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => {\n        if(a[0] === b[0]){\n            return b[1] - a[1];\n        } else {\n            return a[0] - b[0];\n        }\n    });\n    return result;",
        "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\nlet result = [];\nfor(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n        if(lst[i][j] === x){\n            result.push([i, j]);\n        }\n    }\n}\nresult.sort((a, b) => {\n    if(a[0] !== b[0]) return a[0] - b[0];\n    else return b[1] - a[1];\n});\nreturn result;"
    ],
    [
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\nlet sequence = [];\nwhile(n != 1){\n    if(n % 2 != 0){\n        sequence.push(n);\n    }\n    n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n}\nsequence.push(1);\nreturn sequence.sort((a, b) => a - b);\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\nlet collatz = [];\n  while(n != 1){\n    if(n % 2 != 0){\n      collatz.push(n);\n    }\n    n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n  }\n  collatz.push(1);\n  return collatz.sort((a, b) => a - b);\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\nlet collatz = [];\n  while (n != 1) {\n    if (n % 2 == 0) {\n      n = n / 2;\n    } else {\n      collatz.push(n);\n      n = 3 * n + 1;\n    }\n  }\n  collatz.push(1);\n  collatz.sort((a, b) => a - b);\n  return collatz;\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\nlet sequence = [];\n    while(n != 1){\n        if(n % 2 != 0){\n            sequence.push(n);\n        }\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n    }\n    sequence.push(1);\n    return sequence.sort((a, b) => a - b);\n}",
        "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\nlet collatz_sequence = [];\n    while(n !== 1){\n        if(n % 2 !== 0){\n            collatz_sequence.push(n);\n        }\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n    }\n    collatz_sequence.push(1);\n    collatz_sequence.sort((a, b) => a - b);\n    return collatz_sequence;\n}"
    ],
    [
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\nfor(let i = arr.length - 1; i > 0; i--){\n    if(arr[i] < arr[i-1]){\n        return i;\n    }\n}\nreturn -1;",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\nfor(let i = arr.length - 1; i > 0; i--){\n    if(arr[i] < arr[i-1]){\n        return i;\n    }\n}\nreturn -1;",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\nfor(let i = arr.length - 1; i > 0; i--){\n    if(arr[i] < arr[i-1]){\n        return i;\n    }\n}\nreturn -1;",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\nfor(let i = arr.length - 1; i > 0; i--) {\n    if(arr[i] < arr[i-1]) {\n        return i;\n    }\n}\nreturn -1;",
        "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\nfor(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}"
    ],
    [
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\nconst numberMap = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n};\n\nlet splitNumbers = numbers.split(' ');\n\nsplitNumbers.sort((a, b) => numberMap[a] - numberMap[b]);\n\nreturn splitNumbers.join(' ');\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\nconst numberWords = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\nconst numbersArray = numbers.split(\" \");\nnumbersArray.sort((a, b) => numberWords.indexOf(a) - numberWords.indexOf(b));\nreturn numbersArray.join(\" \");\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\nconst numberMap = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n};\n\nconst reverseNumberMap = {\n    0: 'zero',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine'\n};\n\nlet numberArray = numbers.split(\" \");\nnumberArray.sort((a, b) => numberMap[a] - numberMap[b]);\n\nreturn numberArray.map(num => reverseNumberMap[numberMap[num]]).join(\" \");\n}",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\nconst numberMap = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n};\n\nconst reverseNumberMap = {\n    0: 'zero',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine'\n};\n\nlet numArray = numbers.split(\" \").map(num => numberMap[num]);\nnumArray.sort((a, b) => a - b);\n\nreturn numArray.map(num => reverseNumberMap[num]).join(\" \");",
        "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\nconst numberMap = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n};\n\nconst reverseNumberMap = {\n    0: 'zero',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine'\n};\n\nlet numArray = numbers.split(' ').map(num => numberMap[num]);\nnumArray.sort((a, b) => a - b);\n\nreturn numArray.map(num => reverseNumberMap[num]).join(' ');\n}"
    ],
    [
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\nlet str = x.toString();\nlet len = str.length;\n\nif(shift > len){\n    return str.split(\"\").reverse().join(\"\");\n} else {\n    return str.slice(len - shift) + str.slice(0, len - shift);\n}\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\nlet str = x.toString();\nlet len = str.length;\n\nif (shift > len) {\n    return str.split('').reverse().join('');\n}\n\nlet result = str.substring(len - shift) + str.substring(0, len - shift);\nreturn result;\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\nlet xString = x.toString();\nlet length = xString.length;\n\nif(shift > length){\n    return xString.split('').reverse().join('');\n} else {\n    return xString.slice(-shift) + xString.slice(0, -shift);\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\nlet str = x.toString();\nlet len = str.length;\n\nif(shift > len){\n    return str.split('').reverse().join('');\n}\n\nlet res = str.substring(len - shift) + str.substring(0, len - shift);\nreturn res;\n}",
        "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\nlet strX = String(x);\nlet len = strX.length;\n\nif (shift > len) {\n    return strX.split('').reverse().join('');\n} else {\n    return strX.slice(len - shift) + strX.slice(0, len - shift);\n}}"
    ],
    [
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++) {\n    if(i % 3 == 0 && i % 4 != 0) {\n        sum += Math.pow(lst[i], 2);\n    } else if(i % 4 == 0) {\n        sum += Math.pow(lst[i], 3);\n    } else {\n        sum += lst[i];\n    }\n}\nreturn sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\nlet sum = 0;\nfor(let i=0; i<lst.length; i++) {\n    if(i % 3 === 0) {\n        sum += Math.pow(lst[i], 2);\n    } else if(i % 4 === 0) {\n        sum += Math.pow(lst[i], 3);\n    } else {\n        sum += lst[i];\n    }\n}\nreturn sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n        sum += Math.pow(lst[i], 2);\n    } else if(i % 4 === 0){\n        sum += Math.pow(lst[i], 3);\n    } else {\n        sum += lst[i];\n    }\n}\nreturn sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\nlet sum = 0;\n\nfor(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n        sum += Math.pow(lst[i], 2);\n    } else if(i % 4 === 0){\n        sum += Math.pow(lst[i], 3);\n    } else {\n        sum += lst[i];\n    }\n}\n\nreturn sum;\n}",
        "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\nlet sum = 0;\nfor(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4 !== 0) {\n        sum += Math.pow(lst[i], 2);\n    } else if(i % 4 === 0) {\n        sum += Math.pow(lst[i], 3);\n    } else {\n        sum += lst[i];\n    }\n}\nreturn sum;\n}"
    ],
    [
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlet largestPrime = Math.max(...lst.filter(isPrime));\n\n// Sum of digits of largest prime\nreturn String(largestPrime).split('').reduce((sum, num) => sum + parseInt(num), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlet largestPrime = Math.max(...lst.filter(isPrime));\n\n// Convert the largest prime number to a string, split it into individual digits, convert each digit back to a number, and sum them\nreturn largestPrime.toString().split('').map(Number).reduce((a, b) => a + b, 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        if (num <= 1) return false;\n        for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if (num % i === 0) return false;\n        return true;\n    }\n\n    let largestPrime = Math.max(...lst.filter(isPrime));\n\n    return String(largestPrime).split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n// Helper function to check if a number is prime\n  function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  // Filter the array to only contain prime numbers\n  let primes = lst.filter(isPrime);\n\n  // If there are no prime numbers, return 0\n  if (primes.length === 0) return 0;\n\n  // Find the maximum prime number\n  let maxPrime = Math.max(...primes);\n\n  // Convert the number to a string, split it into an array of digits, convert each digit back to a number and sum them\n  return maxPrime.toString().split('').reduce((sum, digit) => sum + Number(digit), 0);\n}",
        "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\n// find the largest prime number\nlet largestPrime = Math.max(...lst.filter(isPrime));\n\n// convert the largest prime number to string, split it to array, convert each digit back to number and sum them up\nreturn String(largestPrime).split('').reduce((a, b) => a + Number(b), 0);"
    ],
    [
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\nlet sum = 0;\nlet product = 1;\n\nfor(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n}\n\nreturn [sum, product];",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\nlet sum = 0;\nlet product = 1;\n\nfor(let i=0; i<numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n}\n\nreturn [sum, product];",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\nlet sum = 0;\nlet product = 1;\n\nfor(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n}\n\nreturn [sum, product];",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\nlet sum = 0;\nlet product = 1;\n\nfor(let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n}\n\nreturn [sum, product];",
        "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\nlet sum = 0;\nlet product = 1;\n\nfor(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n}\n\nreturn [sum, product];"
    ],
    [
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\nif (x > y) {\n    return -1;\n}\n\nif (y % 2 !== 0) {\n    y--;\n}\n\nif (y >= x && y % 2 === 0) {\n    return y;\n}\n\nreturn -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\nif(x > y) return -1;\n\nlet maxEven = -1;\nfor(let i = x; i <= y; i++){\n    if(i % 2 === 0){\n        maxEven = Math.max(maxEven, i);\n    }\n}\nreturn maxEven === -1 ? -1 : maxEven; \n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\nif (x > y) return -1;\n\nif (y % 2 === 0) return y;\nelse if ((y - 1) >= x) return y - 1;\nelse return -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\nif(x > y) return -1;\n\nlet maxEvenNum = y % 2 === 0 ? y : y - 1;\n\nif(maxEvenNum >= x) return maxEvenNum;\n\nreturn -1;\n}",
        "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\nif (x > y) {\n    return -1;\n}\n\nif (y % 2 === 0) {\n    return y;\n} else if ((y - 1) >= x) {\n    return y - 1;\n} else {\n    return -1;\n}\n}"
    ],
    [
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\nlet largestNegative = Math.max(...lst.filter(num => num < 0));\nlet smallestPositive = Math.min(...lst.filter(num => num > 0));\n\nif (!isFinite(largestNegative)) {\n  largestNegative = undefined;\n}\n\nif (!isFinite(smallestPositive)) {\n  smallestPositive = undefined;\n}\n\nreturn [largestNegative, smallestPositive];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\nlet largestNegative = Math.max(...lst.filter(n => n < 0));\nlet smallestPositive = Math.min(...lst.filter(n => n > 0));\nreturn [isFinite(largestNegative) ? largestNegative : undefined, isFinite(smallestPositive) ? smallestPositive : undefined];}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\nlet smallestPositive = Infinity;\nlet largestNegative = -Infinity;\n\nfor (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n    } else if (lst[i] < 0 && lst[i] > largestNegative) {\n        largestNegative = lst[i];\n    }\n}\n\nif (smallestPositive === Infinity) {\n    smallestPositive = undefined;\n}\n\nif (largestNegative === -Infinity) {\n    largestNegative = undefined;\n}\n\nreturn [largestNegative, smallestPositive];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\nlet largestNegative = undefined;\nlet smallestPositive = undefined;\n\nfor(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n        if(largestNegative === undefined || lst[i] > largestNegative){\n            largestNegative = lst[i];\n        }\n    } else if(lst[i] > 0){\n        if(smallestPositive === undefined || lst[i] < smallestPositive){\n            smallestPositive = lst[i];\n        }\n    }\n}\n\nreturn [largestNegative, smallestPositive];\n}",
        "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\nlet largestNegative = Math.max(...lst.filter(n => n < 0));\nlet smallestPositive = Math.min(...lst.filter(n => n > 0));\n\nif (!isFinite(largestNegative)) {\n  largestNegative = undefined;\n}\n\nif (!isFinite(smallestPositive)) {\n  smallestPositive = undefined;\n}\n\nreturn [largestNegative, smallestPositive];\n}"
    ],
    [
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\nlet lowerCaseString = string.toLowerCase();\nlet distinctCharacters = new Set(lowerCaseString);\nreturn distinctCharacters.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\nlet lowerCaseString = string.toLowerCase();\nlet distinctCharacters = new Set(lowerCaseString);\nreturn distinctCharacters.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\nlet lowerCaseString = string.toLowerCase();\nlet distinctCharacters = new Set(lowerCaseString);\nreturn distinctCharacters.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\nlet lowerCaseString = string.toLowerCase();\nlet distinctCharacters = new Set(lowerCaseString);\nreturn distinctCharacters.size;\n}",
        "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\nlet lowerCaseString = string.toLowerCase();\nlet uniqueCharacters = new Set(lowerCaseString);\nreturn uniqueCharacters.size;\n}"
    ],
    [
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\nlet pile = [];\nfor(let i = 0; i < n; i++) {\n    if(n % 2 === 0) {\n        pile.push(n + 2 * i);\n    } else {\n        pile.push(n + 2 * i);\n    }\n}\nreturn pile;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\nlet stones = [];\n  for(let i=0; i<n; i++){\n    if(n%2 === 0){\n      stones.push(n + 2*i);\n    } else {\n      stones.push(n + 2*i);\n    }\n  }\n  return stones;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\nlet stones = [];\nfor(let i=0; i<n; i++){\n    if(n%2 == 0){\n        stones.push(n + 2*i);\n    } else {\n        stones.push(n + 2*i);\n    }\n}\nreturn stones;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\nlet stones = [];\nfor(let i = 0; i < n; i++){\n  if(n % 2 === 0){\n    stones.push(n + 2 * i);\n  } else {\n    stones.push(n + 2 * i);\n  }\n}\nreturn stones;\n}",
        "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\nlet pile = [];\nfor(let i = 0; i < n; i++){\n    if(n % 2 === 0){\n        pile.push(n + 2 * i);\n    } else {\n        pile.push(n + 2 * i);\n    }\n}\nreturn pile;\n}"
    ],
    [
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\nif (arr.length === 0) {\n    return undefined;\n}\n\nlet sum = 0;\nlet product = 1;\n\nfor (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    product *= Math.sign(arr[i]);\n}\n\nreturn sum * product;",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\nif(arr.length === 0) return undefined;\nlet sum = 0;\nlet product = 1;\nfor(let i = 0; i < arr.length; i++){\n    sum += Math.abs(arr[i]);\n    product *= Math.sign(arr[i]);\n}\nreturn sum * product;",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\nif(arr.length === 0) return undefined;\n\nlet sum = 0;\nlet signProduct = 1;\n\nfor(let i = 0; i < arr.length; i++){\n    sum += Math.abs(arr[i]);\n    signProduct *= Math.sign(arr[i]);\n}\n\nreturn sum * signProduct;",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\nif(arr.length === 0) return undefined;\n\nlet sum = 0;\nlet product = 1;\n\nfor(let i = 0; i < arr.length; i++){\n    sum += Math.abs(arr[i]);\n    product *= Math.sign(arr[i]);\n}\n\nreturn sum * product;",
        "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\nif(arr.length === 0) return undefined;\n\nlet productOfSigns = 1;\nlet sumOfMagnitudes = 0;\n\nfor(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    if(num > 0){\n        productOfSigns *= 1;\n    } else if(num < 0){\n        productOfSigns *= -1;\n    } else {\n        productOfSigns *= 0;\n    }\n    sumOfMagnitudes += Math.abs(num);\n}\n\nreturn sumOfMagnitudes * productOfSigns;"
    ],
    [
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\nlet minSum = nums[0];\nfor(let i = 0; i < nums.length; i++){\n    let sum = 0;\n    for(let j = i; j < nums.length; j++){\n        sum += nums[j];\n        if(sum < minSum){\n            minSum = sum;\n        }\n    }\n}\nreturn minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\nlet minSum = Infinity;\n\nfor(let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for(let j = i; j < nums.length; j++) {\n        sum += nums[j];\n        if(sum < minSum) {\n            minSum = sum;\n        }\n    }\n}\n\nreturn minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\nlet minSum = nums[0];\n\nfor (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n}\n\nreturn minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\nlet minSum = Infinity;\nfor(let i = 0; i < nums.length; i++){\n    let sum = 0;\n    for(let j = i; j < nums.length; j++){\n        sum += nums[j];\n        if(sum < minSum){\n            minSum = sum;\n        }\n    }\n}\nreturn minSum;\n}",
        "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\nlet minSum = Infinity;\n\nfor(let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for(let j = i; j < nums.length; j++) {\n        sum += nums[j];\n        if(sum < minSum) {\n            minSum = sum;\n        }\n    }\n}\n\nreturn minSum;\n}"
    ],
    [
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\nlet result = \"\";\nfor(let i = 0; i <= n; i++) {\n    result += i + \" \";\n}\nreturn result.trim(); // remove the trailing space\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\nlet result = [];\nfor(let i = 0; i <= n; i++){\n    result.push(i);\n}\nreturn result.join(' ');",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\nlet result = \"\";\nfor(let i = 0; i <= n; i++){\n    result += i + \" \";\n}\nreturn result.trim();\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\nlet sequence = \"\";\nfor(let i = 0; i <= n; i++){\n    sequence += i + \" \";\n}\nreturn sequence.trim();\n}",
        "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\nlet result = \"\";\nfor(let i = 0; i <= n; i++){\n    result += i + \" \";\n}\nreturn result.trim();\n}"
    ],
    [
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n// Create all rotations of b\nfor(let i = 0; i < b.length; i++) {\n    let rotation = b.slice(i) + b.slice(0, i);\n\n    // Check if the rotation is a substring of a\n    if(a.indexOf(rotation) !== -1) {\n        return true;\n    }\n}\n\n// If no rotation is a substring of a, return false\nreturn false;",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n// Generate all rotations of the second string\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n\n        // Check if the rotated string is a substring of the first string\n        if(a.includes(rotated)){\n            return true;\n        }\n    }\n\n    // If none of the rotations are substrings of the first string, return false\n    return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n// Create all rotations of the second word\n  for(let i = 0; i < b.length; i++) {\n    // Rotate the word by one character\n    b = b.slice(1) + b[0];\n    // Check if the rotated word is a substring of the first word\n    if(a.includes(b)) {\n      return true;\n    }\n  }\n  // If no rotation is a substring, return false\n  return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotated)){\n            return true;\n        }\n    }\n    return false;\n}",
        "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotated)){\n            return true;\n        }\n    }\n    return false;\n}"
    ],
    [
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\nif (l.length <= 2) return true;\n\nlet direction = l[1] - l[0];\nfor (let i = 2; i < l.length; i++) {\n    if (direction === 0) {\n        direction = l[i] - l[i - 1];\n        continue;\n    }\n    if (breaksDirection(direction, l[i - 1], l[i])) {\n        return false;\n    }\n}\nreturn true;\n}\n\nfunction breaksDirection(direction, previousInt, currentInt) {\n    let difference = currentInt - previousInt;\n    if (direction > 0) return difference < 0;\n    return difference > 0;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\nif(l.length <= 2) return true;\n\nlet isIncreasing = l[1] > l[0] ? true : false;\n\nfor(let i = 2; i < l.length; i++){\n    if(isIncreasing){\n        if(l[i] < l[i-1]) return false;\n    } else {\n        if(l[i] > l[i-1]) return false;\n    }\n}\n\nreturn true;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\nif (l.length <= 2) return true;\n\nlet increasing = null;\n\nfor (let i = 1; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n        if (increasing === null) {\n            increasing = true;\n        } else if (!increasing) {\n            return false;\n        }\n    } else if (l[i] < l[i - 1]) {\n        if (increasing === null) {\n            increasing = false;\n        } else if (increasing) {\n            return false;\n        }\n    }\n}\n\nreturn true;\n}",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\nif (l.length <= 2) return true;\n\nlet increasing = l[0] < l[1];\nfor (let i = 2; i < l.length; i++) {\n    if ((increasing && l[i - 1] > l[i]) || (!increasing && l[i - 1] < l[i])) {\n        return false;\n    }\n}\nreturn true;",
        "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\nif (l.length <= 2) return true;\n\nlet increasing = l[1] > l[0] ? true : false;\n\nfor (let i = 2; i < l.length; i++) {\n    if (increasing) {\n        if (l[i] < l[i - 1]) return false;\n    } else {\n        if (l[i] > l[i - 1]) return false;\n    }\n}\n\nreturn true;"
    ],
    [
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\nif(strings.length === 0) {\n    return undefined;\n}\n\nlet longestString = strings[0];\n\nfor(let i = 1; i < strings.length; i++) {\n    if(strings[i].length > longestString.length) {\n        longestString = strings[i];\n    }\n}\n\nreturn longestString;",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\nif (strings.length === 0) {\n    return undefined;\n}\n\nlet longestString = strings[0];\n\nfor (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n        longestString = strings[i];\n    }\n}\n\nreturn longestString;",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\nif (strings.length === 0) {\n    return undefined;\n}\nlet longestString = strings[0];\nfor (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n        longestString = strings[i];\n    }\n}\nreturn longestString;",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\nif (strings.length === 0) {\n    return undefined;\n}\nlet longestString = strings[0];\nfor (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n        longestString = strings[i];\n    }\n}\nreturn longestString;",
        "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\nif (strings.length === 0) {\n    return undefined;\n}\n\nlet longestString = strings[0];\n\nfor (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n        longestString = strings[i];\n    }\n}\n\nreturn longestString;"
    ],
    [
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\nfor(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n        return false;\n    }\n}\nreturn true;",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\nfor (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n        return false;\n    }\n}\nreturn true;",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\nfor(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n        return false;\n    }\n}\nreturn true;",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\nfor(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n        return false;\n    }\n}\nreturn true;",
        "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\nfor(let i = 0; i < l.length; i++){\n    if(l[i] >= t){\n        return false;\n    }\n}\nreturn true;"
    ],
    [
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nlet factors = [];\n\n// find all prime factors of a number\nfor(let i = 2; i <= a; i++) {\n    while((a % i === 0) && isPrime(i)) {\n        factors.push(i);\n        a /= i;\n    }\n}\n\n// check if the number of prime factors is 3\nreturn factors.length === 3;",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n// First, we need a helper function to check if a number is prime\nfunction isPrime(n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Now, we can check if a number is a product of three primes\nlet primeFactors = [];\nfor (let i = 2; i <= a; i++) {\n    while (isPrime(i) && a % i === 0) {\n        if (primeFactors.length < 3) {\n            primeFactors.push(i);\n            a /= i;\n        } else {\n            return false;\n        }\n    }\n}\nreturn primeFactors.length === 3 && a === 1;\n}",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n// helper function to check if a number is prime\nfunction isPrime(num) {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\n// array of primes less than 100\nlet primes = [];\nfor(let i = 2; i < 100; i++) {\n    if(isPrime(i)) {\n        primes.push(i);\n    }\n}\n\n// check if a is the product of any three primes\nfor(let i = 0; i < primes.length; i++) {\n    for(let j = 0; j < primes.length; j++) {\n        for(let k = 0; k < primes.length; k++) {\n            if(primes[i] * primes[j] * primes[k] === a) {\n                return true;\n            }\n        }\n    }\n}\nreturn false;",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n    for(let i = 2; i < num; i++)\n        if(num % i === 0) return false;\n    return num > 1;\n}\n\n// Array to store prime numbers\nlet primes = [];\n\n// Find all prime numbers less than 100\nfor(let i = 2; i < 100; i++) {\n    if(isPrime(i)) {\n        primes.push(i);\n    }\n}\n\n// Check if the number is a product of three prime numbers\nfor(let i = 0; i < primes.length; i++) {\n    for(let j = 0; j < primes.length; j++) {\n        for(let k = 0; k < primes.length; k++) {\n            if(primes[i] * primes[j] * primes[k] === a) {\n                return true;\n            }\n        }\n    }\n}\n\nreturn false;",
        "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n// Function to check if a number is prime\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nlet primes = [];\n// Find all prime numbers less than 100\nfor (let i = 2; i < 100; i++) {\n    if (isPrime(i)) {\n        primes.push(i);\n    }\n}\n\n// Check if the number can be expressed as the product of 3 prime numbers\nfor (let i = 0; i < primes.length; i++) {\n    for (let j = 0; j < primes.length; j++) {\n        for (let k = 0; k < primes.length; k++) {\n            if (primes[i] * primes[j] * primes[k] === a) {\n                return true;\n            }\n        }\n    }\n}\nreturn false;"
    ],
    [
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\nreturn l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\nreturn l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\nreturn l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\nreturn l.filter(num => num > 0);\n}",
        "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\nreturn l.filter(num => num > 0);\n}"
    ],
    [
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\nlet divisibleByThree = [];\nlet result = [];\n\n// Loop through the array\nfor(let i = 0; i < l.length; i++) {\n    // Check if index is divisible by three\n    if(i % 3 === 0) {\n        divisibleByThree.push(l[i]);\n    }\n}\n\n// Sort the divisibleByThree array\ndivisibleByThree.sort((a, b) => a - b);\n\n// Loop through the array again\nfor(let i = 0, j = 0; i < l.length; i++) {\n    // Check if index is divisible by three\n    if(i % 3 === 0) {\n        result.push(divisibleByThree[j]);\n        j++;\n    } else {\n        result.push(l[i]);\n    }\n}\n\nreturn result;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\nlet indicesDivisibleByThree = [];\nlet valuesDivisibleByThree = [];\n\nfor(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n        indicesDivisibleByThree.push(i);\n        valuesDivisibleByThree.push(l[i]);\n    }\n}\n\nvaluesDivisibleByThree.sort((a, b) => a - b);\n\nfor(let i = 0; i < indicesDivisibleByThree.length; i++){\n    l[indicesDivisibleByThree[i]] = valuesDivisibleByThree[i];\n}\n\nreturn l;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\nlet divisibleByThree = [];\nlet result = [];\n\nfor(let i = 0; i < l.length; i++) {\n    if(i % 3 === 0) {\n        divisibleByThree.push(l[i]);\n    }\n}\n\ndivisibleByThree.sort((a, b) => a - b);\n\nfor(let i = 0, j = 0; i < l.length; i++) {\n    if(i % 3 === 0) {\n        result.push(divisibleByThree[j]);\n        j++;\n    } else {\n        result.push(l[i]);\n    }\n}\n\nreturn result;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\nlet divisibleByThree = [];\nlet result = [];\n\n// Extract elements at indices divisible by three and sort them\nfor(let i=0; i<l.length; i++){\n  if(i % 3 === 0){\n    divisibleByThree.push(l[i]);\n  }\n}\ndivisibleByThree.sort((a, b) => a - b);\n\n// Replace elements at indices divisible by three with sorted elements\nfor(let i=0, j=0; i<l.length; i++){\n  if(i % 3 === 0){\n    result.push(divisibleByThree[j]);\n    j++;\n  } else {\n    result.push(l[i]);\n  }\n}\n\nreturn result;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\nlet divisibleByThree = [];\nlet result = [];\n\nfor(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n        divisibleByThree.push(l[i]);\n    }\n}\n\ndivisibleByThree.sort((a, b) => a - b);\n\nfor(let i = 0, j = 0; i < l.length; i++){\n    if(i % 3 === 0){\n        result.push(divisibleByThree[j]);\n        j++;\n    } else {\n        result.push(l[i]);\n    }\n}\n\nreturn result;\n}"
    ],
    [
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\nlet groups = paren_string.split(' ');\nlet result = [];\n\nfor (let group of groups) {\n    let depth = 0;\n    let maxDepth = 0;\n\n    for (let char of group) {\n        if (char === '(') {\n            depth++;\n            if (depth > maxDepth) {\n                maxDepth = depth;\n            }\n        } else if (char === ')') {\n            depth--;\n        }\n    }\n\n    result.push(maxDepth);\n}\n\nreturn result;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\nlet groups = paren_string.split(' ');\nlet depths = [];\n\nfor(let group of groups) {\n    let depth = 0;\n    let maxDepth = 0;\n    for(let char of group) {\n        if(char === '(') {\n            depth++;\n            if(depth > maxDepth) {\n                maxDepth = depth;\n            }\n        } else if(char === ')') {\n            depth--;\n        }\n    }\n    depths.push(maxDepth);\n}\nreturn depths;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\nlet groups = paren_string.split(' ');\nlet result = [];\n\nfor (let group of groups) {\n    let depth = 0;\n    let maxDepth = 0;\n    for (let char of group) {\n        if (char === '(') {\n            depth++;\n            if (depth > maxDepth) {\n                maxDepth = depth;\n            }\n        } else if (char === ')') {\n            depth--;\n        }\n    }\n    result.push(maxDepth);\n}\nreturn result;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\nlet groups = paren_string.split(' ');\nlet result = [];\n\nfor(let group of groups){\n    let depth = 0;\n    let maxDepth = 0;\n    for(let char of group){\n        if(char === '('){\n            depth++;\n            if(depth > maxDepth){\n                maxDepth = depth;\n            }\n        } else if(char === ')'){\n            depth--;\n        }\n    }\n    result.push(maxDepth);\n}\nreturn result;\n}",
        "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\nlet results = [];\nlet groups = paren_string.split(' ');\n\nfor(let group of groups) {\n    let depth = 0;\n    let maxDepth = 0;\n    for(let char of group) {\n        if(char === '(') {\n            depth++;\n            if(depth > maxDepth) {\n                maxDepth = depth;\n            }\n        } else if(char === ')') {\n            depth--;\n        }\n    }\n    results.push(maxDepth);\n}\n\nreturn results;"
    ],
    [
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\nreturn 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\nreturn 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\nreturn 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\nreturn 0.5 * a * h;\n}",
        "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\nreturn 0.5 * a * h;\n}"
    ],
    [
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n// get the unit digits of both numbers\nlet unitA = Math.abs(a % 10);\nlet unitB = Math.abs(b % 10);\n\n// return their product\nreturn unitA * unitB;",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\nlet unitA = Math.abs(a % 10);\nlet unitB = Math.abs(b % 10);\nreturn unitA * unitB;\n}",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\nlet unitDigitA = Math.abs(a % 10);\nlet unitDigitB = Math.abs(b % 10);\nreturn unitDigitA * unitDigitB;\n}",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n// Get the last digit of both numbers\nlet lastDigitA = Math.abs(a % 10);\nlet lastDigitB = Math.abs(b % 10);\n\n// Multiply the last digits and return the result\nreturn lastDigitA * lastDigitB;",
        "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n// Get the last digit of each number by using modulo operation\nlet lastDigitA = Math.abs(a % 10);\nlet lastDigitB = Math.abs(b % 10);\n\n// Return the product of the last digits\nreturn lastDigitA * lastDigitB;"
    ],
    [
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n// Calculate the mean of the numbers\nlet sum = numbers.reduce((a, b) => a + b, 0);\nlet mean = sum / numbers.length;\n\n// Calculate the absolute difference between each number and the mean\nlet differences = numbers.map(num => Math.abs(num - mean));\n\n// Calculate the mean of these differences\nlet totalDifference = differences.reduce((a, b) => a + b, 0);\nlet mad = totalDifference / numbers.length;\n\nreturn mad;",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n// calculate the mean\nlet mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n\n// calculate the absolute deviation from the mean for each number\nlet deviations = numbers.map(number => Math.abs(number - mean));\n\n// calculate the mean of these deviations\nlet mad = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n\nreturn mad;",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n// Calculate the mean of the numbers\nlet mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n\n// Calculate the absolute difference between each number and the mean\nlet absoluteDifferences = numbers.map(number => Math.abs(number - mean));\n\n// Calculate the mean of these absolute differences\nlet mad = absoluteDifferences.reduce((a, b) => a + b, 0) / absoluteDifferences.length;\n\nreturn mad;\n}",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n// Calculate mean\nlet mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n\n// Calculate absolute deviation from mean for each number\nlet deviations = numbers.map(number => Math.abs(number - mean));\n\n// Calculate mean absolute deviation\nlet mad = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n\nreturn mad;\n}",
        "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n// Calculate the mean of the numbers\nlet mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n\n// Calculate the absolute difference between each number and the mean\nlet differences = numbers.map(num => Math.abs(num - mean));\n\n// Calculate the mean of these differences\nlet mad = differences.reduce((a, b) => a + b, 0) / differences.length;\n\nreturn mad;"
    ],
    [
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n// Convert both arrays to Set to remove duplicates\nlet set1 = new Set(l1);\nlet set2 = new Set(l2);\n\n// Filter set1 to only include elements also in set2\nlet commonElements = [...set1].filter(item => set2.has(item));\n\n// Sort the array of common elements in ascending order\ncommonElements.sort((a, b) => a - b);\n\nreturn commonElements;",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\nlet commonElements = l1.filter(value => l2.includes(value));\nlet uniqueElements = [...new Set(commonElements)];\nreturn uniqueElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\nlet commonElements = l1.filter(value => l2.includes(value));\nlet uniqueElements = [...new Set(commonElements)];\nreturn uniqueElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\nlet commonElements = l1.filter(value => l2.includes(value));\nlet uniqueElements = [...new Set(commonElements)];\nreturn uniqueElements.sort((a, b) => a - b);\n}",
        "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\nlet commonElements = l1.filter(value => l2.includes(value));\nlet uniqueElements = [...new Set(commonElements)];\nreturn uniqueElements.sort((a, b) => a - b);\n}"
    ],
    [
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\nconst romanNumeralMap = [\n    { value: 1000, symbol: 'm' },\n    { value: 900, symbol: 'cm' },\n    { value: 500, symbol: 'd' },\n    { value: 400, symbol: 'cd' },\n    { value: 100, symbol: 'c' },\n    { value: 90, symbol: 'xc' },\n    { value: 50, symbol: 'l' },\n    { value: 40, symbol: 'xl' },\n    { value: 10, symbol: 'x' },\n    { value: 9, symbol: 'ix' },\n    { value: 5, symbol: 'v' },\n    { value: 4, symbol: 'iv' },\n    { value: 1, symbol: 'i' },\n  ];\n\n  let romanNumeral = '';\n\n  for (let i = 0; i < romanNumeralMap.length; i++) {\n    while (number >= romanNumeralMap[i].value) {\n      romanNumeral += romanNumeralMap[i].symbol;\n      number -= romanNumeralMap[i].value;\n    }\n  }\n\n  return romanNumeral;\n}",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\nconst romanNumerals = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm'\n};\n\nlet result = '';\nlet keys = Object.keys(romanNumerals).reverse();\n\nfor (let i = 0; i < keys.length; i++) {\n    while (number >= keys[i]) {\n        result += romanNumerals[keys[i]];\n        number -= keys[i];\n    }\n}\n\nreturn result;",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\nlet roman = {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1};\nlet ans = '';\nfor(let key in roman){\n    while(number >= roman[key]){\n        ans += key;\n        number -= roman[key];\n    }\n}\nreturn ans.toLowerCase();}",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\nlet roman = { M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1 };\nlet str = '';\n\nfor (let i of Object.keys(roman)) {\n  let q = Math.floor(number / roman[i]);\n  number -= q * roman[i];\n  str += i.repeat(q);\n}\n\nreturn str.toLowerCase();",
        "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\nlet map = [\n    {val: 1000, char: 'm'},\n    {val: 900, char: 'cm'},\n    {val: 500, char: 'd'},\n    {val: 400, char: 'cd'},\n    {val: 100, char: 'c'},\n    {val: 90, char: 'xc'},\n    {val: 50, char: 'l'},\n    {val: 40, char: 'xl'},\n    {val: 10, char: 'x'},\n    {val: 9, char: 'ix'},\n    {val: 5, char: 'v'},\n    {val: 4, char: 'iv'},\n    {val: 1, char: 'i'}\n];\n\nlet result = '';\n\nfor(let i = 0; i < map.length; i++) {\n    while(number >= map[i].val) {\n        result += map[i].char;\n        number -= map[i].val;\n    }\n}\n\nreturn result;"
    ],
    [
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\nlet numbers = s.match(/\\d+/g).map(Number);\nlet totalApplesAndOranges = numbers.reduce((a, b) => a + b, 0);\nlet totalMangoes = n - totalApplesAndOranges;\nreturn totalMangoes;",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\nlet fruits = s.match(/\\d+/g).map(Number);\nlet totalApplesAndOranges = fruits.reduce((a, b) => a + b, 0);\nreturn n - totalApplesAndOranges;\n}",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\nlet fruits = s.match(/\\d+/g).map(Number);\nlet totalApplesOranges = fruits.reduce((a, b) => a + b, 0);\nlet mangoes = n - totalApplesOranges;\nreturn mangoes;",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\nlet fruits = s.split(\" \");\nlet apples = parseInt(fruits[0]);\nlet oranges = parseInt(fruits[3]);\nlet mangoes = n - (apples + oranges);\nreturn mangoes; \n}",
        "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\nlet fruits = s.split(\" \");\nlet apples = parseInt(fruits[0]);\nlet oranges = parseInt(fruits[3]);\nlet mangoes = n - (apples + oranges);\nreturn mangoes; \n}"
    ],
    [
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\nlet result = s.split('').filter(char => !c.includes(char)).join('');\nlet isPalindrome = result === result.split('').reverse().join('');\nreturn [result, isPalindrome];",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\nlet result = s.split('').filter(char => !c.includes(char)).join('');\nlet isPalindrome = result === result.split('').reverse().join('');\nreturn [result, isPalindrome];",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\nlet result = s.split('').filter(char => !c.includes(char)).join('');\nlet isPalindrome = result === result.split('').reverse().join('');\nreturn [result, isPalindrome];",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\nlet result = s.split('').filter(char => !c.includes(char)).join('');\nlet isPalindrome = result === result.split('').reverse().join('');\nreturn [result, isPalindrome]; \n}",
        "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\nlet result = s.split('').filter(char => !c.includes(char)).join('');\nlet isPalindrome = result === result.split('').reverse().join('');\nreturn [result, isPalindrome];"
    ],
    [
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\nwhile(b != 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n}\nreturn a;",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\nwhile(b != 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n}\nreturn a;",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\nwhile(b != 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n}\nreturn a;",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\nwhile(b != 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n}\nreturn a;",
        "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\nwhile(b != 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n}\nreturn a;"
    ],
    [
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\nlet words = txt.includes(' ') ? txt.split(' ') : txt.includes(',') ? txt.split(',') : null;\n    \nif (words) {\n    return words;\n} else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n        let char = txt[i];\n        if (char === char.toLowerCase() && char.charCodeAt(0) % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\nlet words;\nif(txt.includes(' ')) {\n    words = txt.split(' ');\n} else if(txt.includes(',')) {\n    words = txt.split(',');\n} else {\n    let count = 0;\n    for(let i = 0; i < txt.length; i++) {\n        let charCode = txt.charCodeAt(i) - 97;\n        if(charCode >= 0 && charCode <= 25 && charCode % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}\nreturn words; }",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\nlet result;\n\n  if(txt.includes(\" \")) {\n    result = txt.split(\" \");\n  } else if(txt.includes(\",\")) {\n    result = txt.split(\",\");\n  } else {\n    let count = 0;\n    for(let i = 0; i < txt.length; i++) {\n      let charCode = txt.charCodeAt(i) - 97;\n      if(charCode >= 0 && charCode <= 25 && charCode % 2 !== 0) {\n        count++;\n      }\n    }\n    result = count;\n  }\n\n  return result;\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\nlet words = txt.includes(' ') ? txt.split(' ') : txt.includes(',') ? txt.split(',') : null;\n\nif (words !== null) {\n    return words;\n} else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n        let charCode = txt.charCodeAt(i) - 97;\n        if (charCode >= 0 && charCode <= 25 && charCode % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}",
        "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\nlet words;\n\n  if (txt.includes(' ')) {\n    words = txt.split(' ');\n  } else if (txt.includes(',')) {\n    words = txt.split(',');\n  } else {\n    let oddCount = 0;\n    for (let i = 0; i < txt.length; i++) {\n      let charCode = txt.charCodeAt(i) - 97;\n      if (charCode >= 0 && charCode < 26 && charCode % 2 !== 0) {\n        oddCount++;\n      }\n    }\n    return oddCount;\n  }\n\n  return words;"
    ],
    [
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\nreturn arr.sort((a, b) => {\n    const binaryA = a.toString(2);\n    const binaryB = b.toString(2);\n    const onesA = binaryA.split('').filter(char => char === '1').length;\n    const onesB = binaryB.split('').filter(char => char === '1').length;\n\n    if (onesA === onesB) {\n        return a - b;\n    } else {\n        return onesA - onesB;\n    }\n});\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\nreturn arr.sort((a, b) => {\n    const binaryA = a.toString(2);\n    const binaryB = b.toString(2);\n    const countA = binaryA.split('').filter(char => char === '1').length;\n    const countB = binaryB.split('').filter(char => char === '1').length;\n\n    if (countA === countB) {\n      return a - b;\n    } else {\n      return countA - countB;\n    }\n  });\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\nreturn arr.sort((a, b) => {\n    const binaryA = a.toString(2);\n    const binaryB = b.toString(2);\n    const countOnesA = binaryA.split('').filter(char => char === '1').length;\n    const countOnesB = binaryB.split('').filter(char => char === '1').length;\n\n    if (countOnesA === countOnesB) {\n        return a - b;\n    } else {\n        return countOnesA - countOnesB;\n    }\n});",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\nreturn arr.sort((a, b) => {\n    const bitCountA = a.toString(2).split('1').length - 1;\n    const bitCountB = b.toString(2).split('1').length - 1;\n    if (bitCountA === bitCountB) {\n      return a - b;\n    }\n    return bitCountA - bitCountB;\n  });\n}",
        "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\nreturn arr.sort((a, b) => {\n    const binaryA = a.toString(2);\n    const binaryB = b.toString(2);\n    const onesInA = binaryA.split('').filter(num => num === '1').length;\n    const onesInB = binaryB.split('').filter(num => num === '1').length;\n\n    if (onesInA === onesInB) {\n        return a - b;\n    } else {\n        return onesInA - onesInB;\n    }\n});"
    ],
    [
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\nreturn strings.join('');",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\nreturn strings.join('');",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\nreturn strings.join('');",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\nreturn strings.join('');",
        "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\nreturn strings.join('');"
    ],
    [
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\nlet filteredList = lst.filter(word => word.length % 2 === 0);\nfilteredList.sort((a, b) => {\n    if (a.length === b.length) {\n        return a.localeCompare(b);\n    } else {\n        return a.length - b.length;\n    }\n});\nreturn filteredList;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n// Filter out strings with odd lengths\nlet evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n\n// Sort the array by length of each word, if they have the same length, sort them alphabetically\nevenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n        return a.localeCompare(b);\n    }\n    return a.length - b.length;\n});\n\nreturn evenLengthStrings;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\nlet evenLengthStrings = lst.filter(str => str.length % 2 === 0);\nevenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n        return a.localeCompare(b);\n    }\n    return a.length - b.length;\n});\nreturn evenLengthStrings;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\nlet evenLengthStrings = lst.filter(str => str.length % 2 === 0);\nevenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n        return a.localeCompare(b);\n    }\n    return a.length - b.length;\n});\nreturn evenLengthStrings;\n}",
        "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\nlet filteredArray = lst.filter(word => word.length % 2 === 0);\nfilteredArray.sort((a, b) => {\n    if (a.length === b.length) {\n        return a.localeCompare(b);\n    } else {\n        return a.length - b.length;\n    }\n});\nreturn filteredArray;\n}"
    ],
    [
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\nreturn strings.filter(str => str.includes(substring));",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\nreturn strings.filter(str => str.includes(substring));",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\nreturn strings.filter(str => str.includes(substring));",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\nreturn strings.filter(str => str.includes(substring));",
        "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\nreturn strings.filter(string => string.includes(substring));\n}"
    ],
    [
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\nlet num = parseFloat(value);\nreturn num >= 0 ? Math.round(num) : Math.floor(num);\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\nlet num = parseFloat(value);\nreturn Math.round(num);\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\nlet num = parseFloat(value);\nreturn Math.round(num);\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\nvar num = parseFloat(value);\nreturn Math.round(num);\n}",
        "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\nlet num = parseFloat(value);\nreturn Math.round(num); \n}"
    ],
    [
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\nlet count = 0;\nlet lowerCaseStr = s.toLowerCase();\nfor(let i = 0; i < lowerCaseStr.length; i++){\n    if('aeiou'.includes(lowerCaseStr[i])){\n        count++;\n    }\n}\nif(lowerCaseStr.endsWith('y')){\n    count++;\n}\nreturn count;",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\nlet count = 0;\nlet vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\nfor(let i = 0; i < s.length; i++){\n    if(vowels.includes(s[i])){\n        count++;\n    }\n}\nif(s[s.length-1] === 'y' || s[s.length-1] === 'Y'){\n    count++;\n}\nreturn count;",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\nlet count = 0;\ns = s.toLowerCase();\nfor(let i = 0; i < s.length; i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'){\n        count++;\n    }\n    else if(s[i] === 'y' && i === s.length - 1){\n        count++;\n    }\n}\nreturn count;",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\nlet count = 0;\nlet vowels = ['a', 'e', 'i', 'o', 'u'];\ns = s.toLowerCase();\n\nfor(let i = 0; i < s.length; i++) {\n    if(vowels.includes(s[i])) {\n        count++;\n    }\n}\n\nif(s.endsWith('y')) {\n    count++;\n}\n\nreturn count;",
        "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\nlet count = 0;\nlet vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\nfor(let i = 0; i < s.length; i++) {\n    if(vowels.includes(s[i])) {\n        count++;\n    }\n}\n\nif(s[s.length - 1] === 'y' || s[s.length - 1] === 'Y') {\n    count++;\n}\n\nreturn count;"
    ],
    [
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\nlet maxUniqueChars = 0;\nlet maxWord = \"\";\n\nfor (let word of words) {\n    let uniqueChars = new Set(word.split('')).size;\n    if (uniqueChars > maxUniqueChars) {\n        maxUniqueChars = uniqueChars;\n        maxWord = word;\n    } else if (uniqueChars === maxUniqueChars) {\n        maxWord = word < maxWord ? word : maxWord;\n    }\n}\n\nreturn maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\nlet maxUniqueCharWord = words[0];\nlet maxUniqueChars = new Set(words[0]).size;\n\nfor(let i = 1; i < words.length; i++){\n  let uniqueChars = new Set(words[i]).size;\n  if(uniqueChars > maxUniqueChars || (uniqueChars === maxUniqueChars && words[i] < maxUniqueCharWord)){\n    maxUniqueCharWord = words[i];\n    maxUniqueChars = uniqueChars;\n  }\n}\nreturn maxUniqueCharWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\nlet maxUniqueChars = 0;\nlet maxWord = \"\";\n\nfor(let word of words){\n    let uniqueChars = new Set(word.split('')).size;\n    if(uniqueChars > maxUniqueChars){\n        maxUniqueChars = uniqueChars;\n        maxWord = word;\n    }\n    else if(uniqueChars == maxUniqueChars){\n        if(word < maxWord){\n            maxWord = word;\n        }\n    }\n}\nreturn maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\nlet maxUniqueChars = 0;\nlet maxWord = \"\";\n\nfor(let word of words){\n    let uniqueChars = new Set(word.split('')).size;\n    if(uniqueChars > maxUniqueChars){\n        maxUniqueChars = uniqueChars;\n        maxWord = word;\n    } else if(uniqueChars === maxUniqueChars){\n        maxWord = word < maxWord ? word : maxWord;\n    }\n}\n\nreturn maxWord;\n}",
        "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\nlet maxUniqueChars = 0;\nlet maxUniqueWord = \"\";\n\nwords.sort();\n\nfor (let word of words) {\n  let uniqueChars = new Set(word.split('')).size;\n  if (uniqueChars > maxUniqueChars) {\n    maxUniqueChars = uniqueChars;\n    maxUniqueWord = word;\n  }\n}\n\nreturn maxUniqueWord;\n}"
    ],
    [
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\nconst crypto = require('crypto');\n\nif(text === '') {\n    return undefined;\n}\n\nconst hash = crypto.createHash('md5');\nhash.update(text);\nreturn hash.digest('hex');\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\nconst crypto = require('crypto');\n\nif(text === '') {\n    return undefined;\n} else {\n    return crypto.createHash('md5').update(text).digest('hex');\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\nconst crypto = require('crypto');\n\nif (text === '') {\n    return undefined;\n} else {\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n}",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\nconst crypto = require('crypto');\n\nif(text === '') return undefined;\n\nlet hash = crypto.createHash('md5').update(text).digest('hex');\nreturn hash;",
        "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\nconst crypto = require('crypto');\n\nif (text === '') {\n    return undefined;\n} else {\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n}"
    ],
    [
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\nreturn x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\nreturn x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\nreturn x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\nreturn x.toString(base);\n}",
        "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\nreturn x.toString(base);\n}"
    ],
    [
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n// Sort the sides in ascending order\nlet sides = [a, b, c].sort((a, b) => a - b);\n\n// Apply the Pythagorean theorem\nreturn Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n// sort the sides in ascending order\nlet sides = [a, b, c].sort((a, b) => a - b);\n\n// check if the sum of squares of two smaller sides equals the square of the largest side\nreturn Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n// Sorting the sides in ascending order\nlet sides = [a, b, c].sort((a, b) => a - b);\n\n// Checking if the triangle is right-angled using the Pythagorean theorem\nreturn Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n// Sort the sides in ascending order\nlet sides = [a, b, c].sort((a, b) => a - b);\n\n// Check if the triangle is right-angled using the Pythagorean theorem\nreturn Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}",
        "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n// Sort the sides in ascending order\nlet sides = [a, b, c].sort((a, b) => a - b);\n\n// Check if the triangle is right-angled using the Pythagorean theorem\nreturn Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}"
    ],
    [
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\nlet letterGrades = [];\n\nfor(let i = 0; i < grades.length; i++) {\n    if(grades[i] == 4.0) {\n        letterGrades.push(\"A+\");\n    }\n    else if(grades[i] > 3.7) {\n        letterGrades.push(\"A\");\n    }\n    else if(grades[i] > 3.3) {\n        letterGrades.push(\"A-\");\n    }\n    else if(grades[i] > 3.0) {\n        letterGrades.push(\"B+\");\n    }\n    else if(grades[i] > 2.7) {\n        letterGrades.push(\"B\");\n    }\n    else if(grades[i] > 2.3) {\n        letterGrades.push(\"B-\");\n    }\n    else if(grades[i] > 2.0) {\n        letterGrades.push(\"C+\");\n    }\n    else if(grades[i] > 1.7) {\n        letterGrades.push(\"C\");\n    }\n    else if(grades[i] > 1.3) {\n        letterGrades.push(\"C-\");\n    }\n    else if(grades[i] > 1.0) {\n        letterGrades.push(\"D+\");\n    }\n    else if(grades[i] > 0.7) {\n        letterGrades.push(\"D\");\n    }\n    else if(grades[i] > 0.0) {\n        letterGrades.push(\"D-\");\n    }\n    else {\n        letterGrades.push(\"E\");\n    }\n}\n\nreturn letterGrades;\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\nlet letterGrades = [];\n\n  for(let i = 0; i < grades.length; i++) {\n    if(grades[i] === 4.0) {\n      letterGrades.push(\"A+\");\n    } else if(grades[i] > 3.7) {\n      letterGrades.push(\"A\");\n    } else if(grades[i] > 3.3) {\n      letterGrades.push(\"A-\");\n    } else if(grades[i] > 3.0) {\n      letterGrades.push(\"B+\");\n    } else if(grades[i] > 2.7) {\n      letterGrades.push(\"B\");\n    } else if(grades[i] > 2.3) {\n      letterGrades.push(\"B-\");\n    } else if(grades[i] > 2.0) {\n      letterGrades.push(\"C+\");\n    } else if(grades[i] > 1.7) {\n      letterGrades.push(\"C\");\n    } else if(grades[i] > 1.3) {\n      letterGrades.push(\"C-\");\n    } else if(grades[i] > 1.0) {\n      letterGrades.push(\"D+\");\n    } else if(grades[i] > 0.7) {\n      letterGrades.push(\"D\");\n    } else if(grades[i] > 0.0) {\n      letterGrades.push(\"D-\");\n    } else {\n      letterGrades.push(\"E\");\n    }\n  }\n\n  return letterGrades;\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\nlet letterGrades = [];\n\nfor(let i = 0; i < grades.length; i++){\n    if(grades[i] == 4.0){\n        letterGrades.push(\"A+\");\n    }\n    else if(grades[i] > 3.7){\n        letterGrades.push(\"A\");\n    }\n    else if(grades[i] > 3.3){\n        letterGrades.push(\"A-\");\n    }\n    else if(grades[i] > 3.0){\n        letterGrades.push(\"B+\");\n    }\n    else if(grades[i] > 2.7){\n        letterGrades.push(\"B\");\n    }\n    else if(grades[i] > 2.3){\n        letterGrades.push(\"B-\");\n    }\n    else if(grades[i] > 2.0){\n        letterGrades.push(\"C+\");\n    }\n    else if(grades[i] > 1.7){\n        letterGrades.push(\"C\");\n    }\n    else if(grades[i] > 1.3){\n        letterGrades.push(\"C-\");\n    }\n    else if(grades[i] > 1.0){\n        letterGrades.push(\"D+\");\n    }\n    else if(grades[i] > 0.7){\n        letterGrades.push(\"D\");\n    }\n    else if(grades[i] > 0.0){\n        letterGrades.push(\"D-\");\n    }\n    else{\n        letterGrades.push(\"E\");\n    }\n}\n\nreturn letterGrades;\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\nlet letter_grades = [];\n\nfor(let i=0; i<grades.length; i++){\n    if(grades[i] === 4.0){\n        letter_grades.push(\"A+\");\n    }else if(grades[i] > 3.7){\n        letter_grades.push(\"A\");\n    }else if(grades[i] > 3.3){\n        letter_grades.push(\"A-\");\n    }else if(grades[i] > 3.0){\n        letter_grades.push(\"B+\");\n    }else if(grades[i] > 2.7){\n        letter_grades.push(\"B\");\n    }else if(grades[i] > 2.3){\n        letter_grades.push(\"B-\");\n    }else if(grades[i] > 2.0){\n        letter_grades.push(\"C+\");\n    }else if(grades[i] > 1.7){\n        letter_grades.push(\"C\");\n    }else if(grades[i] > 1.3){\n        letter_grades.push(\"C-\");\n    }else if(grades[i] > 1.0){\n        letter_grades.push(\"D+\");\n    }else if(grades[i] > 0.7){\n        letter_grades.push(\"D\");\n    }else if(grades[i] > 0.0){\n        letter_grades.push(\"D-\");\n    }else{\n        letter_grades.push(\"E\");\n    }\n}\n\nreturn letter_grades;\n}",
        "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\nlet letterGrades = [];\n\nfor(let i=0; i<grades.length; i++){\n    if(grades[i] === 4.0) letterGrades.push(\"A+\");\n    else if(grades[i] > 3.7) letterGrades.push(\"A\");\n    else if(grades[i] > 3.3) letterGrades.push(\"A-\");\n    else if(grades[i] > 3.0) letterGrades.push(\"B+\");\n    else if(grades[i] > 2.7) letterGrades.push(\"B\");\n    else if(grades[i] > 2.3) letterGrades.push(\"B-\");\n    else if(grades[i] > 2.0) letterGrades.push(\"C+\");\n    else if(grades[i] > 1.7) letterGrades.push(\"C\");\n    else if(grades[i] > 1.3) letterGrades.push(\"C-\");\n    else if(grades[i] > 1.0) letterGrades.push(\"D+\");\n    else if(grades[i] > 0.7) letterGrades.push(\"D\");\n    else if(grades[i] > 0.0) letterGrades.push(\"D-\");\n    else letterGrades.push(\"E\");\n}\n\nreturn letterGrades;\n}"
    ],
    [
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\nlet result = [];\nfor(let i = 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n    if(i < numbers.length - 1){\n        result.push(delimeter);\n    }\n}\nreturn result;",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\nlet result = [];\nfor(let i = 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n    if(i < numbers.length - 1){\n        result.push(delimeter);\n    }\n}\nreturn result;",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\nlet result = [];\nfor(let i = 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n    if(i < numbers.length - 1){\n        result.push(delimeter);\n    }\n}\nreturn result;",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\nlet result = [];\nfor(let i = 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n    if(i !== numbers.length - 1){\n        result.push(delimeter);\n    }\n}\nreturn result;",
        "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\nlet result = [];\nfor(let i = 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n    if(i !== numbers.length - 1){\n        result.push(delimeter);\n    }\n}\nreturn result;"
    ],
    [
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\nlet count = 0;\nfor(let num of nums){\n    if(num > 10){\n        let strNum = num.toString();\n        let firstDigit = parseInt(strNum[0]);\n        let lastDigit = parseInt(strNum[strNum.length-1]);\n        if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n            count++;\n        }\n    }\n}\nreturn count;",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\nlet count = 0;\nfor(let i = 0; i < nums.length; i++){\n    let num = nums[i];\n    if(num > 10){\n        let firstDigit = parseInt(num.toString().split('')[0]);\n        let lastDigit = parseInt(num.toString().split('').pop());\n        if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n            count++;\n        }\n    }\n}\nreturn count;",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\nlet count = 0;\nfor(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]); // Take absolute value to handle negative numbers\n    if(num > 10){\n        let numStr = num.toString();\n        let firstDigit = parseInt(numStr[0]);\n        let lastDigit = parseInt(numStr[numStr.length - 1]);\n        if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n            count++;\n        }\n    }\n}\nreturn count;",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\nlet count = 0;\nfor(let num of nums) {\n    if(num > 10) {\n        let strNum = num.toString();\n        let firstDigit = parseInt(strNum[0]);\n        let lastDigit = parseInt(strNum[strNum.length - 1]);\n        if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n            count++;\n        }\n    }\n}\nreturn count;",
        "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\nlet count = 0;\nfor(let i = 0; i < nums.length; i++){\n    if(nums[i] > 10){\n        let strNum = nums[i].toString();\n        let firstDigit = parseInt(strNum[0]);\n        let lastDigit = parseInt(strNum[strNum.length - 1]);\n        if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n            count++;\n        }\n    }\n}\nreturn count;"
    ],
    [
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\nlet sum = 0;\nfor(let i = 1; i <= n; i++){\n    sum += i;\n}\nreturn sum;",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\nlet sum = 0;\nfor (let i = 1; i <= n; i++) {\n    sum += i;\n}\nreturn sum;",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\nlet sum = 0;\nfor(let i = 1; i <= n; i++){\n    sum += i;\n}\nreturn sum;",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\nlet sum = 0;\nfor(let i = 1; i <= n; i++){\n    sum += i;\n}\nreturn sum;\n}",
        "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\nlet sum = 0;\nfor(let i = 1; i <= n; i++){\n    sum += i;\n}\nreturn sum;"
    ],
    [
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\nlet uniqueNumbers = [];\nfor(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === i && numbers.lastIndexOf(numbers[i]) === i){\n        uniqueNumbers.push(numbers[i]);\n    }\n}\nreturn uniqueNumbers;",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\nlet unique = [];\nfor(let i=0; i<numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === i && numbers.indexOf(numbers[i], i+1) === -1){\n        unique.push(numbers[i]);\n    }\n}\nreturn unique;\n}",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\nlet unique = [];\nfor(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === i && numbers.lastIndexOf(numbers[i]) === i){\n        unique.push(numbers[i]);\n    }\n}\nreturn unique;",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\nlet unique = [];\nfor(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === i){\n        unique.push(numbers[i]);\n    }\n}\nreturn unique;",
        "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\nlet uniqueNumbers = [];\nfor(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === i){\n        uniqueNumbers.push(numbers[i]);\n    }\n}\nreturn uniqueNumbers;"
    ],
    [
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\nlet start = Math.min(a, b);\nlet end = Math.max(a, b);\nlet result = [];\n\nfor(let i = start; i <= end; i++){\n    if(i % 2 === 0){\n        result.push(i);\n    }\n}\n\nreturn result;",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\nlet start = Math.min(a, b);\nlet end = Math.max(a, b);\nlet result = [];\n\nfor(let i = start; i <= end; i++) {\n    if(i % 2 === 0) {\n        result.push(i);\n    }\n}\n\nreturn result;",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\nlet start = Math.min(a, b);\nlet end = Math.max(a, b);\nlet result = [];\n\nfor(let i = start; i <= end; i++) {\n    if(i % 2 === 0) {\n        result.push(i);\n    }\n}\n\nreturn result;",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\nlet start = Math.min(a, b);\nlet end = Math.max(a, b);\nlet result = [];\n\nfor(let i = start; i <= end; i++){\n    if(i % 2 === 0){\n        result.push(i);\n    }\n}\nreturn result;",
        "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\nlet start = Math.min(a, b);\nlet end = Math.max(a, b);\nlet result = [];\n\nfor(let i = start; i <= end; i++){\n    if(i % 2 === 0){\n        result.push(i);\n    }\n}\nreturn result;"
    ],
    [
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\nlet max = numbers[0];\nlet result = [max];\n\nfor(let i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n        max = numbers[i];\n    }\n    result.push(max);\n}\nreturn result;",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\nlet max = numbers[0];\nlet result = [max];\n\nfor(let i = 1; i < numbers.length; i++) {\n    if(numbers[i] > max) {\n        max = numbers[i];\n    }\n    result.push(max);\n}\n\nreturn result;",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\nlet maxNumbers = [];\nlet max = numbers[0];\n\nfor(let i = 0; i < numbers.length; i++){\n    if(numbers[i] > max){\n        max = numbers[i];\n    }\n    maxNumbers.push(max);\n}\n\nreturn maxNumbers;",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\nlet maxNumbers = [];\nlet max = numbers[0];\n\nfor(let i = 0; i < numbers.length; i++){\n    if(numbers[i] > max){\n        max = numbers[i];\n    }\n    maxNumbers.push(max);\n}\n\nreturn maxNumbers;",
        "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\nlet maxArray = [];\nlet max = numbers[0];\n\nfor(let i=0; i<numbers.length; i++){\n    if(numbers[i] > max){\n        max = numbers[i];\n    }\n    maxArray.push(max);\n}\n\nreturn maxArray;"
    ],
    [
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\nlet balance = 0;\nfor(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n        return true;\n    }\n}\nreturn false;",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\nlet balance = 0;\nfor(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n        return true;\n    }\n}\nreturn false;",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\nlet balance = 0;\nfor(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n        return true;\n    }\n}\nreturn false;",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\nlet balance = 0;\nfor(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n        return true;\n    }\n}\nreturn false;",
        "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\nlet balance = 0;\nfor(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n        return true;\n    }\n}\nreturn false;"
    ],
    [
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\nlet freq = {};\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]]){\n      freq[lst[i]] += 1;\n    } else {\n      freq[lst[i]] = 1;\n    }\n  }\n\n  let max = -1;\n  for(let key in freq){\n    if(freq[key] >= key){\n      max = Math.max(max, parseInt(key));\n    }\n  }\n\n  return max;",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\nlet frequency = {};\nlet result = -1;\n\nfor(let i = 0; i < lst.length; i++){\n    if(frequency[lst[i]]){\n        frequency[lst[i]]++;\n    } else {\n        frequency[lst[i]] = 1;\n    }\n}\n\nfor(let num in frequency){\n    if(frequency[num] >= num){\n        result = Math.max(result, Number(num));\n    }\n}\n\nreturn result;",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\nlet freq = {};\nfor(let i=0; i<lst.length; i++){\n    if(freq[lst[i]]){\n        freq[lst[i]]++;\n    }else{\n        freq[lst[i]] = 1;\n    }\n}\n\nlet max = -1;\nfor(let key in freq){\n    if(freq[key] >= key){\n        max = Math.max(max, parseInt(key));\n    }\n}\nreturn max;",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\nlet freq = {};\nfor(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]]){\n        freq[lst[i]]++;\n    }else{\n        freq[lst[i]] = 1;\n    }\n}\n\nlet max = -1;\nfor(let key in freq){\n    if(freq[key] >= key){\n        max = Math.max(max, parseInt(key));\n    }\n}\nreturn max;",
        "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\nlet freqMap = {};\n  lst.forEach((num) => {\n    if (freqMap[num]) {\n      freqMap[num]++;\n    } else {\n      freqMap[num] = 1;\n    }\n  });\n\n  let maxNum = -1;\n  for (let num in freqMap) {\n    if (freqMap[num] >= num) {\n      maxNum = Math.max(maxNum, Number(num));\n    }\n  }\n\n  return maxNum;"
    ],
    [
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\nlet stack = [];\n\nfor (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n        stack.push(brackets[i]);\n    } else {\n        if (stack.length === 0) {\n            return false;\n        }\n        stack.pop();\n    }\n}\n\nreturn stack.length === 0;\n}",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\nlet stack = [];\n\nfor(let i = 0; i < brackets.length; i++) {\n    if(brackets[i] === \"(\") {\n        stack.push(brackets[i]);\n    } else if(brackets[i] === \")\" && stack.length !== 0) {\n        stack.pop();\n    } else {\n        return false;\n    }\n}\n\nreturn stack.length === 0 ? true : false;",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\nlet balance = 0;\n\nfor (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n        balance++;\n    } else if (brackets[i] === ')') {\n        balance--;\n    }\n\n    if (balance < 0) {\n        return false;\n    }\n}\n\nreturn balance === 0;}",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\nlet balance = 0;\nfor (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n        balance++;\n    } else if (brackets[i] === \")\") {\n        balance--;\n    }\n    if (balance < 0) {\n        return false;\n    }\n}\nreturn balance === 0;",
        "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\nlet balance = 0;\nfor (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n        balance++;\n    } else if (brackets[i] === ')') {\n        balance--;\n    }\n    if (balance < 0) {\n        return false;\n    }\n}\nreturn balance === 0;"
    ],
    [
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\nlet evenIndices = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\nlet result = l.map((value, index) => index % 2 === 0 ? evenIndices.shift() : value);\nreturn result;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\nlet evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\nlet result = l.map((x, i) => i % 2 === 0 ? evenIndices.shift() : x);\nreturn result;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\nlet evenIndices = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\nlet result = l.map((val, index) => index % 2 === 0 ? evenIndices.shift() : val);\nreturn result;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\nlet evenArray = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\nlet result = l.map((value, index) => index % 2 === 0 ? evenArray.shift() : value);\nreturn result;\n}",
        "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\nlet evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\nlet result = l.map((val, i) => i % 2 === 0 ? evenIndices.shift() : val);\nreturn result;\n}"
    ],
    [
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\nlet s0Sorted = s0.split(\"\").sort().join(\"\");\nlet s1Sorted = s1.split(\"\").sort().join(\"\");\nreturn s0Sorted === s1Sorted;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n// split the strings into arrays, sort them and join them back into strings\n  let sortedS0 = s0.split('').sort().join('');\n  let sortedS1 = s1.split('').sort().join('');\n\n  // compare the sorted strings\n  return sortedS0 === sortedS1;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\nlet sortedS0 = s0.split('').sort().join('');\nlet sortedS1 = s1.split('').sort().join('');\nreturn sortedS0 === sortedS1;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n// create a character map of both strings\nlet mapS0 = {};\nlet mapS1 = {};\n\nfor(let char of s0) {\n    if(!mapS0[char]) {\n        mapS0[char] = 1;\n    } else {\n        mapS0[char]++;\n    }\n}\n\nfor(let char of s1) {\n    if(!mapS1[char]) {\n        mapS1[char] = 1;\n    } else {\n        mapS1[char]++;\n    }\n}\n\n// compare the two maps\nfor(let key in mapS0) {\n    if(mapS0[key] !== mapS1[key]) {\n        return false;\n    }\n}\n\nfor(let key in mapS1) {\n    if(mapS1[key] !== mapS0[key]) {\n        return false;\n    }\n}\n\nreturn true;\n}",
        "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n// Create a character map for each string\nlet charMap0 = {};\nlet charMap1 = {};\n\n// Populate the character maps\nfor (let char of s0) {\n    if (!charMap0[char]) {\n        charMap0[char] = 1;\n    } else {\n        charMap0[char]++;\n    }\n}\n\nfor (let char of s1) {\n    if (!charMap1[char]) {\n        charMap1[char] = 1;\n    } else {\n        charMap1[char]++;\n    }\n}\n\n// Compare the character maps\nfor (let char in charMap0) {\n    if (charMap0[char] !== charMap1[char]) {\n        return false;\n    }\n}\n\nfor (let char in charMap1) {\n    if (charMap1[char] !== charMap0[char]) {\n        return false;\n    }\n}\n\nreturn true;\n}"
    ],
    [
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\nlet stack = [];\n\nfor (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n        stack.push(\"<\");\n    } else if (brackets[i] === \">\" && stack.length !== 0) {\n        stack.pop();\n    } else {\n        return false;\n    }\n}\n\nreturn stack.length === 0;",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\nlet stack = [];\nfor(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === '<'){\n        stack.push('<');\n    } else if(brackets[i] === '>'){\n        if(stack.length === 0){\n            return false;\n        } else {\n            stack.pop();\n        }\n    }\n}\nreturn stack.length === 0; }",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\nlet stack = [];\n\nfor(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === '<'){\n        stack.push(brackets[i]);\n    } else if(brackets[i] === '>'){\n        if(stack.length === 0){\n            return false;\n        } else {\n            stack.pop();\n        }\n    }\n}\n\nreturn stack.length === 0;",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\nlet stack = [];\n\nfor(let i = 0; i < brackets.length; i++) {\n    if(brackets[i] === \"<\") {\n        stack.push(brackets[i]);\n    } else if(brackets[i] === \">\") {\n        if(stack.length === 0) {\n            return false;\n        } else {\n            stack.pop();\n        }\n    }\n}\n\nreturn stack.length === 0;\n}",
        "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\nlet stack = [];\n\nfor (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n        stack.push(brackets[i]);\n    } else if (brackets[i] === '>') {\n        if (stack.length === 0) {\n            return false;\n        } else {\n            stack.pop();\n        }\n    }\n}\n\nreturn stack.length === 0;\n}"
    ]
]