[
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n// >>> string_length((\"\"))\n// (0)\n// >>> string_length((\"abc\"))\n// (3)\nlong string_length(std::string string) {\nreturn string.length();\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n// >>> string_length((\"\"))\n// (0)\n// >>> string_length((\"abc\"))\n// (3)\nlong string_length(std::string string) {\nreturn string.length();\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n// >>> string_length((\"\"))\n// (0)\n// >>> string_length((\"abc\"))\n// (3)\nlong string_length(std::string string) {\nreturn string.length();\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n// >>> string_length((\"\"))\n// (0)\n// >>> string_length((\"abc\"))\n// (3)\nlong string_length(std::string string) {\nreturn string.length();\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n// >>> string_length((\"\"))\n// (0)\n// >>> string_length((\"abc\"))\n// (3)\nlong string_length(std::string string) {\nreturn string.length();\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\")\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\nstd::string encrypt(std::string s) {\n{\n    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            char base = isupper(s[i]) ? 'A' : 'a';\n            result += (s[i] - base + 4) % 26 + base;\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\")\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\nstd::string encrypt(std::string s) {\n{\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(isupper(s[i])) {\n                s[i] = (s[i] - 'A' + 4) % 26 + 'A';\n            } else {\n                s[i] = (s[i] - 'a' + 4) % 26 + 'a';\n            }\n        }\n    }\n    return s;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\")\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\nstd::string encrypt(std::string s) {\n{\n    std::string result = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = isupper(c) ? 'A' : 'a';\n            c = ((c - base + 4) % 26) + base;\n        }\n        result += c;\n    }\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\")\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\nstd::string encrypt(std::string s) {\n{\n    std::string result = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = isupper(c) ? 'A' : 'a';\n            c = ((c - base + 4) % 26) + base;\n        }\n        result += c;\n    }\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\")\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\nstd::string encrypt(std::string s) {\n{\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (isupper(s[i])) {\n                s[i] = ((s[i] - 'A' + 4) % 26) + 'A';\n            } else {\n                s[i] = ((s[i] - 'a' + 4) % 26) + 'a';\n            }\n        }\n    }\n    return s;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string> dict) {\nif(dict.empty()) return false;\n\nbool isLower = islower(dict.begin()->first[0]);\nbool isUpper = isupper(dict.begin()->first[0]);\n\nfor(auto& pair : dict) {\n    for(char c : pair.first) {\n        if(isLower && isupper(c)) return false;\n        if(isUpper && islower(c)) return false;\n    }\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string> dict) {\nif(dict.empty()) return false;\n\nbool isLower = islower(dict.begin()->first[0]);\nbool isUpper = isupper(dict.begin()->first[0]);\n\nfor(auto it = dict.begin(); it != dict.end(); ++it) {\n    for(char c : it->first) {\n        if(isLower && isupper(c)) return false;\n        if(isUpper && islower(c)) return false;\n    }\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string> dict) {\nif(dict.empty()) return false;\n\nbool isLower = islower(dict.begin()->first[0]);\nbool isUpper = isupper(dict.begin()->first[0]);\n\nfor(auto &pair : dict) {\n    for(char &c : pair.first) {\n        if(isLower && isupper(c)) return false;\n        if(isUpper && islower(c)) return false;\n    }\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string> dict) {\nif(dict.empty())\n        return false;\n\n    bool is_lower = std::islower(dict.begin()->first[0]);\n    bool is_upper = std::isupper(dict.begin()->first[0]);\n\n    for(auto& pair : dict) {\n        for(char c : pair.first) {\n            if(is_lower && std::isupper(c))\n                return false;\n            if(is_upper && std::islower(c))\n                return false;\n        }\n    }\n    return true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string> dict) {\nif (dict.empty()) {\n    return false;\n}\n\nbool isLower = islower(dict.begin()->first[0]);\nbool isUpper = isupper(dict.begin()->first[0]);\n\nfor (auto const& pair : dict) {\n    if (isLower) {\n        for (char c : pair.first) {\n            if (isupper(c)) {\n                return false;\n            }\n        }\n    }\n    else if (isUpper) {\n        for (char c : pair.first) {\n            if (islower(c)) {\n                return false;\n            }\n        }\n    }\n}\nreturn true;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\nlong add(std::vector<long> lst) {\nlong sum = 0;\nfor(int i=1; i<lst.size(); i+=2){\n    if(lst[i] % 2 == 0){\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\nlong add(std::vector<long> lst) {\nlong sum = 0;\nfor (int i = 1; i < lst.size(); i += 2) {\n    if (lst[i] % 2 == 0) {\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\nlong add(std::vector<long> lst) {\nlong sum = 0;\nfor (int i = 1; i < lst.size(); i += 2) {\n    if (lst[i] % 2 == 0) {\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\nlong add(std::vector<long> lst) {\nlong sum = 0;\nfor (int i = 1; i < lst.size(); i += 2) {\n    if (lst[i] % 2 == 0) {\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\nlong add(std::vector<long> lst) {\nlong sum = 0;\nfor (int i = 1; i < lst.size(); i += 2) {\n    if (lst[i] % 2 == 0) {\n        sum += lst[i];\n    }\n}\nreturn sum;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\" Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\")\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\" Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\nstd::string result;\nbool prev_space = false;\nint space_count = 0;\n\nfor (char c : text) {\n    if (c == ' ') {\n        space_count++;\n        if (space_count > 2) {\n            if (!prev_space) {\n                result.push_back('-');\n                prev_space = true;\n            }\n        } else {\n            result.push_back('_');\n            prev_space = false;\n        }\n    } else {\n        result.push_back(c);\n        space_count = 0;\n        prev_space = false;\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\" Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\")\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\" Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\nstd::string result;\nbool consecutive_space = false;\nfor (int i = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n        if (i > 0 && text[i - 1] == ' ') {\n            consecutive_space = true;\n        }\n        if (consecutive_space && (i == text.size() - 1 || text[i + 1] != ' ')) {\n            result.push_back('-');\n            consecutive_space = false;\n        } else if (!consecutive_space || (consecutive_space && text[i + 1] == ' ')) {\n            result.push_back('_');\n        }\n    } else {\n        result.push_back(text[i]);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\" Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\")\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\" Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\nstd::string result = \"\";\nbool isConsecutive = false;\nfor (int i = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n        if (i < text.size() - 1 && text[i + 1] == ' ') {\n            isConsecutive = true;\n            continue;\n        } else if (isConsecutive) {\n            result += '-';\n            isConsecutive = false;\n        } else {\n            result += '_';\n        }\n    } else {\n        result += text[i];\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\" Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\")\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\" Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\nstd::string result = \"\";\nint space_count = 0;\n\nfor (char c : text) {\n    if (c == ' ') {\n        space_count++;\n        if (space_count > 2) {\n            if (result.back() != '-') {\n                result.pop_back();\n                result.push_back('-');\n            }\n        } else {\n            result.push_back('_');\n        }\n    } else {\n        space_count = 0;\n        result.push_back(c);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\" Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\")\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\" Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\nstd::string result = \"\";\nbool multi_space = false;\nfor (int i = 0; i < text.size(); ++i) {\n    if (text[i] == ' ') {\n        if (i < text.size()-1 && text[i+1] == ' ') {\n            multi_space = true;\n        }\n        if (multi_space && (i == text.size()-1 || text[i+1] != ' ')) {\n            result += '-';\n            multi_space = false;\n        }\n        else if (!multi_space) {\n            result += '_';\n        }\n    } else {\n        result += text[i];\n    }\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n// >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\nif (n == 0) {\n    return 0;\n}\nif (n == 1) {\n    return 0;\n}\nif (n == 2) {\n    return 1;\n}\n\nlong fibfib_n_minus_1 = 1;\nlong fibfib_n_minus_2 = 0;\nlong fibfib_n_minus_3 = 0;\nlong fibfib_n;\n\nfor (long i = 3; i <= n; i++) {\n    fibfib_n = fibfib_n_minus_1 + fibfib_n_minus_2 + fibfib_n_minus_3;\n    fibfib_n_minus_3 = fibfib_n_minus_2;\n    fibfib_n_minus_2 = fibfib_n_minus_1;\n    fibfib_n_minus_1 = fibfib_n;\n}\n\nreturn fibfib_n;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n// >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n    if (n == 0 || n == 1)\n        return 0;\n    else if (n == 2)\n        return 1;\n    else {\n        long a = 0, b = 0, c = 1, d;\n        for (long i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n// >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    else if (n == 2) {\n        return 1;\n    }\n    else {\n        long a = 0, b = 0, c = 1, d;\n        for (long i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n// >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n    if(n == 0 || n == 1)\n        return 0;\n    if(n == 2)\n        return 1;\n\n    long a = 0, b = 0, c = 1, d;\n    for(long i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n// >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n    // base cases\n    if(n == 0 || n == 1)\n        return 0;\n    if(n == 2)\n        return 1;\n\n    // initialize the three preceding values\n    long a = 0, b = 0, c = 1;\n\n    // calculate the nth fibfib number\n    for(long i = 3; i <= n; i++) {\n        long temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n    }\n\n    // return the nth fibfib number\n    return c;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1, (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1, (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9, (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n// (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\nlong sum = 0;\nfor(auto i : lst) {\n    if(i >= 0 && (long)i % 2 != 0) {\n        sum += (long)i * (long)i;\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1, (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1, (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9, (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n// (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\nlong sum = 0;\nfor (auto num : lst) {\n    if (num >= 0 && (int)num % 2 != 0) {\n        sum += pow(num, 2);\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1, (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1, (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9, (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n// (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\nlong sum = 0;\nfor(auto num : lst) {\n    if(num >= 0 && floor(num) == num && (int)num % 2 != 0) {\n        sum += num * num;\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1, (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1, (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9, (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n// (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\nlong sum = 0;\nfor(auto& num : lst) {\n    if(num >= 0 && (long)num % 2 != 0) {\n        sum += pow((long)num, 2);\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1, (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1, (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9, (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n// (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\nlong sum = 0;\nfor(auto num : lst) {\n    if(num >= 0 && floor(num) == num && (long)num % 2 != 0) {\n        sum += (long)num * (long)num;\n    }\n}\nreturn sum;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers((std::vector<std::any>({(std::string)\"a\", (std::string)3.14f, (std::string)5})))\n// (std::vector<long>({(long)5}))\n// >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(), std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) {\nstd::vector<long> result;\nfor(const auto& value : values) {\n    if(value.type() == typeid(int) || value.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(value));\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers((std::vector<std::any>({(std::string)\"a\", (std::string)3.14f, (std::string)5})))\n// (std::vector<long>({(long)5}))\n// >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(), std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) {\nstd::vector<long> result;\nfor(const auto& val : values) {\n    if(val.type() == typeid(int) || val.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(val));\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers((std::vector<std::any>({(std::string)\"a\", (std::string)3.14f, (std::string)5})))\n// (std::vector<long>({(long)5}))\n// >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(), std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) {\nstd::vector<long> result;\nfor (const auto& value : values) {\n    if (value.type() == typeid(int) || value.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(value));\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers((std::vector<std::any>({(std::string)\"a\", (std::string)3.14f, (std::string)5})))\n// (std::vector<long>({(long)5}))\n// >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(), std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) {\nstd::vector<long> result;\nfor(auto &val : values){\n    if(val.type() == typeid(int) || val.type() == typeid(long)){\n        result.push_back(std::any_cast<long>(val));\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers((std::vector<std::any>({(std::string)\"a\", (std::string)3.14f, (std::string)5})))\n// (std::vector<long>({(long)5}))\n// >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(), std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) {\nstd::vector<long> result;\nfor (const auto& value : values) {\n    if (value.type() == typeid(int) || value.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(value));\n    }\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) {\n// The number of collisions will be the same as the number of cars moving in one direction.\n// Since each car moving left to right will collide with one car moving right to left,\n// and vice versa, the total number of collisions will be n.\n\nreturn n;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) {\n// The number of collisions will be n, as each car going left to right will collide with a car going right to left.\nreturn n;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) {\n// The number of collisions will be equal to the number of cars moving in one direction\n// as each car will collide with one car moving in the opposite direction.\nreturn n;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) {\n// In this scenario, each car moving left to right will collide with a car moving right to left.\n// Since there are n cars moving in each direction, there will be n collisions.\nreturn n;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) {\n// Since each car moving from left to right will collide with a car moving from right to left, \n// the number of collisions will be equal to the number of cars moving in one direction.\n// Therefore, the number of collisions will be n.\n\nreturn n;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4, (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4, (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\nstd::vector<long> beats;\nstd::istringstream ss(music_string);\nstd::string note;\n\nwhile (std::getline(ss, note, ' ')) {\n    if (note == \"o\") {\n        beats.push_back(4);\n    } else if (note == \"o|\") {\n        beats.push_back(2);\n    } else if (note == \".|\") {\n        beats.push_back(1);\n    }\n}\n\nreturn beats;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4, (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4, (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\nstd::vector<long> beats;\nstd::istringstream iss(music_string);\nstd::string note;\nwhile (std::getline(iss, note, ' ')) {\n    if (note == \"o\") {\n        beats.push_back(4);\n    } else if (note == \"o|\") {\n        beats.push_back(2);\n    } else if (note == \".|\") {\n        beats.push_back(1);\n    }\n}\nreturn beats;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4, (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4, (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\nstd::vector<long> beats;\nstd::istringstream iss(music_string);\nstd::string note;\n\nwhile (std::getline(iss, note, ' ')) {\n    if (note == \"o\") {\n        beats.push_back(4);\n    } else if (note == \"o|\") {\n        beats.push_back(2);\n    } else if (note == \".|\") {\n        beats.push_back(1);\n    }\n}\nreturn beats;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4, (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4, (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\nstd::vector<long> beats;\nstd::istringstream iss(music_string);\nstd::string note;\n\nwhile (std::getline(iss, note, ' ')) {\n    if (note == \"o\") {\n        beats.push_back(4);\n    } else if (note == \"o|\") {\n        beats.push_back(2);\n    } else if (note == \".|\") {\n        beats.push_back(1);\n    }\n}\n\nreturn beats;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4, (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4, (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\nstd::vector<long> beats;\nstd::istringstream ss(music_string);\nstd::string note;\n\nwhile(std::getline(ss, note, ' ')) {\n    if(note == \"o\") {\n        beats.push_back(4);\n    } else if(note == \"o|\") {\n        beats.push_back(2);\n    } else if(note == \".|\") {\n        beats.push_back(1);\n    }\n}\nreturn beats;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\nstd::string binary = \"db\";\nwhile(decimal != 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n}\nstd::reverse(binary.begin() + 2, binary.end());\nbinary += \"db\";\nreturn binary;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\nstd::string binary = \"db\";\nwhile(decimal) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n}\nstd::reverse(binary.begin()+2, binary.end());\nbinary += \"db\";\nreturn binary;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\nstd::string binary = \"db\";\nwhile(decimal) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n}\nstd::reverse(binary.begin() + 2, binary.end());\nbinary += \"db\";\nreturn binary;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\nstd::string binary = \"db\";\nwhile(decimal != 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n}\nstd::reverse(binary.begin()+2, binary.end());\nbinary += \"db\";\nreturn binary;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\nstd::string binary = \"db\";\nwhile(decimal){\n    binary += std::to_string(decimal%2);\n    decimal /= 2;\n}\nstd::reverse(binary.begin()+2, binary.end());\nbinary += \"db\";\nreturn binary;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n// (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\nstd::vector<std::string> result;\nfor (int i = 0; i < string.length(); i++) {\n    result.push_back(string.substr(0, i+1));\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n// (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\nstd::vector<std::string> prefixes;\nfor (int i = 0; i < string.length(); i++) {\n    prefixes.push_back(string.substr(0, i+1));\n}\nreturn prefixes;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n// (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\nstd::vector<std::string> prefixes;\nfor (int i = 0; i < string.length(); i++) {\n    prefixes.push_back(string.substr(0, i+1));\n}\nreturn prefixes;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n// (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\nstd::vector<std::string> prefixes;\nfor (int i = 0; i < string.length(); i++) {\n    prefixes.push_back(string.substr(0, i+1));\n}\nreturn prefixes;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n// (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\nstd::vector<std::string> prefixes;\nfor (int i = 0; i < string.length(); i++) {\n    prefixes.push_back(string.substr(0, i+1));\n}\nreturn prefixes;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n// >>> add((2), (3))\n// (5)\n// >>> add((5), (7))\n// (12)\nlong add(long x, long y) {\nreturn x + y;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n// >>> add((2), (3))\n// (5)\n// >>> add((5), (7))\n// (12)\nlong add(long x, long y) {\nreturn x + y;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n// >>> add((2), (3))\n// (5)\n// >>> add((5), (7))\n// (12)\nlong add(long x, long y) {\nreturn x + y;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n// >>> add((2), (3))\n// (5)\n// >>> add((5), (7))\n// (12)\nlong add(long x, long y) {\nreturn x + y;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n// >>> add((2), (3))\n// (5)\n// >>> add((5), (7))\n// (12)\nlong add(long x, long y) {\nreturn x + y;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a vector of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat((5), (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8), (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n// (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7, (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) {\nlong totalEaten = number;\nif(remaining >= need) {\n    totalEaten += need;\n    remaining -= need;\n} else {\n    totalEaten += remaining;\n    remaining = 0;\n}\nreturn std::vector<long>({totalEaten, remaining});",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a vector of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat((5), (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8), (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n// (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7, (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) {\nlong totalEaten = number;\n    if(remaining >= need) {\n        totalEaten += need;\n        remaining -= need;\n    } else {\n        totalEaten += remaining;\n        remaining = 0;\n    }\n    return std::vector<long>({totalEaten, remaining});\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a vector of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat((5), (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8), (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n// (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7, (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) {\nlong totalEaten = number;\nlong remainingCarrots = remaining;\n\nif (remaining >= need) {\n    totalEaten += need;\n    remainingCarrots -= need;\n} else {\n    totalEaten += remaining;\n    remainingCarrots = 0;\n}\n\nreturn std::vector<long>({totalEaten, remainingCarrots});",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a vector of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat((5), (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8), (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n// (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7, (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) {\nlong totalEaten = number;\nlong leftOver = remaining;\n\nif (remaining >= need) {\n    totalEaten += need;\n    leftOver -= need;\n} else {\n    totalEaten += remaining;\n    leftOver = 0;\n}\n\nreturn std::vector<long>({totalEaten, leftOver});",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a vector of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat((5), (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8), (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n// (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7, (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) {\nlong totalEaten = number;\nif(remaining >= need) {\n    totalEaten += need;\n    remaining -= need;\n} else {\n    totalEaten += remaining;\n    remaining = 0;\n}\nreturn std::vector<long>({totalEaten, remaining});"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\nlong total_water_units = 0;\n\n// Count total water units in all wells\nfor (const auto& row : grid) {\n    total_water_units += std::count(row.begin(), row.end(), 1);\n}\n\n// Calculate how many times we need to lower the buckets\nlong bucket_count = total_water_units / capacity;\n\n// If there's any remaining water units, we need to lower the bucket one more time\nif (total_water_units % capacity != 0) {\n    bucket_count++;\n}\n\nreturn bucket_count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\nlong total_water_units = 0;\nfor (auto &row : grid) {\n    for (auto &cell : row) {\n        if (cell == 1) {\n            total_water_units++;\n        }\n    }\n}\nlong total_bucket_uses = total_water_units / capacity;\nif (total_water_units % capacity != 0) {\n    total_bucket_uses++;\n}\nreturn total_bucket_uses;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\nlong total_water_units = 0;\n    for (auto &row : grid) {\n        for (auto &unit : row) {\n            if (unit == 1) {\n                total_water_units++;\n            }\n        }\n    }\n    long total_rounds = total_water_units / capacity;\n    if (total_water_units % capacity != 0) {\n        total_rounds++;\n    }\n    return total_rounds;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\nlong count = 0;\nfor (const auto& row : grid) {\n    for (const auto& cell : row) {\n        if (cell == 1) {\n            count++;\n        }\n    }\n}\nreturn (count + capacity - 1) / capacity; // Rounds up the division to get the number of times to lower the bucket.",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\nlong total_water_units = 0;\nfor (auto &row : grid) {\n    for (auto &cell : row) {\n        if (cell == 1) {\n            total_water_units++;\n        }\n    }\n}\nreturn (total_water_units + capacity - 1) / capacity; // round up division\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n// the second vector is a vector of integers. Use the two given vectors to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to the length of operand vector minus one.\n// Operand is a vector of of non-negative integers.\n// Operator vector has at least one operator, and operand vector has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\nstd::stack<long> st;\nst.push(operand[0]);\n\nfor (int i = 0; i < op.size(); ++i) {\n    if (op[i] == \"+\" || op[i] == \"-\") {\n        if (op[i] == \"-\") operand[i+1] *= -1;\n        st.push(operand[i+1]);\n    } else if (op[i] == \"*\") {\n        long temp = st.top();\n        st.pop();\n        st.push(temp * operand[i+1]);\n    } else if (op[i] == \"//\") {\n        long temp = st.top();\n        st.pop();\n        st.push(temp / operand[i+1]);\n    } else if (op[i] == \"**\") {\n        long temp = st.top();\n        st.pop();\n        st.push(pow(temp, operand[i+1]));\n    }\n}\n\nlong result = 0;\nwhile (!st.empty()) {\n    result += st.top();\n    st.pop();\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n// the second vector is a vector of integers. Use the two given vectors to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to the length of operand vector minus one.\n// Operand is a vector of of non-negative integers.\n// Operator vector has at least one operator, and operand vector has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\nstd::stack<long> st;\nst.push(operand[0]);\n\nfor (int i = 0; i < op.size(); i++) {\n    if (op[i] == \"+\" || op[i] == \"-\") {\n        if (op[i] == \"-\") operand[i+1] *= -1;\n        st.push(operand[i+1]);\n    } else if (op[i] == \"*\") {\n        long temp = st.top();\n        st.pop();\n        temp *= operand[i+1];\n        st.push(temp);\n    } else if (op[i] == \"//\") {\n        long temp = st.top();\n        st.pop();\n        temp /= operand[i+1];\n        st.push(temp);\n    } else if (op[i] == \"**\") {\n        long temp = st.top();\n        st.pop();\n        temp = pow(temp, operand[i+1]);\n        st.push(temp);\n    }\n}\n\nlong result = 0;\nwhile (!st.empty()) {\n    result += st.top();\n    st.pop();\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n// the second vector is a vector of integers. Use the two given vectors to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to the length of operand vector minus one.\n// Operand is a vector of of non-negative integers.\n// Operator vector has at least one operator, and operand vector has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n// Initialize result with the first operand\nlong result = operand[0];\n\n// Iterate through the operator vector\nfor (int i = 0; i < op.size(); ++i) {\n    if (op[i] == \"+\") {\n        result += operand[i+1];\n    } else if (op[i] == \"-\") {\n        result -= operand[i+1];\n    } else if (op[i] == \"*\") {\n        result *= operand[i+1];\n    } else if (op[i] == \"//\") {\n        result /= operand[i+1];\n    } else if (op[i] == \"**\") {\n        result = pow(result, operand[i+1]);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n// the second vector is a vector of integers. Use the two given vectors to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to the length of operand vector minus one.\n// Operand is a vector of of non-negative integers.\n// Operator vector has at least one operator, and operand vector has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n// create a stack to store the operands\nstd::stack<long> st;\n// push the first operand into the stack\nst.push(operand[0]);\n\n// iterate over the operator vector\nfor (int i = 0; i < op.size(); i++) {\n    // if the operator is addition or subtraction, push the operand into the stack\n    if (op[i] == \"+\" || op[i] == \"-\") {\n        st.push(operand[i + 1]);\n    }\n    // if the operator is multiplication, multiply the top element of the stack with the operand and push the result into the stack\n    else if (op[i] == \"*\") {\n        long top = st.top();\n        st.pop();\n        st.push(top * operand[i + 1]);\n    }\n    // if the operator is floor division, divide the top element of the stack by the operand and push the result into the stack\n    else if (op[i] == \"//\") {\n        long top = st.top();\n        st.pop();\n        st.push(top / operand[i + 1]);\n    }\n    // if the operator is exponentiation, raise the top element of the stack to the power of the operand and push the result into the stack\n    else if (op[i] == \"**\") {\n        long top = st.top();\n        st.pop();\n        st.push(pow(top, operand[i + 1]));\n    }\n}\n\n// initialize the result with the top element of the stack\nlong result = st.top();\nst.pop();\n\n// iterate over the stack and add or subtract the elements to/from the result\nwhile (!st.empty()) {\n    if (op[st.size() - 1] == \"+\") {\n        result += st.top();\n    } else {\n        result -= st.top();\n    }\n    st.pop();\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n// the second vector is a vector of integers. Use the two given vectors to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to the length of operand vector minus one.\n// Operand is a vector of of non-negative integers.\n// Operator vector has at least one operator, and operand vector has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n// Create a stack to store the operands\nstd::stack<long> operandStack;\n\n// Push the first operand into the stack\noperandStack.push(operand[0]);\n\n// Iterate over the operators\nfor (int i = 0; i < op.size(); i++) {\n    // If the operator is addition or subtraction, push the operand into the stack\n    if (op[i] == \"+\" || op[i] == \"-\") {\n        operandStack.push(operand[i + 1]);\n    }\n    // If the operator is multiplication, pop the top of the stack, multiply it with the next operand, and push the result back into the stack\n    else if (op[i] == \"*\") {\n        long top = operandStack.top();\n        operandStack.pop();\n        operandStack.push(top * operand[i + 1]);\n    }\n    // If the operator is floor division, pop the top of the stack, divide it by the next operand, and push the result back into the stack\n    else if (op[i] == \"//\") {\n        long top = operandStack.top();\n        operandStack.pop();\n        operandStack.push(top / operand[i + 1]);\n    }\n    // If the operator is exponentiation, pop the top of the stack, raise it to the power of the next operand, and push the result back into the stack\n    else if (op[i] == \"**\") {\n        long top = operandStack.top();\n        operandStack.pop();\n        operandStack.push(pow(top, operand[i + 1]));\n    }\n}\n\n// Initialize the result as the top of the stack\nlong result = operandStack.top();\noperandStack.pop();\n\n// While there are still elements in the stack\nwhile (!operandStack.empty()) {\n    // If the top of the stack is positive, subtract it from the result\n    if (operandStack.top() > 0) {\n        result -= operandStack.top();\n    }\n    // If the top of the stack is negative, add it to the result\n    else {\n        result += abs(operandStack.top());\n    }\n    operandStack.pop();\n}\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\nfor(int i = 0; i < string.length(); i++) {\n    if(isupper(string[i])) {\n        string[i] = tolower(string[i]);\n    } else if(islower(string[i])) {\n        string[i] = toupper(string[i]);\n    }\n}\nreturn string;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\nfor(int i = 0; i < string.length(); i++){\n    if(islower(string[i])){\n        string[i] = toupper(string[i]);\n    }\n    else if(isupper(string[i])){\n        string[i] = tolower(string[i]);\n    }\n}\nreturn string;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\nfor (int i = 0; i < string.length(); i++) {\n        if (isupper(string[i]))\n            string[i] = tolower(string[i]);\n        else if (islower(string[i]))\n            string[i] = toupper(string[i]);\n    }\n    return string;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\nfor (int i = 0; i < string.length(); i++) {\n    if (isupper(string[i])) \n        string[i] = tolower(string[i]);\n    else if (islower(string[i]))\n        string[i] = toupper(string[i]);\n}\nreturn string;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\nfor (int i = 0; i < string.length(); i++) {\n    if (islower(string[i])) {\n        string[i] = toupper(string[i]);\n    } else if (isupper(string[i])) {\n        string[i] = tolower(string[i]);\n    }\n}\nreturn string;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting vector, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n// (std::vector<std::string>())\n// If the vector has any strange number ignore it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n// (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long> arr) {\nstd::vector<std::string> result;\nstd::map<int, std::string> numToString = {\n    {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"},\n    {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n};\n\n// Filter and sort the numbers between 1 and 9\nstd::sort(arr.begin(), arr.end(), [](long a, long b) {\n    return a > b;\n});\n\nfor(auto num : arr) {\n    if(num >= 1 && num <= 9) {\n        result.push_back(numToString[num]);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting vector, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n// (std::vector<std::string>())\n// If the vector has any strange number ignore it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n// (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long> arr) {\nstd::vector<std::string> result;\nstd::map<int, std::string> digitToName = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n\n// Filter and sort the array\nstd::sort(arr.begin(), arr.end(), [](long a, long b) {\n    return a > b;\n});\n\nfor (long num : arr) {\n    if (num >= 1 && num <= 9) {\n        result.push_back(digitToName[num]);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting vector, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n// (std::vector<std::string>())\n// If the vector has any strange number ignore it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n// (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long> arr) {\nstd::vector<std::string> result;\nstd::map<long, std::string> numToName = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n\n// Filter and sort the numbers\nstd::sort(arr.begin(), arr.end(), [](long a, long b) {return a > b;});\nfor(auto num : arr) {\n    if(num >= 1 && num <= 9) {\n        result.push_back(numToName[num]);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting vector, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n// (std::vector<std::string>())\n// If the vector has any strange number ignore it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n// (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long> arr) {\nstd::vector<std::string> result;\nstd::map<long, std::string> numberMap = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n\nfor(auto &num : arr) {\n    if(num >= 1 && num <= 9) {\n        result.push_back(numberMap[num]);\n    }\n}\n\nstd::sort(result.begin(), result.end());\nstd::reverse(result.begin(), result.end());\n\nreturn result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting vector, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n// (std::vector<std::string>())\n// If the vector has any strange number ignore it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n// (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long> arr) {\nstd::vector<std::string> result;\nstd::vector<long> validNumbers;\nstd::map<long, std::string> numberNames = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n\n// Filter the valid numbers\nfor (auto num : arr) {\n    if (num >= 1 && num <= 9) {\n        validNumbers.push_back(num);\n    }\n}\n\n// Sort the valid numbers\nstd::sort(validNumbers.begin(), validNumbers.end());\n\n// Reverse the sorted numbers\nstd::reverse(validNumbers.begin(), validNumbers.end());\n\n// Replace numbers with their names\nfor (auto num : validNumbers) {\n    result.push_back(numberNames[num]);\n}\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long n) {\nstd::vector<long> factors;\nfor (long i = 2; i * i <= n; i++) {\n    while (n % i == 0) {\n        factors.push_back(i);\n        n /= i;\n    }\n}\nif (n > 1) {\n    factors.push_back(n);\n}\nreturn factors;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long n) {\nstd::vector<long> factors;\nfor (long i = 2; i * i <= n; i++) {\n    while (n % i == 0) {\n        factors.push_back(i);\n        n /= i;\n    }\n}\nif (n > 1) {\n    factors.push_back(n);\n}\nreturn factors;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long n) {\nstd::vector<long> factors;\nfor (long i = 2; i * i <= n; i++) {\n    while (n % i == 0) {\n        factors.push_back(i);\n        n /= i;\n    }\n}\nif (n > 1) {\n    factors.push_back(n);\n}\nreturn factors;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long n) {\nstd::vector<long> factors;\nfor (long i = 2; i * i <= n; i++) {\n    while (n % i == 0) {\n        factors.push_back(i);\n        n /= i;\n    }\n}\nif (n > 1) {\n    factors.push_back(n);\n}\nreturn factors;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long n) {\nstd::vector<long> factors;\nfor (long i = 2; i * i <= n; i++) {\n    while (n % i == 0) {\n        factors.push_back(i);\n        n /= i;\n    }\n}\nif (n > 1) {\n    factors.push_back(n);\n}\nreturn factors;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that takes an non-negative integer and returns a vector of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to((5))\n// (std::vector<long>({(long)2, (long)3}))\n// >>> count_up_to((11))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7}))\n// >>> count_up_to((0))\n// (std::vector<long>())\n// >>> count_up_to((20))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19}))\n// >>> count_up_to((1))\n// (std::vector<long>())\n// >>> count_up_to((18))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17}))\nstd::vector<long> count_up_to(long n) {\nstd::vector<long> primes;\nif(n < 2) return primes;\n\nprimes.push_back(2);\nfor(long i = 3; i < n; i += 2) {\n    bool isPrime = true;\n    for(long j = 2; j*j <= i; j++) {\n        if(i % j == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if(isPrime) primes.push_back(i);\n}\nreturn primes;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that takes an non-negative integer and returns a vector of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to((5))\n// (std::vector<long>({(long)2, (long)3}))\n// >>> count_up_to((11))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7}))\n// >>> count_up_to((0))\n// (std::vector<long>())\n// >>> count_up_to((20))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19}))\n// >>> count_up_to((1))\n// (std::vector<long>())\n// >>> count_up_to((18))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17}))\nstd::vector<long> count_up_to(long n) {\nstd::vector<long> primes;\n\nif(n < 2) return primes;\n\nprimes.push_back(2);\n\nfor(long i = 3; i < n; i+=2) {\n    bool isPrime = true;\n    for(auto prime : primes) {\n        if(prime * prime > i) break;\n        if(i % prime == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if(isPrime) primes.push_back(i);\n}\n\nreturn primes;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that takes an non-negative integer and returns a vector of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to((5))\n// (std::vector<long>({(long)2, (long)3}))\n// >>> count_up_to((11))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7}))\n// >>> count_up_to((0))\n// (std::vector<long>())\n// >>> count_up_to((20))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19}))\n// >>> count_up_to((1))\n// (std::vector<long>())\n// >>> count_up_to((18))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17}))\nstd::vector<long> count_up_to(long n) {\nstd::vector<long> primes;\nif(n < 2) \n    return primes;\nprimes.push_back(2);\nfor(long i = 3; i < n; i += 2) {\n    bool isPrime = true;\n    for(long j = 2; j*j <= i; ++j) {\n        if(i % j == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if(isPrime)\n        primes.push_back(i);\n}\nreturn primes;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that takes an non-negative integer and returns a vector of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to((5))\n// (std::vector<long>({(long)2, (long)3}))\n// >>> count_up_to((11))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7}))\n// >>> count_up_to((0))\n// (std::vector<long>())\n// >>> count_up_to((20))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19}))\n// >>> count_up_to((1))\n// (std::vector<long>())\n// >>> count_up_to((18))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17}))\nstd::vector<long> count_up_to(long n) {\nstd::vector<long> result;\nfor (long i = 2; i < n; i++) {\n    bool isPrime = true;\n    for (long j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        result.push_back(i);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that takes an non-negative integer and returns a vector of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to((5))\n// (std::vector<long>({(long)2, (long)3}))\n// >>> count_up_to((11))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7}))\n// >>> count_up_to((0))\n// (std::vector<long>())\n// >>> count_up_to((20))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19}))\n// >>> count_up_to((1))\n// (std::vector<long>())\n// >>> count_up_to((18))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17}))\nstd::vector<long> count_up_to(long n) {\n// Check if a number is prime\nauto is_prime = [](long num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (long i = 3; i * i <= num; i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n};\n\nstd::vector<long> primes;\nfor (long i = 2; i < n; i++) {\n    if (is_prime(i)) {\n        primes.push_back(i);\n    }\n}\nreturn primes;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long> l) {\n// Sorting the vector\nstd::sort(l.begin(), l.end());\n\n// Using unique function to remove duplicates\nauto it = std::unique(l.begin(), l.end());\n\n// Resizing the vector to remove undefined elements after unique function\nl.resize(std::distance(l.begin(), it));\n\nreturn l;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long> l) {\n// Sort the vector\nstd::sort(l.begin(), l.end());\n\n// Use std::unique to remove duplicate elements\nl.erase(std::unique(l.begin(), l.end()), l.end());\n\nreturn l;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long> l) {\n// Sorting the vector\nstd::sort(l.begin(), l.end());\n\n// Using unique function to remove duplicates\nauto it = std::unique(l.begin(), l.end());\n\n// Resizing the vector to remove undefined terms\nl.resize(std::distance(l.begin(), it));\n\nreturn l;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long> l) {\n// Sorting the vector\nstd::sort(l.begin(), l.end());\n\n// Using unique function to remove duplicates\nauto it = std::unique(l.begin(), l.end());\n\n// Resizing the vector to remove undefined terms\nl.resize(std::distance(l.begin(), it));\n\nreturn l;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long> l) {\n// Sort the vector\nstd::sort(l.begin(), l.end());\n\n// Use unique function to remove duplicate elements\nauto it = std::unique(l.begin(), l.end());\n\n// Resize the vector to remove undefined elements after unique function\nl.resize(std::distance(l.begin(), it));\n\nreturn l;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts two vectors of strings and returns the vector that has \n// total number of chars in the all strings of the vector less than the other vector.\n// if the two vectors have the same number of chars, return the first vector.\n// Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\nint total_chars_lst1 = 0, total_chars_lst2 = 0;\n\nfor(const auto& str : lst1) {\n    total_chars_lst1 += str.length();\n}\n\nfor(const auto& str : lst2) {\n    total_chars_lst2 += str.length();\n}\n\nif (total_chars_lst1 <= total_chars_lst2) {\n    return lst1;\n} else {\n    return lst2;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts two vectors of strings and returns the vector that has \n// total number of chars in the all strings of the vector less than the other vector.\n// if the two vectors have the same number of chars, return the first vector.\n// Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\nint total_chars1 = 0, total_chars2 = 0;\n\nfor (const auto& str : lst1) {\n    total_chars1 += str.length();\n}\n\nfor (const auto& str : lst2) {\n    total_chars2 += str.length();\n}\n\nif (total_chars1 <= total_chars2) {\n    return lst1;\n} else {\n    return lst2;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts two vectors of strings and returns the vector that has \n// total number of chars in the all strings of the vector less than the other vector.\n// if the two vectors have the same number of chars, return the first vector.\n// Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\nint total_chars_lst1 = 0, total_chars_lst2 = 0;\n\nfor (const auto& str : lst1) {\n    total_chars_lst1 += str.length();\n}\n\nfor (const auto& str : lst2) {\n    total_chars_lst2 += str.length();\n}\n\nif (total_chars_lst1 <= total_chars_lst2) {\n    return lst1;\n} else {\n    return lst2;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts two vectors of strings and returns the vector that has \n// total number of chars in the all strings of the vector less than the other vector.\n// if the two vectors have the same number of chars, return the first vector.\n// Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\nint total_chars_lst1 = 0;\nint total_chars_lst2 = 0;\n\nfor (const auto& str : lst1) {\n    total_chars_lst1 += str.size();\n}\n\nfor (const auto& str : lst2) {\n    total_chars_lst2 += str.size();\n}\n\nif (total_chars_lst1 <= total_chars_lst2) {\n    return lst1;\n} else {\n    return lst2;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts two vectors of strings and returns the vector that has \n// total number of chars in the all strings of the vector less than the other vector.\n// if the two vectors have the same number of chars, return the first vector.\n// Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\nint total1 = 0, total2 = 0;\n\nfor(auto &str : lst1) {\n    total1 += str.length();\n}\n\nfor(auto &str : lst2) {\n    total2 += str.length();\n}\n\nif(total1 <= total2) {\n    return lst1;\n} else {\n    return lst2;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n// (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\nlong max_element(std::vector<long> l) {\n// Check if vector is empty\n    if(l.empty())\n        return 0;\n\n    // Initialize maximum element\n    long max = l[0];\n\n    // Traverse vector elements\n    for(int i = 1; i < l.size(); i++)\n        if(l[i] > max)\n            max = l[i]; // Update maximum element\n\n    return max; // Return maximum element\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n// (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\nlong max_element(std::vector<long> l) {\n// Check if vector is empty\n    if(l.empty())\n        return 0;\n\n    long max = l[0];\n\n    // Iterate through the vector to find the maximum element\n    for(auto &i : l)\n        if(i > max)\n            max = i;\n\n    return max;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n// (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\nlong max_element(std::vector<long> l) {\n// Check if the vector is empty\n    if(l.empty()) {\n        throw std::invalid_argument(\"Vector is empty\");\n    }\n\n    // Initialize the maximum element as the first element of the vector\n    long max = l[0];\n\n    // Traverse the vector to find the maximum element\n    for(int i = 1; i < l.size(); i++) {\n        if(l[i] > max) {\n            max = l[i];\n        }\n    }\n\n    // Return the maximum element\n    return max;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n// (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\nlong max_element(std::vector<long> l) {\n// Check if the vector is empty\n    if(l.empty()) {\n        return 0;\n    }\n\n    // Initialize max with the first element of the vector\n    long max = l[0];\n\n    // Iterate over the vector to find the maximum element\n    for(auto &val : l) {\n        if(val > max) {\n            max = val;\n        }\n    }\n\n    // Return the maximum element\n    return max;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n// (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\nlong max_element(std::vector<long> l) {\nif(l.empty())\n    throw std::invalid_argument(\"Vector is empty\");\n\nlong max = l[0];\nfor(int i = 1; i < l.size(); i++){\n    if(l[i] > max)\n        max = l[i];\n}\nreturn max;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested((\"[[]]\"))\n// (true)\n// >>> is_nested((\"[]]]]]]][[[[[]\"))\n// (false)\n// >>> is_nested((\"[][]\"))\n// (false)\n// >>> is_nested((\"[]\"))\n// (false)\n// >>> is_nested((\"[[][]]\"))\n// (true)\n// >>> is_nested((\"[[]][[\"))\n// (true)\nbool is_nested(std::string string) {\nstd::stack<char> stack;\n    bool nested = false;\n\n    for (char& ch : string) {\n        if (ch == '[') {\n            stack.push(ch);\n        } else if (ch == ']') {\n            if (stack.empty()) {\n                return false;\n            } else {\n                if (stack.top() == '[') {\n                    stack.pop();\n                    if (!stack.empty() && stack.top() == '[') {\n                        nested = true;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return !stack.empty() && nested; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested((\"[[]]\"))\n// (true)\n// >>> is_nested((\"[]]]]]]][[[[[]\"))\n// (false)\n// >>> is_nested((\"[][]\"))\n// (false)\n// >>> is_nested((\"[]\"))\n// (false)\n// >>> is_nested((\"[[][]]\"))\n// (true)\n// >>> is_nested((\"[[]][[\"))\n// (true)\nbool is_nested(std::string string) {\n    int count = 0;\n    bool nested = false;\n    \n    for (char c : string) {\n        if (c == '[') {\n            count++;\n            if (count > 1) {\n                nested = true;\n            }\n        } else if (c == ']') {\n            if (count > 0) {\n                count--;\n            } else {\n                // Unbalanced brackets\n                return false;\n            }\n        }\n    }\n    \n    // If there are any unmatched brackets or no nested brackets, return false\n    return count == 0 && nested;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested((\"[[]]\"))\n// (true)\n// >>> is_nested((\"[]]]]]]][[[[[]\"))\n// (false)\n// >>> is_nested((\"[][]\"))\n// (false)\n// >>> is_nested((\"[]\"))\n// (false)\n// >>> is_nested((\"[[][]]\"))\n// (true)\n// >>> is_nested((\"[[]][[\"))\n// (true)\nbool is_nested(std::string string) {\nstd::stack<char> stack;\n    bool nested = false;\n    for (char& c : string) {\n        if (c == '[') {\n            stack.push(c);\n        } else if (c == ']') {\n            if (stack.empty()) {\n                return false;\n            } else {\n                if (!stack.empty() && stack.top() == '[') {\n                    stack.pop();\n                    if (!stack.empty() && stack.top() == '[') {\n                        nested = true;\n                    }\n                }\n            }\n        }\n    }\n    return !stack.empty() && nested; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested((\"[[]]\"))\n// (true)\n// >>> is_nested((\"[]]]]]]][[[[[]\"))\n// (false)\n// >>> is_nested((\"[][]\"))\n// (false)\n// >>> is_nested((\"[]\"))\n// (false)\n// >>> is_nested((\"[[][]]\"))\n// (true)\n// >>> is_nested((\"[[]][[\"))\n// (true)\nbool is_nested(std::string string) {\nstd::stack<char> brackets;\n    bool nested = false;\n\n    for (char c : string) {\n        if (c == '[') {\n            brackets.push(c);\n        } else if (c == ']') {\n            if (brackets.empty()) {\n                return false;\n            }\n            if (!brackets.empty()) {\n                brackets.pop();\n                if (!brackets.empty()) {\n                    nested = true;\n                }\n            }\n        }\n    }\n\n    return !brackets.empty() && nested;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested((\"[[]]\"))\n// (true)\n// >>> is_nested((\"[]]]]]]][[[[[]\"))\n// (false)\n// >>> is_nested((\"[][]\"))\n// (false)\n// >>> is_nested((\"[]\"))\n// (false)\n// >>> is_nested((\"[[][]]\"))\n// (true)\n// >>> is_nested((\"[[]][[\"))\n// (true)\nbool is_nested(std::string string) {\nstd::stack<char> stack;\n    bool nested = false;\n\n    for (char &c : string) {\n        if (c == '[') {\n            stack.push(c);\n        } else if (c == ']') {\n            if (stack.empty()) {\n                return false;\n            } else {\n                if (!stack.empty() && stack.top() == '[') {\n                    stack.pop();\n                    if (!stack.empty() && stack.top() == '[') {\n                        nested = true;\n                    }\n                }\n            }\n        }\n    }\n\n    return nested && stack.empty();\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>> rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n// >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\nif(n > m) {\n    return Union_std_string_long(-1);\n}\nelse {\n    long sum = 0;\n    for(long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = round(static_cast<double>(sum) / (m - n + 1));\n    std::string binary = \"0b\" + std::bitset<64>(avg).to_string();\n    binary.erase(0, binary.find_first_not_of('0'));\n    return Union_std_string_long(binary);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>> rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n// >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\nif(n > m) {\n    return Union_std_string_long(-1);\n}\n\nlong sum = 0;\nfor(long i = n; i <= m; i++) {\n    sum += i;\n}\n\nlong avg = round(static_cast<double>(sum) / (m - n + 1));\n\nstd::bitset<32> binary(avg);\n\nreturn Union_std_string_long(\"0b\" + binary.to_string().substr(binary.to_string().find('1'))); \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>> rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n// >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\nif(n > m) {\n    return Union_std_string_long(-1);\n}\n\nlong sum = 0;\nfor(long i = n; i <= m; i++) {\n    sum += i;\n}\n\nlong avg = round(static_cast<double>(sum) / (m - n + 1));\n\nstd::bitset<64> binary(avg);\nstd::string binary_str = binary.to_string();\n\n// Remove leading zeros\nbinary_str.erase(0, binary_str.find_first_not_of('0'));\n\n// Add binary prefix\nbinary_str = \"0b\" + binary_str;\n\nreturn Union_std_string_long(binary_str);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>> rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n// >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\nif (n > m) {\n    return Union_std_string_long(-1);\n}\n\nlong sum = 0;\nfor (long i = n; i <= m; i++) {\n    sum += i;\n}\n\nlong avg = round(static_cast<double>(sum) / (m - n + 1));\n\nstd::bitset<32> binary(avg);\nstd::string binary_string = \"0b\" + binary.to_string();\nbinary_string.erase(0, binary_string.find_first_not_of('0'));\n\nreturn Union_std_string_long(binary_string);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>> rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n// >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n    }\n\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    long avg = round(static_cast<double>(sum) / (m - n + 1));\n\n    std::bitset<32> binary(avg);\n    std::string binaryString = \"0b\" + binary.to_string();\n    binaryString.erase(0, binaryString.find_first_not_of('0'));\n\n    return Union_std_string_long(binaryString);\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of strings, where each string consists of only digits, return a vector.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count((std::vector<std::string>({(std::string)\"1234567\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n// >>> odd_count((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\nstd::vector<std::string> result;\n    for(auto &str : lst) {\n        int oddCount = 0;\n        for(auto &ch : str) {\n            if((ch - '0') % 2 != 0) {\n                oddCount++;\n            }\n        }\n        std::string res = \"the number of odd elements \" + std::to_string(oddCount) + \"n the str\" + std::to_string(oddCount) + \"ng \" + std::to_string(oddCount) + \" of the \" + std::to_string(oddCount) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of strings, where each string consists of only digits, return a vector.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count((std::vector<std::string>({(std::string)\"1234567\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n// >>> odd_count((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\nstd::vector<std::string> result;\n    for (auto &str : lst) {\n        int oddCount = 0;\n        for (auto &ch : str) {\n            if ((ch - '0') % 2 != 0) {\n                oddCount++;\n            }\n        }\n        std::string res = \"the number of odd elements \" + std::to_string(oddCount) + \"n the str\" + std::to_string(oddCount) + \"ng \" + std::to_string(oddCount) + \" of the \" + std::to_string(oddCount) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of strings, where each string consists of only digits, return a vector.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count((std::vector<std::string>({(std::string)\"1234567\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n// >>> odd_count((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\nstd::vector<std::string> result;\n    for (auto &str : lst) {\n        int oddCount = 0;\n        for (auto &ch : str) {\n            int digit = ch - '0';\n            if (digit % 2 != 0) {\n                oddCount++;\n            }\n        }\n        std::string res = \"the number of odd elements \" + std::to_string(oddCount) + \"n the str\" + std::to_string(oddCount) + \"ng \" + std::to_string(oddCount) + \" of the \" + std::to_string(oddCount) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of strings, where each string consists of only digits, return a vector.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count((std::vector<std::string>({(std::string)\"1234567\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n// >>> odd_count((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\nstd::vector<std::string> result;\nfor (const auto& str : lst) {\n    int odd_count = 0;\n    for (const auto& ch : str) {\n        if ((ch - '0') % 2 != 0) {\n            odd_count++;\n        }\n    }\n    std::string res_str = \"the number of odd elements \" + std::to_string(odd_count) + \"n the str\" + std::to_string(odd_count) + \"ng \" + std::to_string(odd_count) + \" of the \" + std::to_string(odd_count) + \"nput.\";\n    result.push_back(res_str);\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of strings, where each string consists of only digits, return a vector.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count((std::vector<std::string>({(std::string)\"1234567\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n// >>> odd_count((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\nstd::vector<std::string> result;\n    for(auto &str : lst) {\n        int oddCount = 0;\n        for(auto &ch : str) {\n            int digit = ch - '0';\n            if(digit % 2 != 0) {\n                oddCount++;\n            }\n        }\n        std::string res = \"the number of odd elements \" + std::to_string(oddCount) + \"n the str\" + std::to_string(oddCount) + \"ng \" + std::to_string(oddCount) + \" of the \" + std::to_string(oddCount) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the vector will be randomly ordered. Your task is to determine if\n// it is possible to get a vector sorted in non-decreasing order by performing \n// the following operation on the given vector:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the vector by one\n// position in the right direction. The last element of the vector will be moved to\n// the starting position in the vector i.e. 0th index. \n// If it is possible to obtain the sorted vector by performing the above operation\n// then return true else return false.\n// If the given vector is empty then return true.\n// Note: The given vector is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2})))\n// (true)\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given vector.\n// >>> move_one_ball((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2})))\n// (false)\n// Explanation:It is not possible to get non-decreasing order for the given\n// vector by performing any number of right shift operations.\nbool move_one_ball(std::vector<long> arr) {\n// If the array is empty, return true\nif(arr.empty()) return true;\n\n// Count the number of times the array decreases\nint decreaseCount = 0;\nfor(int i = 1; i < arr.size(); i++) {\n    if(arr[i] < arr[i-1]) decreaseCount++;\n}\n\n// If the array decreases more than once, it cannot be sorted by rotations\nif(decreaseCount > 1) return false;\n\n// If the array decreases once, check if it is at the end of the array\nif(decreaseCount == 1) return arr[0] >= arr[arr.size()-1];\n\n// If the array never decreases, it is already sorted\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the vector will be randomly ordered. Your task is to determine if\n// it is possible to get a vector sorted in non-decreasing order by performing \n// the following operation on the given vector:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the vector by one\n// position in the right direction. The last element of the vector will be moved to\n// the starting position in the vector i.e. 0th index. \n// If it is possible to obtain the sorted vector by performing the above operation\n// then return true else return false.\n// If the given vector is empty then return true.\n// Note: The given vector is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2})))\n// (true)\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given vector.\n// >>> move_one_ball((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2})))\n// (false)\n// Explanation:It is not possible to get non-decreasing order for the given\n// vector by performing any number of right shift operations.\nbool move_one_ball(std::vector<long> arr) {\n// If the vector is empty, return true\nif(arr.empty()) return true;\n\n// Count the number of times the next number is smaller than the current one\nint count = 0;\nfor(int i = 0; i < arr.size() - 1; i++) {\n    if(arr[i] > arr[i+1]) {\n        count++;\n    }\n}\n\n// Check if the first element is smaller than the last one\nif(arr.front() < arr.back()) {\n    count++;\n}\n\n// If count is more than 1, it means it's not possible to sort the vector by right shifting\nif(count > 1) {\n    return false;\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the vector will be randomly ordered. Your task is to determine if\n// it is possible to get a vector sorted in non-decreasing order by performing \n// the following operation on the given vector:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the vector by one\n// position in the right direction. The last element of the vector will be moved to\n// the starting position in the vector i.e. 0th index. \n// If it is possible to obtain the sorted vector by performing the above operation\n// then return true else return false.\n// If the given vector is empty then return true.\n// Note: The given vector is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2})))\n// (true)\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given vector.\n// >>> move_one_ball((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2})))\n// (false)\n// Explanation:It is not possible to get non-decreasing order for the given\n// vector by performing any number of right shift operations.\nbool move_one_ball(std::vector<long> arr) {\n// If the vector is empty, return true\nif(arr.empty()) return true;\n\n// Create a copy of the original vector and sort it\nstd::vector<long> sortedArr = arr;\nstd::sort(sortedArr.begin(), sortedArr.end());\n\n// Iterate through the original vector\nfor(int i = 0; i < arr.size(); i++) {\n    // Perform a right shift operation\n    std::rotate(arr.begin(), arr.begin() + arr.size() - 1, arr.end());\n\n    // If the vector matches the sorted vector after the shift, return true\n    if(arr == sortedArr) return true;\n}\n\n// If no number of shifts can sort the vector, return false\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the vector will be randomly ordered. Your task is to determine if\n// it is possible to get a vector sorted in non-decreasing order by performing \n// the following operation on the given vector:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the vector by one\n// position in the right direction. The last element of the vector will be moved to\n// the starting position in the vector i.e. 0th index. \n// If it is possible to obtain the sorted vector by performing the above operation\n// then return true else return false.\n// If the given vector is empty then return true.\n// Note: The given vector is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2})))\n// (true)\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given vector.\n// >>> move_one_ball((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2})))\n// (false)\n// Explanation:It is not possible to get non-decreasing order for the given\n// vector by performing any number of right shift operations.\nbool move_one_ball(std::vector<long> arr) {\n// If the vector is empty, return true\n    if(arr.empty()) return true;\n\n    // Create a copy of the original vector and sort it\n    std::vector<long> sortedArr = arr;\n    std::sort(sortedArr.begin(), sortedArr.end());\n\n    // Compare the sorted vector with the original vector\n    // If they are the same, return true\n    if(sortedArr == arr) return true;\n\n    // Check if the original vector can be sorted by right shifting\n    for(int i = 0; i < arr.size(); i++) {\n        // Perform a right shift\n        std::rotate(arr.begin(), arr.end() - 1, arr.end());\n\n        // Compare the sorted vector with the shifted vector\n        // If they are the same, return true\n        if(sortedArr == arr) return true;\n    }\n\n    // If the vector cannot be sorted by right shifting, return false\n    return false;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the vector will be randomly ordered. Your task is to determine if\n// it is possible to get a vector sorted in non-decreasing order by performing \n// the following operation on the given vector:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the vector by one\n// position in the right direction. The last element of the vector will be moved to\n// the starting position in the vector i.e. 0th index. \n// If it is possible to obtain the sorted vector by performing the above operation\n// then return true else return false.\n// If the given vector is empty then return true.\n// Note: The given vector is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2})))\n// (true)\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given vector.\n// >>> move_one_ball((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2})))\n// (false)\n// Explanation:It is not possible to get non-decreasing order for the given\n// vector by performing any number of right shift operations.\nbool move_one_ball(std::vector<long> arr) {\nif(arr.empty()) return true;\n    std::vector<long> sorted_arr = arr;\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    for(int i = 0; i < arr.size(); ++i) {\n        std::rotate(arr.begin(), arr.begin() + 1, arr.end());\n        if(arr == sorted_arr) return true;\n    }\n    return false;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome((3))\n// (std::make_tuple(1, 2))\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome((12))\n// (std::make_tuple(4, 6))\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nstd::tuple<long, long> even_odd_palindrome(long n) {\n// Helper function to check if a number is palindrome\nbool is_palindrome(long n) {\n    long reversed = 0;\n    long original = n;\n    while (n != 0) {\n        long digit = n % 10;\n        reversed = reversed * 10 + digit;\n        n /= 10;\n    }\n    return original == reversed;\n}\n\nlong even = 0;\nlong odd = 0;\n\nfor (long i = 1; i <= n; i++) {\n    if (is_palindrome(i)) {\n        if (i % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n}\nreturn std::make_tuple(even, odd);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome((3))\n// (std::make_tuple(1, 2))\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome((12))\n// (std::make_tuple(4, 6))\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nstd::tuple<long, long> even_odd_palindrome(long n) {\n    long even_count = 0, odd_count = 0;\n    \n    for (long i = 1; i <= n; i++) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_num_str = num_str;\n        std::reverse(reversed_num_str.begin(), reversed_num_str.end());\n        \n        if (num_str == reversed_num_str) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n    \n    return std::make_tuple(even_count, odd_count);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome((3))\n// (std::make_tuple(1, 2))\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome((12))\n// (std::make_tuple(4, 6))\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nstd::tuple<long, long> even_odd_palindrome(long n) {\n    long even_count = 0, odd_count = 0;\n\n    for (long i = 1; i <= n; i++) {\n        std::string str = std::to_string(i);\n        std::string rev_str = str;\n        std::reverse(rev_str.begin(), rev_str.end());\n\n        if (str == rev_str) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n\n    return std::make_tuple(even_count, odd_count);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome((3))\n// (std::make_tuple(1, 2))\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome((12))\n// (std::make_tuple(4, 6))\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nstd::tuple<long, long> even_odd_palindrome(long n) {\n    long even_count = 0;\n    long odd_count = 0;\n\n    for (long i = 1; i <= n; i++) {\n        std::string str = std::to_string(i);\n        std::string rev_str = str;\n        std::reverse(rev_str.begin(), rev_str.end());\n\n        if (str == rev_str) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n\n    return std::make_tuple(even_count, odd_count);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome((3))\n// (std::make_tuple(1, 2))\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome((12))\n// (std::make_tuple(4, 6))\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nstd::tuple<long, long> even_odd_palindrome(long n) {\n    long even_count = 0;\n    long odd_count = 0;\n\n    // Function to check if a number is palindrome\n    auto isPalindrome = [](long num) {\n        long reversed = 0;\n        long original = num;\n        while (num > 0) {\n            reversed = reversed * 10 + num % 10;\n            num /= 10;\n        }\n        return reversed == original;\n    };\n\n    // Loop from 1 to n and check if a number is palindrome and whether it is even or odd\n    for (long i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n\n    return std::make_tuple(even_count, odd_count);\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even((4))\n// (false)\n// >>> is_equal_to_sum_even((6))\n// (false)\n// >>> is_equal_to_sum_even((8))\n// (true)\nbool is_equal_to_sum_even(long n) {\n// Any number that is a multiple of 4 can be written as a sum of exactly 4 even numbers\n// For example, 8 can be written as 2+2+2+2\n// So we just need to check if the number is a multiple of 4\nif (n % 4 == 0 && n >= 8) {\n    return true;\n} else {\n    return false;\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even((4))\n// (false)\n// >>> is_equal_to_sum_even((6))\n// (false)\n// >>> is_equal_to_sum_even((8))\n// (true)\nbool is_equal_to_sum_even(long n) {\n// A number can be written as the sum of exactly 4 even numbers if and only if it is greater than or equal to 8 and even.\n    if(n >= 8 && n % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even((4))\n// (false)\n// >>> is_equal_to_sum_even((6))\n// (false)\n// >>> is_equal_to_sum_even((8))\n// (true)\nbool is_equal_to_sum_even(long n) {\n// A number can be written as the sum of exactly 4 positive even numbers if it is even and greater than or equal to 8\nif (n < 8 || n % 2 != 0) {\n    return false;\n} else {\n    return true;\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even((4))\n// (false)\n// >>> is_equal_to_sum_even((6))\n// (false)\n// >>> is_equal_to_sum_even((8))\n// (true)\nbool is_equal_to_sum_even(long n) {\n// The smallest even number is 2. So, if n is less than 8 (2*4), it can't be written as the sum of exactly 4 positive even numbers.\nif (n < 8) {\n    return false;\n}\n\n// If n is even and greater than or equal to 8, then it can be written as the sum of exactly 4 positive even numbers.\nif (n % 2 == 0) {\n    return true;\n}\n\n// If n is odd, then it can't be written as the sum of exactly 4 positive even numbers.\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even((4))\n// (false)\n// >>> is_equal_to_sum_even((6))\n// (false)\n// >>> is_equal_to_sum_even((8))\n// (true)\nbool is_equal_to_sum_even(long n) {\n// Any number that is a multiple of 4 can be written as the sum of exactly 4 positive even numbers\n// because it can be written as four times the number divided by 4.\n// For example, 8 can be written as 2 + 2 + 2 + 2.\n// However, if the number is not a multiple of 4, it cannot be written as the sum of exactly 4 positive even numbers.\n// Therefore, we can simply check whether the number is a multiple of 4.\nreturn n % 4 == 0 && n >= 8;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4, (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long> xs) {\nstd::vector<long> result;\nfor (int i = 1; i < xs.size(); i++) {\n    result.push_back(xs[i] * i);\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4, (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long> xs) {\nstd::vector<long> result;\nfor (int i = 1; i < xs.size(); i++) {\n    result.push_back(xs[i] * i);\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4, (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long> xs) {\nstd::vector<long> result;\nfor (int i = 1; i < xs.size(); ++i) {\n    result.push_back(xs[i] * i);\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4, (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long> xs) {\nstd::vector<long> result;\nfor (int i = 1; i < xs.size(); i++) {\n    result.push_back(xs[i] * i);\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4, (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long> xs) {\nstd::vector<long> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long> lst) {\n// Create a set to store unique elements\nstd::set<long> unique_elements;\n\n// Iterate over the vector\nfor (int i = 0; i < lst.size(); i++) {\n    // If the element is already in the set, return false (duplicate found)\n    if (unique_elements.find(lst[i]) != unique_elements.end()) {\n        return false;\n    }\n\n    // If this is not the first element and it is smaller than the previous one, return false (not sorted)\n    if (i > 0 && lst[i] < lst[i - 1]) {\n        return false;\n    }\n\n    // Add the element to the set\n    unique_elements.insert(lst[i]);\n}\n\n// If no duplicates are found and the vector is sorted, return true\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long> lst) {\nstd::unordered_map<long, int> count_map;\nfor (long num : lst) {\n    if (++count_map[num] > 1) {\n        return false;\n    }\n}\n\nfor (size_t i = 1; i < lst.size(); ++i) {\n    if (lst[i] < lst[i-1]) {\n        return false;\n    }\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long> lst) {\nstd::unordered_map<long, int> num_counts;\nfor (long num : lst) {\n    if (++num_counts[num] > 1) {\n        return false;\n    }\n}\n\nfor (std::size_t i = 1; i < lst.size(); ++i) {\n    if (lst[i] < lst[i-1]) {\n        return false;\n    }\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long> lst) {\n// Create a set to store unique elements\nstd::set<long> unique_elements(lst.begin(), lst.end());\n\n// If the number of unique elements is less than the size of the vector,\n// it means there are duplicates, so return false\nif (unique_elements.size() < lst.size()) {\n    return false;\n}\n\n// Check if the elements are in ascending order\nfor (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n        return false;\n    }\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long> lst) {\n// Create a map to store the frequency of each number\nstd::unordered_map<long, int> freq;\n\nfor (long num : lst) {\n    // If the number already exists in the map, return false\n    if (freq.count(num) > 0) {\n        return false;\n    }\n    // Increase the frequency of the number\n    freq[num]++;\n}\n\n// Check if the list is sorted in ascending order\nfor (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n        return false;\n    }\n}\n\nreturn true;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\nbool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n\n    if (!hasLetter) {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n\n    for (int i = 0; i < s.size(); i++) {\n        if (islower(s[i])) {\n            s[i] = toupper(s[i]);\n        } else if (isupper(s[i])) {\n            s[i] = tolower(s[i]);\n        }\n    }\n\n    return s;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\nbool hasLetter = false;\nfor(char c : s) {\n    if(isalpha(c)) {\n        hasLetter = true;\n        break;\n    }\n}\n\nif(hasLetter) {\n    for(char &c : s) {\n        if(islower(c)) {\n            c = toupper(c);\n        } else if(isupper(c)) {\n            c = tolower(c);\n        }\n    }\n} else {\n    std::reverse(s.begin(), s.end());\n}\n\nreturn s;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\nbool hasLetter = false;\nfor (char c : s) {\n    if (isalpha(c)) {\n        hasLetter = true;\n        break;\n    }\n}\n\nif (!hasLetter) {\n    std::reverse(s.begin(), s.end());\n    return s;\n}\n\nfor (char& c : s) {\n    if (islower(c)) {\n        c = toupper(c);\n    } else if (isupper(c)) {\n        c = tolower(c);\n    }\n}\n\nreturn s;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\nbool hasLetter = false;\nfor(char c : s) {\n    if(isalpha(c)) {\n        hasLetter = true;\n        break;\n    }\n}\n\nif(hasLetter) {\n    for(int i = 0; i < s.size(); i++) {\n        if(islower(s[i])) {\n            s[i] = toupper(s[i]);\n        } else if(isupper(s[i])) {\n            s[i] = tolower(s[i]);\n        }\n    }\n} else {\n    std::reverse(s.begin(), s.end());\n}\n\nreturn s;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\nbool hasLetter = false;\n    for(char c : s){\n        if(isalpha(c)){\n            hasLetter = true;\n            break;\n        }\n    }\n\n    if(hasLetter){\n        for(int i=0; i<s.size(); i++){\n            if(islower(s[i])){\n                s[i] = toupper(s[i]);\n            } else if(isupper(s[i])){\n                s[i] = tolower(s[i]);\n            }\n        }\n    } else {\n        std::reverse(s.begin(), s.end());\n    }\n\n    return s;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))\nstd::vector<long> tri(long n) {\nstd::vector<long> tribonacci(n + 1);\ntribonacci[0] = 0;\nif (n >= 1) tribonacci[1] = 3;\nif (n >= 2) tribonacci[2] = 2;\n\nfor (long i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n        tribonacci[i] = 1 + i / 2;\n    } else {\n        tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3];\n    }\n}\n\nreturn tribonacci;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long> tribonacci(n + 1, 0);\n    tribonacci[0] = 0;\n    if (n >= 1) {\n        tribonacci[1] = 3;\n    }\n    for (long i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + (i + 1 < tribonacci.size() ? tribonacci[i + 1] : 1 + (i + 1) / 2);\n        }\n    }\n    return tribonacci;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long> tribonacci(n + 1);\n    tribonacci[0] = 0;\n    if (n >= 1) {\n        tribonacci[1] = 3;\n    }\n    for (long i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + (i + 1 < tribonacci.size() ? tribonacci[i + 1] : 1 + (i + 1) / 2);\n        }\n    }\n    return tribonacci;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))\nstd::vector<long> tri(long n) {\nstd::vector<long> tribonacci(n + 1);\ntribonacci[0] = 0; // base case\ntribonacci[1] = 3; // base case\n\nfor(long i = 2; i <= n; i++) {\n    if(i % 2 == 0) {\n        tribonacci[i] = 1 + i / 2;\n    } else {\n        tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + (i + 1 <= n ? tribonacci[i + 1] : 0);\n    }\n}\n\nreturn tribonacci;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))\nstd::vector<long> tri(long n) {\nstd::vector<long> tribonacci(n + 1, 0);\n    \n    if (n >= 0) {\n        tribonacci[0] = 3;\n    }\n\n    if (n >= 1) {\n        tribonacci[1] = 1 + 1 / 2;\n    }\n\n    for (long i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + (i + 1 <= n ? tribonacci[i + 1] : 1 + (i + 1) / 2);\n        }\n    }\n\n    return tribonacci;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n// (3)\nlong fizz_buzz(long n) {\nlong count = 0;\nfor(long i = 1; i < n; i++) {\n    if(i % 11 == 0 || i % 13 == 0) {\n        std::string s = std::to_string(i);\n        count += std::count(s.begin(), s.end(), '7');\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n// (3)\nlong fizz_buzz(long n) {\nlong count = 0;\nfor (long i = 1; i < n; i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n        std::string num = std::to_string(i);\n        count += std::count(num.begin(), num.end(), '7');\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n// (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string num = std::to_string(i);\n            count += std::count(num.begin(), num.end(), '7');\n        }\n    }\n    return count;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n// (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string num = std::to_string(i);\n            count += std::count(num.begin(), num.end(), '7');\n        }\n    }\n    return count;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n// (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string num = std::to_string(i);\n            count += std::count(num.begin(), num.end(), '7');\n        }\n    }\n    return count;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\nstd::vector<std::string> result;\nfor(const auto& str : strings) {\n    if(str.substr(0, prefix.size()) == prefix) {\n        result.push_back(str);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\nstd::vector<std::string> result;\nfor (auto &str : strings) {\n    if (str.substr(0, prefix.size()) == prefix) {\n        result.push_back(str);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\nstd::vector<std::string> result;\nfor (const auto& str : strings) {\n    if (str.substr(0, prefix.size()) == prefix) {\n        result.push_back(str);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\nstd::vector<std::string> result;\nfor (const auto& str : strings) {\n    if (str.substr(0, prefix.size()) == prefix) {\n        result.push_back(str);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\nstd::vector<std::string> result;\nfor (const auto& str : strings) {\n    if (str.substr(0, prefix.size()) == prefix) {\n        result.push_back(str);\n    }\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve((1000))\n// (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\")\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nstd::string solve(long N) {\nstd::bitset<14> binary(N);\nstd::string binaryStr = binary.to_string();\nint sum = 0;\nfor (char c : binaryStr) {\n    if (c == '1') {\n        sum++;\n    }\n}\nreturn std::bitset<14>(sum).to_string();",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve((1000))\n// (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\")\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nstd::string solve(long N) {\nstd::bitset<14> binary(N);\n    return binary.to_string(); \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve((1000))\n// (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\")\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nstd::string solve(long N) {\nint sum = 0;\nwhile (N > 0) {\n    sum += N % 2;\n    N /= 2;\n}\nreturn std::bitset<32>(sum).to_string();",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve((1000))\n// (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\")\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nstd::string solve(long N) {\nstd::bitset<14> binary(N);\nint sum = 0;\nfor(int i = 0; i < binary.size(); i++) {\n    sum += binary[i];\n}\nreturn std::bitset<14>(sum).to_string();",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve((1000))\n// (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\")\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nstd::string solve(long N) {\nstd::bitset<14> binary(N);\nstd::string binary_str = binary.to_string();\nint sum = 0;\nfor(char c : binary_str) {\n    if(c == '1') sum++;\n}\nreturn std::bitset<14>(sum).to_string(); \n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered vectors of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered vector of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3))\n// (std::vector<long>({(long)1, (long)2, (long)1}))\n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1))\n// (std::vector<long>({(long)1}))\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\nstd::vector<long> path;\n    std::priority_queue<std::pair<long, std::pair<int, int>>, std::vector<std::pair<long, std::pair<int, int>>>, std::greater<std::pair<long, std::pair<int, int>>>> pq;\n    std::vector<std::vector<bool>> visited(grid.size(), std::vector<bool>(grid[0].size(), false));\n    long n = grid.size();\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            pq.push({grid[i][j], {i, j}});\n        }\n    }\n    while(k--) {\n        auto top = pq.top();\n        pq.pop();\n        int x = top.second.first;\n        int y = top.second.second;\n        if(visited[x][y]) {\n            k++;\n            continue;\n        }\n        visited[x][y] = true;\n        path.push_back(top.first);\n        if(x > 0 && !visited[x - 1][y]) pq.push({grid[x - 1][y], {x - 1, y}});\n        if(y > 0 && !visited[x][y - 1]) pq.push({grid[x][y - 1], {x, y - 1}});\n        if(x < n - 1 && !visited[x + 1][y]) pq.push({grid[x + 1][y], {x + 1, y}});\n        if(y < n - 1 && !visited[x][y + 1]) pq.push({grid[x][y + 1], {x, y + 1}});\n    }\n    return path;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered vectors of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered vector of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3))\n// (std::vector<long>({(long)1, (long)2, (long)1}))\n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1))\n// (std::vector<long>({(long)1}))\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n    // Create a map to store the coordinates of each value in the grid\n    std::map<long, std::pair<int, int>> valueToCoord;\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            valueToCoord[grid[i][j]] = {i, j};\n        }\n    }\n\n    // Create a priority queue to store the paths\n    std::priority_queue<std::vector<long>, std::vector<std::vector<long>>, std::greater<std::vector<long>>> pq;\n\n    // Initialize the queue with the paths starting from each cell\n    for (const auto& pair : valueToCoord) {\n        pq.push({pair.first});\n    }\n\n    // Process the paths in the queue\n    while (!pq.empty()) {\n        // Get the current path\n        std::vector<long> path = pq.top();\n        pq.pop();\n\n        // If the path has the required length, return it\n        if (path.size() == k) {\n            return path;\n        }\n\n        // Get the coordinates of the last cell in the path\n        int x = valueToCoord[path.back()].first;\n        int y = valueToCoord[path.back()].second;\n\n        // Add the paths obtained by moving to the neighbor cells\n        for (int dx = -1; dx <= 1; ++dx) {\n            for (int dy = -1; dy <= 1; ++dy) {\n                if (dx * dx + dy * dy == 1) {\n                    int nx = x + dx;\n                    int ny = y + dy;\n                    if (nx >= 0 && nx < grid.size() && ny >= 0 && ny < grid[nx].size()) {\n                        std::vector<long> newPath = path;\n                        newPath.push_back(grid[nx][ny]);\n                        pq.push(newPath);\n                    }\n                }\n            }\n        }\n    }\n\n    // If there is no path of the required length, return an empty vector\n    return {};\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered vectors of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered vector of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3))\n// (std::vector<long>({(long)1, (long)2, (long)1}))\n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1))\n// (std::vector<long>({(long)1}))\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>, std::vector<std::pair<long, std::pair<int, int>>>, std::greater<>> pq;\n    std::vector<std::vector<bool>> visited(grid.size(), std::vector<bool>(grid[0].size(), false));\n    int dx[] = {0, 0, -1, 1};\n    int dy[] = {-1, 1, 0, 0};\n\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            pq.push({grid[i][j], {i, j}});\n        }\n    }\n\n    while (k--) {\n        auto top = pq.top();\n        pq.pop();\n        int x = top.second.first;\n        int y = top.second.second;\n        if (visited[x][y]) continue;\n        visited[x][y] = true;\n        result.push_back(top.first);\n\n        for (int i = 0; i < 4; i++) {\n            int nx = x + dx[i];\n            int ny = y + dy[i];\n            if (nx >= 0 && nx < grid.size() && ny >= 0 && ny < grid[0].size() && !visited[nx][ny]) {\n                pq.push({grid[nx][ny], {nx, ny}});\n            }\n        }\n    }\n\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered vectors of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered vector of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3))\n// (std::vector<long>({(long)1, (long)2, (long)1}))\n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1))\n// (std::vector<long>({(long)1}))\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\nstd::vector<long> result;\n    int N = grid.size();\n    std::vector<std::vector<bool>> visited(N, std::vector<bool>(N, false));\n    std::priority_queue<std::pair<long, std::pair<int, int>>, std::vector<std::pair<long, std::pair<int, int>>>, std::greater<>> pq;\n\n    // Push all elements into the priority queue\n    for(int i = 0; i < N; i++) {\n        for(int j = 0; j < N; j++) {\n            pq.push({grid[i][j], {i, j}});\n        }\n    }\n\n    // Keep track of the directions in which we can move\n    std::vector<std::vector<int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n    // Start from the smallest element\n    auto start = pq.top();\n    pq.pop();\n    visited[start.second.first][start.second.second] = true;\n    result.push_back(start.first);\n\n    // BFS to find the minimum path of length k\n    std::queue<std::pair<int, int>> q;\n    q.push(start.second);\n    while(!q.empty() && result.size() < k) {\n        auto current = q.front();\n        q.pop();\n\n        for(auto direction : directions) {\n            int newRow = current.first + direction[0];\n            int newCol = current.second + direction[1];\n\n            // Check if the new position is within the grid and has not been visited yet\n            if(newRow >= 0 && newRow < N && newCol >= 0 && newCol < N && !visited[newRow][newCol]) {\n                visited[newRow][newCol] = true;\n                result.push_back(grid[newRow][newCol]);\n                q.push({newRow, newCol});\n\n                // Once we have found a path of length k, break out of the loop\n                if(result.size() == k) {\n                    break;\n                }\n            }\n        }\n    }\n\n    return result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered vectors of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered vector of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3))\n// (std::vector<long>({(long)1, (long)2, (long)1}))\n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1))\n// (std::vector<long>({(long)1}))\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n    // Create a vector to store the values of the grid cells\n    std::vector<long> gridValues;\n\n    // Push all the values from the grid into the vector\n    for (const auto &row : grid) {\n        for (const auto &cell : row) {\n            gridValues.push_back(cell);\n        }\n    }\n\n    // Sort the vector in ascending order\n    std::sort(gridValues.begin(), gridValues.end());\n\n    // Create a vector to store the values of the minimum path\n    std::vector<long> minPathValues;\n\n    // Push the smallest k values from the grid into the vector\n    for (long i = 0; i < k; ++i) {\n        minPathValues.push_back(gridValues[i]);\n    }\n\n    // Sort the vector in ascending order\n    std::sort(minPathValues.begin(), minPathValues.end());\n\n    // Return the vector of the minimum path values\n    return minPathValues;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper((\"aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"dBBE\"))\n// (0)\nlong count_upper(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper((\"aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"dBBE\"))\n// (0)\nlong count_upper(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper((\"aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"dBBE\"))\n// (0)\nlong count_upper(std::string s) {\n    long count = 0;\n    std::string vowels = \"AEIOU\";\n    for (int i = 0; i < s.length(); i += 2) {\n        if (vowels.find(s[i]) != std::string::npos) {\n            count++;\n        }\n    }\n    return count;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper((\"aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"dBBE\"))\n// (0)\nlong count_upper(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper((\"aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"dBBE\"))\n// (0)\nlong count_upper(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers and a positive integer k, return a sorted vector \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n// Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n// Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n// 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n// Sort the array in descending order\nstd::sort(arr.begin(), arr.end(), std::greater<long>());\n\n// Create a new vector to store the maximum k numbers\nstd::vector<long> result;\n\n// Add the first k numbers from the sorted array to the result\nfor(long i = 0; i < k; i++) {\n    result.push_back(arr[i]);\n}\n\n// Return the result\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers and a positive integer k, return a sorted vector \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n// Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n// Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n// 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n// sort the array in descending order\nstd::sort(arr.begin(), arr.end(), std::greater<long>());\n\n// create a new vector to store the maximum k numbers\nstd::vector<long> result;\n\n// add the first k numbers from the sorted array to the result vector\nfor (long i = 0; i < k; i++) {\n    result.push_back(arr[i]);\n}\n\n// return the result vector\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers and a positive integer k, return a sorted vector \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n// Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n// Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n// 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n// Sort the array in descending order\nstd::sort(arr.begin(), arr.end(), std::greater<long>());\n\n// Create a new vector to store the maximum k numbers\nstd::vector<long> result;\n\n// Insert the maximum k numbers into the result vector\nfor (long i = 0; i < k; i++) {\n    result.push_back(arr[i]);\n}\n\n// Return the result vector\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers and a positive integer k, return a sorted vector \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n// Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n// Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n// 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n// Sort the array in descending order\nstd::sort(arr.begin(), arr.end(), std::greater<long>());\n\n// Create a vector to store the maximum k numbers\nstd::vector<long> result;\n\n// Add the first k numbers from the sorted array to the result vector\nfor (long i = 0; i < k; i++) {\n    result.push_back(arr[i]);\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers and a positive integer k, return a sorted vector \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n// Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n// Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n// 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n// sort the vector in descending order\nstd::sort(arr.begin(), arr.end(), std::greater<long>());\n\n// create a new vector to store the maximum k numbers\nstd::vector<long> result;\n\n// add the first k numbers from the sorted vector to the result\nfor(int i = 0; i < k; i++) {\n    result.push_back(arr[i]);\n}\n\n// return the result\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n// (5)\nlong largest_divisor(long n) {\nfor(long i = n / 2; i >= 1; i--) {\n    if(n % i == 0) {\n        return i;\n    }\n}\nreturn -1; // return -1 if no divisor found\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n// (5)\nlong largest_divisor(long n) {\nfor(long i = n/2; i >= 1; i--) {\n    if(n % i == 0) {\n        return i;\n    }\n}\nreturn 1; // If no divisor found, return 1 as every number is divisible by 1\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n// (5)\nlong largest_divisor(long n) {\nfor(long i = n/2; i >= 1; i--) {\n    if(n % i == 0) {\n        return i;\n    }\n}\nreturn -1; // return -1 if no divisor found, should never reach this point for n > 1\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n// (5)\nlong largest_divisor(long n) {\nfor(long i = n/2; i >= 1; i--) {\n    if(n % i == 0) {\n        return i;\n    }\n}\nreturn -1; // return -1 if no divisor found\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n// (5)\nlong largest_divisor(long n) {\nfor (long i = n/2; i >= 1; i--) {\n    if (n % i == 0) {\n        return i;\n    }\n}\nreturn -1; // return -1 if no divisor found, which should never happen for n > 1\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative integers, return a cocpp of the given vector after sorting,\n// you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given vector.\n// Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n// >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long> array) {\nstd::vector<long> sorted_array = array;\n    if ((sorted_array.front() + sorted_array.back()) % 2 == 0) {\n        std::sort(sorted_array.begin(), sorted_array.end(), std::greater<long>());\n    } else {\n        std::sort(sorted_array.begin(), sorted_array.end());\n    }\n    return sorted_array;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative integers, return a cocpp of the given vector after sorting,\n// you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given vector.\n// Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n// >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long> array) {\n// Create a copy of the given vector\nstd::vector<long> sorted_array = array;\n\n// Check if the vector is empty or contains only one element\nif(array.size() <= 1) {\n    return sorted_array;\n}\n\n// Calculate the sum of the first and last element of the vector\nlong sum = array[0] + array[array.size() - 1];\n\n// Check if the sum is even or odd\nif(sum % 2 == 0) {\n    // Sort the vector in descending order if the sum is even\n    std::sort(sorted_array.begin(), sorted_array.end(), std::greater<long>());\n} else {\n    // Sort the vector in ascending order if the sum is odd\n    std::sort(sorted_array.begin(), sorted_array.end());\n}\n\nreturn sorted_array;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative integers, return a cocpp of the given vector after sorting,\n// you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given vector.\n// Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n// >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long> array) {\n// Copy the given array to a new vector\nstd::vector<long> sortedArray = array;\n\n// Check if the array is empty or contains only one element\nif(array.size() <= 1) {\n    return sortedArray;\n}\n\n// Calculate the sum of the first and last element\nlong sum = array[0] + array[array.size() - 1];\n\n// Check if the sum is odd or even\nif(sum % 2 == 0) {\n    // If the sum is even, sort the array in descending order\n    std::sort(sortedArray.begin(), sortedArray.end(), std::greater<long>());\n} else {\n    // If the sum is odd, sort the array in ascending order\n    std::sort(sortedArray.begin(), sortedArray.end());\n}\n\nreturn sortedArray;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative integers, return a cocpp of the given vector after sorting,\n// you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given vector.\n// Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n// >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long> array) {\n// Copy the given vector\nstd::vector<long> sorted_array = array;\n\n// Check if the vector is empty or contains only one element\nif (array.size() <= 1) {\n    return sorted_array;\n}\n\n// Calculate the sum of the first and last elements\nlong sum = array.front() + array.back();\n\n// Sort the vector in ascending order if the sum is odd\nif (sum % 2 != 0) {\n    std::sort(sorted_array.begin(), sorted_array.end());\n}\n// Sort the vector in descending order if the sum is even\nelse {\n    std::sort(sorted_array.begin(), sorted_array.end(), std::greater<long>());\n}\n\nreturn sorted_array;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative integers, return a cocpp of the given vector after sorting,\n// you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given vector.\n// Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n// >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long> array) {\nstd::vector<long> sorted_array = array;\n    \nif (array.empty()) {\n    return sorted_array;\n}\n\nlong sum = array.front() + array.back();\n\nif (sum % 2 == 0) {\n    std::sort(sorted_array.begin(), sorted_array.end(), std::greater<long>());\n} else {\n    std::sort(sorted_array.begin(), sorted_array.end());\n}\n\nreturn sorted_array;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement the function f that takes n as a parameter,\n// and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f((5))\n// (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15}))\nstd::vector<long> f(long n) {\nstd::vector<long> result(n);\nlong factorial = 1;\nlong sum = 0;\n\nfor(long i = 1; i <= n; i++) {\n    if(i % 2 == 0) {\n        factorial *= i;\n        result[i-1] = factorial;\n    } else {\n        sum += i;\n        result[i-1] = sum;\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement the function f that takes n as a parameter,\n// and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f((5))\n// (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15}))\nstd::vector<long> f(long n) {\nstd::vector<long> result(n);\nlong fact = 1;\nlong sum = 0;\n\nfor (long i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n        fact *= i;\n        result[i-1] = fact;\n    } else {\n        sum += i;\n        result[i-1] = sum;\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement the function f that takes n as a parameter,\n// and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f((5))\n// (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15}))\nstd::vector<long> f(long n) {\nstd::vector<long> result(n);\nlong fact = 1;\nlong sum = 0;\n\nfor(long i = 1; i <= n; i++) {\n    if(i % 2 == 0) {\n        fact *= i;\n        result[i-1] = fact;\n    } else {\n        sum += i;\n        result[i-1] = sum;\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement the function f that takes n as a parameter,\n// and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f((5))\n// (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15}))\nstd::vector<long> f(long n) {\nstd::vector<long> result(n);\nlong fact = 1;\nlong sum = 0;\n\nfor(long i = 1; i <= n; i++) {\n    if(i % 2 == 0) {\n        fact *= i;\n        result[i-1] = fact;\n    } else {\n        sum += i;\n        result[i-1] = sum;\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement the function f that takes n as a parameter,\n// and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f((5))\n// (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15}))\nstd::vector<long> f(long n) {\nstd::vector<long> result(n);\nlong factorial = 1;\nlong sum = 0;\n\nfor(long i = 1; i <= n; i++) {\n    if(i % 2 == 0) {\n        factorial *= i;\n        result[i-1] = factorial;\n    } else {\n        sum += i;\n        result[i-1] = sum;\n    }\n}\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n// (false)\nbool iscube(long a) {\nlong root = round(cbrt(a));\nreturn a == root*root*root;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n// (false)\nbool iscube(long a) {\nlong root = round(cbrt(a));\nreturn a == root * root * root;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n// (false)\nbool iscube(long a) {\nlong root = round(cbrt(a));\nreturn root*root*root == a;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n// (false)\nbool iscube(long a) {\nlong root = round(cbrt(a));\nreturn root * root * root == a;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n// (false)\nbool iscube(long a) {\nlong root = cbrt(a);\nreturn (root * root * root == a);\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\nstd::string result = \"\";\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                if (c == 'a') c = 'c';\n                else if (c == 'e') c = 'g';\n                else if (c == 'i') c = 'k';\n                else if (c == 'o') c = 'q';\n                else if (c == 'u') c = 'w';\n                c = toupper(c);\n            } else {\n                if (c == 'A') c = 'C';\n                else if (c == 'E') c = 'G';\n                else if (c == 'I') c = 'K';\n                else if (c == 'O') c = 'Q';\n                else if (c == 'U') c = 'W';\n                c = tolower(c);\n            }\n        }\n        result += c;\n    }\n    return result;\n",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\nstd::string result = \"\";\nfor(char& c : message) {\n    if(isalpha(c)) {\n        if(islower(c)) {\n            if(c == 'a') c = 'C';\n            else if(c == 'e') c = 'G';\n            else if(c == 'i') c = 'K';\n            else if(c == 'o') c = 'Q';\n            else if(c == 'u') c = 'W';\n            c = toupper(c);\n        }\n        else {\n            if(c == 'A') c = 'c';\n            else if(c == 'E') c = 'g';\n            else if(c == 'I') c = 'k';\n            else if(c == 'O') c = 'q';\n            else if(c == 'U') c = 'w';\n            c = tolower(c);\n        }\n    }\n    result += c;\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\nstd::string encoded = \"\";\nfor (char & c : message) {\n    if (isalpha(c)) {\n        if (isupper(c)) {\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                c = c + 2;\n            }\n            c = tolower(c);\n        } else {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                c = c + 2;\n            }\n            c = toupper(c);\n        }\n    }\n    encoded += c;\n}\nreturn encoded;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\nstd::string encodedMessage = \"\";\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                    encodedMessage += char(tolower(c) + 2);\n                } else {\n                    encodedMessage += tolower(c);\n                }\n            } else {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    encodedMessage += char(toupper(c) + 2);\n                } else {\n                    encodedMessage += toupper(c);\n                }\n            }\n        } else {\n            encodedMessage += c;\n        }\n    }\n    return encodedMessage;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\nstd::string result = \"\";\nfor (char& c : message) {\n    if (isalpha(c)) {\n        if (islower(c)) {\n            if (c == 'a') c = 'c';\n            else if (c == 'e') c = 'g';\n            else if (c == 'i') c = 'k';\n            else if (c == 'o') c = 'q';\n            else if (c == 'u') c = 'w';\n            c = toupper(c);\n        } else {\n            if (c == 'A') c = 'C';\n            else if (c == 'E') c = 'G';\n            else if (c == 'I') c = 'K';\n            else if (c == 'O') c = 'Q';\n            else if (c == 'U') c = 'W';\n            c = tolower(c);\n        }\n    }\n    result += c;\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\nlong is_bored(std::string S) {\nstd::istringstream iss(S);\nstd::string sentence;\nlong count = 0;\n\nwhile(std::getline(iss, sentence, '.')) {\n    std::istringstream iss2(sentence);\n    std::string word;\n    if(std::getline(iss2, word, ' ')) {\n        if(word == \"I\" || word == \"I?\") {\n            count++;\n        }\n    }\n}\n\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\nlong is_bored(std::string S) {\nstd::istringstream iss(S);\nstd::string sentence;\nlong count = 0;\n\nwhile(std::getline(iss, sentence, '.')) {\n    std::istringstream iss2(sentence);\n    std::string word;\n    if(std::getline(iss2, word, ' ')) {\n        if(word == \"I\" || word == \"I?\") {\n            count++;\n        }\n    }\n}\n\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\nlong is_bored(std::string S) {\nstd::istringstream iss(S);\nstd::string sentence;\nlong count = 0;\n\nwhile (std::getline(iss, sentence, '.')) {\n    std::istringstream iss2(sentence);\n    std::string word;\n    if (std::getline(iss2, word, ' ')) {\n        if (word == \"I\" || word == \"I?\" || word == \"I!\") {\n            count++;\n        }\n    }\n}\n\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\nlong is_bored(std::string S) {\nlong count = 0;\nstd::istringstream iss(S);\nstd::string sentence;\n\nwhile(std::getline(iss, sentence, '.')) {\n    std::istringstream iss2(sentence);\n    std::string word;\n    if(std::getline(iss2, word, ' ')) {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n}\n\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\nlong is_bored(std::string S) {\nstd::istringstream iss(S);\nstd::string sentence;\nlong count = 0;\n\nwhile(std::getline(iss, sentence, '.')) {\n    std::istringstream iss_sentence(sentence);\n    std::string word;\n    if(std::getline(iss_sentence, word, ' ')) {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n}\n\nreturn count;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are two distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n// create an unordered set to store the elements\nstd::unordered_set<long> set;\n\n// iterate over the vector\nfor (long i : l) {\n    // if the negative of the current element is found in the set, return true\n    if (set.find(-i) != set.end()) {\n        return true;\n    }\n    // insert the current element into the set\n    set.insert(i);\n}\n\n// if no pair is found, return false\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are two distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n// Create an empty hash set\nstd::unordered_set<long> set;\n\n// Traverse the array\nfor (int i = 0; i < l.size(); i++) {\n    // If -arr[i] is found in set, then there is a pair whose sum is 0\n    if (set.find(-l[i]) != set.end())\n        return true;\n\n    // Insert arr[i] to set\n    set.insert(l[i]);\n}\n\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are two distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\nstd::unordered_set<long> set;\nfor (long num : l) {\n    if (set.find(-num) != set.end()) {\n        return true;\n    }\n    set.insert(num);\n}\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are two distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\nstd::unordered_set<long> s;\nfor (long i : l) {\n    if (s.find(-i) != s.end()) {\n        return true;\n    }\n    s.insert(i);\n}\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are two distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\nstd::unordered_set<long> set;\nfor (long i : l) {\n    if (set.find(-i) != set.end()) {\n        return true;\n    }\n    set.insert(i);\n}\nreturn false;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area((3), (4), (5))\n// (6.0f)\n// >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a, long b, long c) {\nif ((a + b > c) && (a + c > b) && (b + c > a)) {\n        float s = (a + b + c) / 2.0;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100.0;\n    } else {\n        return -1;\n    }\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area((3), (4), (5))\n// (6.0f)\n// >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a, long b, long c) {\n// check if the sides form a valid triangle\nif((a+b>c) && (a+c>b) && (b+c>a)) {\n    // calculate the semi-perimeter\n    float s = (a + b + c) / 2.0;\n    // calculate the area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    // round the area to 2 decimal points\n    area = round(area * 100) / 100;\n    return area;\n} else {\n    return -1;\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area((3), (4), (5))\n// (6.0f)\n// >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a, long b, long c) {\nif ((a + b > c) && (a + c > b) && (b + c > a)) {\n        float s = (a + b + c) / 2.0;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100.0;\n    } else {\n        return -1;\n    }\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area((3), (4), (5))\n// (6.0f)\n// >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a, long b, long c) {\n// check if the sides form a valid triangle\nif ((a + b > c) && (a + c > b) && (b + c > a)) {\n    // calculate semi-perimeter\n    float s = (a + b + c) / 2.0;\n\n    // calculate area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // round to 2 decimal places\n    area = round(area * 100) / 100;\n\n    return area;\n} else {\n    return -1;\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area((3), (4), (5))\n// (6.0f)\n// >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a, long b, long c) {\n// Check if the sides form a valid triangle\nif (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n}\n\n// Calculate semi-perimeter\nfloat s = (a + b + c) / 2.0;\n\n// Calculate area using Heron's formula\nfloat area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n// Round to 2 decimal places\narea = round(area * 100) / 100;\n\nreturn area;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\nstd::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\nstd::vector<std::string> result;\n\nauto it1 = std::find(planets.begin(), planets.end(), planet1);\nauto it2 = std::find(planets.begin(), planets.end(), planet2);\n\nif (it1 == planets.end() || it2 == planets.end()) {\n    return result;\n}\n\nif (it1 > it2) {\n    std::swap(it1, it2);\n}\n\nfor (auto it = it1 + 1; it < it2; ++it) {\n    result.push_back(*it);\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\nstd::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\nstd::vector<std::string> result;\n\nauto it1 = std::find(planets.begin(), planets.end(), planet1);\nauto it2 = std::find(planets.begin(), planets.end(), planet2);\n\nif (it1 == planets.end() || it2 == planets.end()) {\n    return result; // return empty vector if any of the input planet names is incorrect\n}\n\nif (it1 > it2) {\n    std::swap(it1, it2);\n}\n\nfor (auto it = it1 + 1; it != it2; ++it) {\n    result.push_back(*it);\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\nstd::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\nstd::vector<std::string> result;\n\n// Find the position of planet1 and planet2 in the vector\nint pos1 = std::find(planets.begin(), planets.end(), planet1) - planets.begin();\nint pos2 = std::find(planets.begin(), planets.end(), planet2) - planets.begin();\n\n// Check if planet1 and planet2 are valid\nif (pos1 >= planets.size() || pos2 >= planets.size()) {\n    return result;\n}\n\n// Ensure pos1 is less than pos2\nif (pos1 > pos2) {\n    std::swap(pos1, pos2);\n}\n\n// Add all planets between planet1 and planet2 to the result\nfor (int i = pos1 + 1; i < pos2; i++) {\n    result.push_back(planets[i]);\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\nstd::map<std::string, int> planet_order = {\n    {\"Mercury\", 1},\n    {\"Venus\", 2},\n    {\"Earth\", 3},\n    {\"Mars\", 4},\n    {\"Jupiter\", 5},\n    {\"Saturn\", 6},\n    {\"Uranus\", 7},\n    {\"Neptune\", 8}\n};\n\nstd::vector<std::string> planets = {\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n};\n\nstd::vector<std::string> result;\n\nif (planet_order.find(planet1) == planet_order.end() || planet_order.find(planet2) == planet_order.end())\n    return result;\n\nint start = std::min(planet_order[planet1], planet_order[planet2]);\nint end = std::max(planet_order[planet1], planet_order[planet2]);\n\nfor (int i = start; i < end - 1; i++) {\n    result.push_back(planets[i]);\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\nstd::map<std::string, int> planets = {{\"Mercury\", 1}, {\"Venus\", 2}, {\"Earth\", 3}, {\"Mars\", 4}, {\"Jupiter\", 5}, {\"Saturn\", 6}, {\"Uranus\", 7}, {\"Neptune\", 8}};\nstd::vector<std::string> result;\n\n// Check if the planets exist\nif (planets.find(planet1) == planets.end() || planets.find(planet2) == planets.end())\n    return result;\n\n// Swap the planets if planet2 is closer to the sun than planet1\nif (planets[planet1] > planets[planet2])\n    std::swap(planet1, planet2);\n\nfor (const auto& planet : planets) {\n    if (planet.second > planets[planet1] && planet.second < planets[planet2])\n        result.push_back(planet.first);\n}\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>> digits((235))\n// (15)\nlong digits(long n) {\nlong product = 1;\nbool hasOdd = false;\n\nwhile (n > 0) {\n    int digit = n % 10;\n    if (digit % 2 != 0) {\n        product *= digit;\n        hasOdd = true;\n    }\n    n /= 10;\n}\n\nif (hasOdd) {\n    return product;\n} else {\n    return 0;\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>> digits((235))\n// (15)\nlong digits(long n) {\nlong product = 1;\nbool hasOdd = false;\n\nwhile (n > 0) {\n    int digit = n % 10;\n    if (digit % 2 != 0) {\n        product *= digit;\n        hasOdd = true;\n    }\n    n /= 10;\n}\n\nif (!hasOdd) {\n    return 0;\n}\n\nreturn product;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>> digits((235))\n// (15)\nlong digits(long n) {\nlong product = 1;\nbool hasOdd = false;\n\nwhile (n > 0) {\n    long digit = n % 10;\n    if (digit % 2 != 0) {\n        product *= digit;\n        hasOdd = true;\n    }\n    n /= 10;\n}\n\nreturn hasOdd ? product : 0;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>> digits((235))\n// (15)\nlong digits(long n) {\nlong product = 1;\nbool hasOdd = false;\n\nwhile (n > 0) {\n    long digit = n % 10;\n    if (digit % 2 != 0) {\n        product *= digit;\n        hasOdd = true;\n    }\n    n /= 10;\n}\n\nif (!hasOdd) {\n    return 0;\n}\n\nreturn product;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>> digits((235))\n// (15)\nlong digits(long n) {\nlong product = 1;\nbool hasOdd = false;\n\nwhile(n > 0) {\n    long digit = n % 10;\n    if(digit % 2 != 0) {\n        product *= digit;\n        hasOdd = true;\n    }\n    n /= 10;\n}\n\nif(hasOdd)\n    return product;\nelse\n    return 0;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a vector of the words.\n// For example:\n// >>> words_string((\"Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n// >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string s) {\nstd::vector<std::string> words;\nstd::istringstream iss(s);\nstd::string temp;\n\nwhile (getline(iss, temp, ' ')) {\n    if(temp.find(',') != std::string::npos){\n        std::istringstream iss2(temp);\n        std::string temp2;\n        while(getline(iss2, temp2, ',')){\n            words.push_back(temp2);\n        }\n    }\n    else{\n        words.push_back(temp);\n    }\n}\n\nreturn words;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a vector of the words.\n// For example:\n// >>> words_string((\"Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n// >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string s) {\nstd::vector<std::string> words;\nstd::string temp;\nstd::stringstream ss(s);\n\nwhile (getline(ss, temp, ' ')) {\n    if (temp.find(',') != std::string::npos) {\n        std::stringstream inner_ss(temp);\n        std::string inner_temp;\n        while (getline(inner_ss, inner_temp, ',')) {\n            if (!inner_temp.empty()) {\n                words.push_back(inner_temp);\n            }\n        }\n    } else {\n        words.push_back(temp);\n    }\n}\n\nreturn words;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a vector of the words.\n// For example:\n// >>> words_string((\"Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n// >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string s) {\nstd::vector<std::string> words;\nstd::string delimiter = \" ,\";\nsize_t pos = 0;\nstd::string token;\nwhile ((pos = s.find_first_of(delimiter)) != std::string::npos) {\n    token = s.substr(0, pos);\n    if (!token.empty()) {\n        words.push_back(token);\n    }\n    s.erase(0, pos + 1);\n}\nif (!s.empty()) {\n    words.push_back(s);\n}\nreturn words;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a vector of the words.\n// For example:\n// >>> words_string((\"Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n// >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string s) {\nstd::vector<std::string> words;\nstd::string delimiter = \" ,\";\nsize_t pos = 0;\nstd::string token;\nwhile ((pos = s.find_first_of(delimiter)) != std::string::npos) {\n    token = s.substr(0, pos);\n    if (!token.empty()) {\n        words.push_back(token);\n    }\n    s.erase(0, pos + 1);\n}\nif (!s.empty()) {\n    words.push_back(s);\n}\nreturn words;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a vector of the words.\n// For example:\n// >>> words_string((\"Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n// >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string s) {\nstd::vector<std::string> words;\nstd::string word;\nstd::stringstream ss(s);\nwhile (std::getline(ss, word, ' ')) {\n    if(word.find(',') != std::string::npos) {\n        std::stringstream inner_ss(word);\n        std::string inner_word;\n        while (std::getline(inner_ss, inner_word, ',')) {\n            words.push_back(inner_word);\n        }\n    } else {\n        words.push_back(word);\n    }\n}\nreturn words;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string string, std::string substring) {\nlong count = 0;\nsize_t pos = 0;\n\nwhile ((pos = string.find(substring, pos)) != std::string::npos) {\n    ++count;\n    ++pos;\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string string, std::string substring) {\nlong count = 0;\nsize_t pos = 0;\nwhile((pos = string.find(substring, pos)) != std::string::npos)\n{\n    ++count;\n    ++pos;\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string string, std::string substring) {\nlong count = 0;\nsize_t pos = 0;\n\nwhile((pos = string.find(substring, pos)) != std::string::npos)\n{\n    count++;\n    pos++;\n}\n\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string string, std::string substring) {\nlong count = 0;\nsize_t pos = 0;\n\nwhile ((pos = string.find(substring, pos)) != std::string::npos) {\n    ++count;\n    ++pos;\n}\n\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string string, std::string substring) {\nlong count = 0;\nsize_t pos = 0;\nwhile ((pos = string.find(substring, pos)) != std::string::npos) {\n    ++count;\n    ++pos;\n}\nreturn count;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5f)\n// 2.5f\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\nif(a.f0 == b.f0 && a.f1 == b.f1 && a.f2 == b.f2)\n    return Union_long_float_std_string_std_nullopt(std::nullopt);\nelse if(a.f0 > b.f0)\n    return Union_long_float_std_string_std_nullopt(a.f0);\nelse if(a.f1 > b.f1)\n    return Union_long_float_std_string_std_nullopt(a.f1);\nelse if(a.f2 > b.f2)\n    return Union_long_float_std_string_std_nullopt(a.f2);\nelse\n    return Union_long_float_std_string_std_nullopt(b.f0);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5f)\n// 2.5f\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\nif (a.f0 == b.f0 && a.f1 == b.f1 && a.f2 == b.f2) {\n    return Union_long_float_std_string_std_nullopt(std::nullopt);\n}\n\nif (a.f0 > b.f0) {\n    return Union_long_float_std_string_std_nullopt(a.f0);\n} else if (b.f0 > a.f0) {\n    return Union_long_float_std_string_std_nullopt(b.f0);\n}\n\nif (a.f1 > b.f1) {\n    return Union_long_float_std_string_std_nullopt(a.f1);\n} else if (b.f1 > a.f1) {\n    return Union_long_float_std_string_std_nullopt(b.f1);\n}\n\nif (std::stof(a.f2) > std::stof(b.f2)) {\n    return Union_long_float_std_string_std_nullopt(a.f2);\n} else {\n    return Union_long_float_std_string_std_nullopt(b.f2);\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5f)\n// 2.5f\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\nif(a.f0 == b.f0) {\n    return Union_long_float_std_string_std_nullopt(std::nullopt);\n} else if(a.f0 > b.f0) {\n    return Union_long_float_std_string_std_nullopt(a.f0);\n} else {\n    return Union_long_float_std_string_std_nullopt(b.f0);\n}\n\nif(a.f1 == b.f1) {\n    return Union_long_float_std_string_std_nullopt(std::nullopt);\n} else if(a.f1 > b.f1) {\n    return Union_long_float_std_string_std_nullopt(a.f1);\n} else {\n    return Union_long_float_std_string_std_nullopt(b.f1);\n}\n\nif(a.f2 == b.f2) {\n    return Union_long_float_std_string_std_nullopt(std::nullopt);\n} else if(a.f2 > b.f2) {\n    return Union_long_float_std_string_std_nullopt(a.f2);\n} else {\n    return Union_long_float_std_string_std_nullopt(b.f2);\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5f)\n// 2.5f\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\nif (a.f0 == b.f0) {\n    return std::nullopt;\n} else if (a.f0 > b.f0) {\n    return Union_long_float_std_string_std_nullopt(a.f0);\n} else {\n    return Union_long_float_std_string_std_nullopt(b.f0);\n}\n\nif (a.f1 == b.f1) {\n    return std::nullopt;\n} else if (a.f1 > b.f1) {\n    return Union_long_float_std_string_std_nullopt(a.f1);\n} else {\n    return Union_long_float_std_string_std_nullopt(b.f1);\n}\n\nif (a.f2 == b.f2) {\n    return std::nullopt;\n} else if (a.f2 > b.f2) {\n    return Union_long_float_std_string_std_nullopt(a.f2);\n} else {\n    return Union_long_float_std_string_std_nullopt(b.f2);\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5f)\n// 2.5f\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\nif (a.f0 == b.f0) {\n    return std::nullopt;\n} else if (a.f0 > b.f0) {\n    return Union_long_float_std_string_std_nullopt(a.f0);\n} else {\n    return Union_long_float_std_string_std_nullopt(b.f0);\n}\n\nif (a.f1 == b.f1) {\n    return std::nullopt;\n} else if (a.f1 > b.f1) {\n    return Union_long_float_std_string_std_nullopt(a.f1);\n} else {\n    return Union_long_float_std_string_std_nullopt(b.f1);\n}\n\nif (a.f2 == b.f2) {\n    return std::nullopt;\n} else if (a.f2 > b.f2) {\n    return Union_long_float_std_string_std_nullopt(a.f2);\n} else {\n    return Union_long_float_std_string_std_nullopt(b.f2);\n}\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels((\"\"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) {\nstd::string result;\nfor (char c : text) {\n    c = tolower(c);\n    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n        result.push_back(c);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels((\"\"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) {\nstd::string result;\nfor (char c : text) {\n    c = tolower(c);\n    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n        result += c;\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels((\"\"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) {\nstd::string result;\nfor (char c : text) {\n    char lower_c = tolower(c);\n    if (lower_c != 'a' && lower_c != 'e' && lower_c != 'i' && lower_c != 'o' && lower_c != 'u') {\n        result += c;\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels((\"\"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) {\nstd::string result = \"\";\nfor (int i = 0; i < text.length(); i++) {\n    char c = tolower(text[i]);\n    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n        result += text[i];\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels((\"\"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) {\nstd::string result = \"\";\nfor (char c : text) {\n    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n        c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n        result += c;\n    }\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers, return vector in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\nstd::vector<long> result;\nstd::multiset<long> s(lst.begin(), lst.end());\n\nwhile (!s.empty()) {\n    result.push_back(*s.begin());\n    s.erase(s.begin());\n    if (!s.empty()) {\n        result.push_back(*s.rbegin());\n        s.erase(std::prev(s.end()));\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers, return vector in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n// Sort the list in ascending order\nstd::sort(lst.begin(), lst.end());\n\nstd::vector<long> result;\nint start = 0, end = lst.size() - 1;\n\n// While start is less than or equal to end\nwhile(start <= end) {\n    // If start and end are at the same position, add the element to the result\n    if(start == end) {\n        result.push_back(lst[start]);\n    } else {\n        // Add the smallest and largest elements to the result\n        result.push_back(lst[start]);\n        result.push_back(lst[end]);\n    }\n    // Move the start and end pointers\n    start++;\n    end--;\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers, return vector in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\nstd::vector<long> result;\nstd::multiset<long> sorted_lst(lst.begin(), lst.end());\n\nwhile (!sorted_lst.empty()) {\n    result.push_back(*sorted_lst.begin());\n    sorted_lst.erase(sorted_lst.begin());\n    \n    if (!sorted_lst.empty()) {\n        result.push_back(*sorted_lst.rbegin());\n        sorted_lst.erase(--sorted_lst.end());\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers, return vector in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\nstd::vector<long> result;\nstd::multiset<long> s(lst.begin(), lst.end());\n\nwhile (!s.empty()) {\n    result.push_back(*s.begin());\n    s.erase(s.begin());\n    if (!s.empty()) {\n        result.push_back(*s.rbegin());\n        s.erase(std::prev(s.end()));\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers, return vector in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n// Sort the list in ascending order\nstd::sort(lst.begin(), lst.end());\n\nstd::vector<long> result;\nint start = 0, end = lst.size() - 1;\n\n// Iterate over the list, adding the smallest and largest remaining elements alternately\nwhile (start <= end) {\n    if (start == end) {\n        result.push_back(lst[start]);\n    } else {\n        result.push_back(lst[start]);\n        result.push_back(lst[end]);\n    }\n    start++;\n    end--;\n}\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n// (std::make_tuple(2.0f, 2.2f))\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n// (std::make_tuple(2.0f, 2.0f))\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n// Sort the vector\nstd::sort(numbers.begin(), numbers.end());\n\nfloat min_diff = FLT_MAX;\nstd::tuple<float, float> result;\n\n// Iterate through the vector and find the pair with smallest difference\nfor (int i = 0; i < numbers.size()-1; i++) {\n    float diff = numbers[i+1] - numbers[i];\n    if (diff < min_diff) {\n        min_diff = diff;\n        result = std::make_tuple(numbers[i], numbers[i+1]);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n// (std::make_tuple(2.0f, 2.2f))\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n// (std::make_tuple(2.0f, 2.0f))\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n// First, sort the numbers\nstd::sort(numbers.begin(), numbers.end());\n\n// Initialize minimum difference as maximum possible value\nfloat min_diff = std::numeric_limits<float>::max();\nstd::tuple<float, float> closest_pair;\n\n// Find the pair with minimum difference\nfor (int i = 0; i < numbers.size() - 1; i++) {\n    float diff = numbers[i + 1] - numbers[i];\n    if (diff < min_diff) {\n        min_diff = diff;\n        closest_pair = std::make_tuple(numbers[i], numbers[i + 1]);\n    }\n}\n\nreturn closest_pair;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n// (std::make_tuple(2.0f, 2.2f))\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n// (std::make_tuple(2.0f, 2.0f))\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n\n    float min_diff = std::numeric_limits<float>::max();\n    std::tuple<float, float> closest_elements;\n\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_elements = std::make_tuple(numbers[i], numbers[i + 1]);\n        }\n    }\n\n    return closest_elements;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n// (std::make_tuple(2.0f, 2.2f))\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n// (std::make_tuple(2.0f, 2.0f))\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n// Sort the vector\nstd::sort(numbers.begin(), numbers.end());\n\nfloat min_diff = std::numeric_limits<float>::max();\nstd::tuple<float, float> closest_pair;\n\n// Iterate over the sorted vector and find the pair with the smallest difference\nfor (std::size_t i = 0; i < numbers.size() - 1; ++i) {\n    float diff = numbers[i+1] - numbers[i];\n    if (diff < min_diff) {\n        min_diff = diff;\n        closest_pair = std::make_tuple(numbers[i], numbers[i+1]);\n    }\n}\n\nreturn closest_pair;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n// (std::make_tuple(2.0f, 2.2f))\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n// (std::make_tuple(2.0f, 2.0f))\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n// Sort the vector\nstd::sort(numbers.begin(), numbers.end());\n\nfloat min_diff = std::numeric_limits<float>::max();\nstd::tuple<float, float> closest_pair;\n\n// Loop through the vector and find the pair with minimum difference\nfor (int i = 0; i < numbers.size() - 1; ++i) {\n    float diff = numbers[i+1] - numbers[i];\n    if (diff < min_diff) {\n        min_diff = diff;\n        closest_pair = std::make_tuple(numbers[i], numbers[i+1]);\n    }\n}\n\nreturn closest_pair;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power((1), (4))\n// (true)\n// >>> is_simple_power((2), (2))\n// (true)\n// >>> is_simple_power((8), (2))\n// (true)\n// >>> is_simple_power((3), (2))\n// (false)\n// >>> is_simple_power((3), (1))\n// (false)\n// >>> is_simple_power((5), (3))\n// (false)\nbool is_simple_power(long x, long n) {\nif (x == 1) return true;\nif (n == 1) return x == 1;\nwhile (x % n == 0) {\n    x /= n;\n}\nreturn x == 1;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power((1), (4))\n// (true)\n// >>> is_simple_power((2), (2))\n// (true)\n// >>> is_simple_power((8), (2))\n// (true)\n// >>> is_simple_power((3), (2))\n// (false)\n// >>> is_simple_power((3), (1))\n// (false)\n// >>> is_simple_power((5), (3))\n// (false)\nbool is_simple_power(long x, long n) {\nif (n == 1) return x == 1;\nwhile (x != 1) {\n    if (x % n != 0) return false;\n    x /= n;\n}\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power((1), (4))\n// (true)\n// >>> is_simple_power((2), (2))\n// (true)\n// >>> is_simple_power((8), (2))\n// (true)\n// >>> is_simple_power((3), (2))\n// (false)\n// >>> is_simple_power((3), (1))\n// (false)\n// >>> is_simple_power((5), (3))\n// (false)\nbool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (n == 1) return x == 1;\n    while (x != 1) {\n        if (x % n != 0) return false;\n        x /= n;\n    }\n    return true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power((1), (4))\n// (true)\n// >>> is_simple_power((2), (2))\n// (true)\n// >>> is_simple_power((8), (2))\n// (true)\n// >>> is_simple_power((3), (2))\n// (false)\n// >>> is_simple_power((3), (1))\n// (false)\n// >>> is_simple_power((5), (3))\n// (false)\nbool is_simple_power(long x, long n) {\n    if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return x == 1;\n    }\n    while (x != 1) {\n        if (x % n != 0) {\n            return false;\n        }\n        x /= n;\n    }\n    return true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power((1), (4))\n// (true)\n// >>> is_simple_power((2), (2))\n// (true)\n// >>> is_simple_power((8), (2))\n// (true)\n// >>> is_simple_power((3), (2))\n// (false)\n// >>> is_simple_power((3), (1))\n// (false)\n// >>> is_simple_power((5), (3))\n// (false)\nbool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (n == 1) return x == 1;\n    while (x % n == 0) {\n        x /= n;\n    }\n    return x == 1;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib((1))\n// (2)\n// >>> prime_fib((2))\n// (3)\n// >>> prime_fib((3))\n// (5)\n// >>> prime_fib((4))\n// (13)\n// >>> prime_fib((5))\n// (89)\nlong prime_fib(long n) {\n    if (n < 1) {\n        return -1; // invalid input\n    }\n\n    std::vector<long> fib = {0, 1};\n    std::vector<long> primeFibs;\n    int i = 2;\n\n    while (primeFibs.size() < n) {\n        fib.push_back(fib[i - 1] + fib[i - 2]);\n        bool isPrime = true;\n\n        if (fib[i] < 2) {\n            isPrime = false;\n        } else {\n            for (long j = 2; j * j <= fib[i]; ++j) {\n                if (fib[i] % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n        }\n\n        if (isPrime) {\n            primeFibs.push_back(fib[i]);\n        }\n\n        ++i;\n    }\n\n    return primeFibs[n - 1];\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib((1))\n// (2)\n// >>> prime_fib((2))\n// (3)\n// >>> prime_fib((3))\n// (5)\n// >>> prime_fib((4))\n// (13)\n// >>> prime_fib((5))\n// (89)\nlong prime_fib(long n) {\n    std::vector<long> fib = {0, 1};\n    std::vector<long> prime_fib;\n    long i = 2;\n\n    auto is_prime = [](long n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    };\n\n    while (prime_fib.size() < n) {\n        fib.push_back(fib[i - 1] + fib[i - 2]);\n        if (is_prime(fib[i])) {\n            prime_fib.push_back(fib[i]);\n        }\n        i++;\n    }\n\n    return prime_fib[n - 1];\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib((1))\n// (2)\n// >>> prime_fib((2))\n// (3)\n// >>> prime_fib((3))\n// (5)\n// >>> prime_fib((4))\n// (13)\n// >>> prime_fib((5))\n// (89)\nlong prime_fib(long n) {\n    // Check whether a number is prime\n    auto is_prime = [](long num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (long i = 3; i * i <= num; i += 2)\n            if (num % i == 0) return false;\n        return true;\n    };\n\n    // Generate Fibonacci numbers\n    long a = 0, b = 1, fib = 0;\n    std::vector<long> prime_fibs;\n    while (prime_fibs.size() < n) {\n        fib = a + b;\n        a = b;\n        b = fib;\n        if (is_prime(fib)) prime_fibs.push_back(fib);\n    }\n\n    return prime_fibs[n - 1];\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib((1))\n// (2)\n// >>> prime_fib((2))\n// (3)\n// >>> prime_fib((3))\n// (5)\n// >>> prime_fib((4))\n// (13)\n// >>> prime_fib((5))\n// (89)\nlong prime_fib(long n) {\n    if(n <= 0) return -1; // Invalid input\n\n    // Function to check if a number is prime\n    auto is_prime = [](long n) {\n        if(n <= 1) return false;\n        if(n == 2) return true;\n        if(n % 2 == 0) return false;\n        for(long i = 3; i * i <= n; i += 2) {\n            if(n % i == 0) return false;\n        }\n        return true;\n    };\n\n    // Function to get the n-th Fibonacci number\n    auto fibonacci = [](long n) {\n        long a = 0;\n        long b = 1;\n        for(long i = 0; i < n; i++) {\n            long temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return a;\n    };\n\n    long count = 0;\n    long i = 0;\n    while(true) {\n        long fib = fibonacci(i);\n        if(is_prime(fib)) {\n            count++;\n            if(count == n) return fib;\n        }\n        i++;\n    }\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib((1))\n// (2)\n// >>> prime_fib((2))\n// (3)\n// >>> prime_fib((3))\n// (5)\n// >>> prime_fib((4))\n// (13)\n// >>> prime_fib((5))\n// (89)\nlong prime_fib(long n) {\n    // Helper function to check if a number is prime\n    auto is_prime = [](long num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (long i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    };\n\n    // Helper function to generate Fibonacci numbers\n    auto fib = [](long num) {\n        long a = 0;\n        long b = 1;\n        for (long i = 0; i < num; ++i) {\n            long temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return a;\n    };\n\n    long count = 0;\n    long fib_num = 0;\n    while (count < n) {\n        fib_num++;\n        if (is_prime(fib(fib_num))) {\n            count++;\n        }\n    }\n    return fib(fib_num);\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts the given vector of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original vector.\n// For example:\n// >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> order_by_points(std::vector<long> nums) {\n// Lambda function to calculate sum of digits of a number\nauto sum_of_digits = [](long n) {\n    n = std::abs(n);\n    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n};\n\n// Sort the vector using custom comparator\nstd::stable_sort(nums.begin(), nums.end(), [&](long a, long b) {\n    return sum_of_digits(a) < sum_of_digits(b);\n});\n\nreturn nums;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts the given vector of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original vector.\n// For example:\n// >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> order_by_points(std::vector<long> nums) {\n// Helper function to calculate sum of digits\nauto digitSum = [](long n) {\n    n = std::abs(n);\n    int sum = 0;\n    while (n) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n};\n\n// Sort the vector\nstd::stable_sort(nums.begin(), nums.end(), [&](long a, long b) {\n    return digitSum(a) < digitSum(b);\n});\n\nreturn nums;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts the given vector of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original vector.\n// For example:\n// >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> order_by_points(std::vector<long> nums) {\n// Function to calculate sum of digits\nauto sum_of_digits = [](long n) {\n    n = std::abs(n);\n    int sum = 0;\n    while (n != 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n};\n\n// Sort the vector\nstd::stable_sort(nums.begin(), nums.end(), [&](long a, long b) {\n    return sum_of_digits(a) < sum_of_digits(b);\n});\n\nreturn nums;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts the given vector of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original vector.\n// For example:\n// >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> order_by_points(std::vector<long> nums) {\n// lambda function to calculate sum of digits of a number\nauto sum_of_digits = [](long n) {\n    n = std::abs(n);\n    int sum = 0;\n    while (n != 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n};\n\n// sort the vector based on the sum of digits\nstd::stable_sort(nums.begin(), nums.end(), [&](long a, long b) {\n    return sum_of_digits(a) < sum_of_digits(b);\n});\n\nreturn nums;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts the given vector of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original vector.\n// For example:\n// >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> order_by_points(std::vector<long> nums) {\n// First, create a vector of pairs where first element is the sum of digits and second is the number itself\nstd::vector<std::pair<int, long>> sum_nums;\n\nfor (long num : nums) {\n    int sum = 0;\n    long temp = std::abs(num); // Make sure the number is positive for digit extraction\n\n    while (temp != 0) {\n        sum += temp % 10;\n        temp /= 10;\n    }\n\n    sum_nums.push_back(std::make_pair(sum, num));\n}\n\n// Sort the vector of pairs. Since std::sort is stable, numbers with equal sums will remain in their original order.\nstd::sort(sum_nums.begin(), sum_nums.end());\n\n// Create a new vector to hold the sorted numbers\nstd::vector<long> sorted_nums;\nfor (auto pair : sum_nums) {\n    sorted_nums.push_back(pair.second);\n}\n\nreturn sorted_nums;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given vector of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n// (true)\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n// Sort the vector first\nstd::sort(numbers.begin(), numbers.end());\n\n// Check if any two consecutive elements are closer than the threshold\nfor (int i = 0; i < numbers.size() - 1; i++) {\n    if (std::abs(numbers[i] - numbers[i+1]) < threshold) {\n        return true;\n    }\n}\n\n// If no such pair of numbers is found, return false\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given vector of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n// (true)\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n// Sort the vector\nstd::sort(numbers.begin(), numbers.end());\n\n// Check the difference between each adjacent pair\nfor (std::size_t i = 0; i < numbers.size() - 1; ++i) {\n    if (numbers[i+1] - numbers[i] < threshold) {\n        return true;\n    }\n}\n\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given vector of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n// (true)\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n// Sort the vector\nstd::sort(numbers.begin(), numbers.end());\n\n// Check if any two consecutive elements have difference less than threshold\nfor(int i = 0; i < numbers.size() - 1; i++) {\n    if(abs(numbers[i] - numbers[i+1]) < threshold) {\n        return true;\n    }\n}\n\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given vector of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n// (true)\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n// Sort the vector\nstd::sort(numbers.begin(), numbers.end());\n\n// Loop through the sorted vector\nfor (int i = 0; i < numbers.size() - 1; i++) {\n    // Check if the difference between current and next element is less than threshold\n    if (abs(numbers[i] - numbers[i + 1]) < threshold) {\n        return true;\n    }\n}\n\n// If no close elements found, return false\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given vector of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n// (true)\nbool has_close_elements(std::vector<float> numbers, float threshold) {\nfor (int i = 0; i < numbers.size(); i++) {\n    for (int j = i + 1; j < numbers.size(); j++) {\n        if (abs(numbers[i] - numbers[j]) < threshold) {\n            return true;\n        }\n    }\n}\nreturn false;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n// (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string string) {\nstd::string rev_str = string;\nstd::reverse(rev_str.begin(), rev_str.end());\n\nstd::string combined_str = string + \"#\" + rev_str;\nstd::vector<int> lps(combined_str.size(), 0);\n\nfor (int i = 1; i < combined_str.size(); i++) {\n    int j = lps[i - 1];\n    while (j > 0 && combined_str[i] != combined_str[j]) {\n        j = lps[j - 1];\n    }\n    if (combined_str[i] == combined_str[j]) {\n        j++;\n    }\n    lps[i] = j;\n}\n\nreturn string + rev_str.substr(0, string.size() - lps.back());\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n// (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string string) {\n// Reverse the string and store it\nstd::string reversed_string = string;\nstd::reverse(reversed_string.begin(), reversed_string.end());\n\n// Concatenate the original string and the reversed string\nstd::string concatenated_string = string + \"#\" + reversed_string;\n\n// Vector to store the length of the longest prefix suffix\nstd::vector<int> lps(concatenated_string.length(), 0);\n\n// Preprocess the pattern (calculate lps[] array)\nint length = 0;\nint i = 1;\nwhile (i < concatenated_string.length()) {\n    if (concatenated_string[i] == concatenated_string[length]) {\n        length++;\n        lps[i] = length;\n        i++;\n    } else {\n        if (length != 0) {\n            length = lps[length - 1];\n        } else {\n            lps[i] = 0;\n            i++;\n        }\n    }\n}\n\n// The longest palindromic prefix of the original string is the suffix of the concatenated string up to the last character\n// The remaining characters form a string that should be added to the start of the original string to make it a palindrome\nstd::string prefix = string.substr(lps.back());\nstd::reverse(prefix.begin(), prefix.end());\n\nreturn prefix + string;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n// (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string string) {\nint n = string.size();\nint i = 0;\nfor (int j = n - 1; j >= 0; j--) {\n    if (string[i] == string[j]) {\n        i++;\n    }\n}\nif (i == n) {\n    return string;\n}\nstd::string suffix = string.substr(i, n);\nstd::string prefix = string.substr(0, i);\nstd::string mid = string.substr(i, n - i * 2);\nreturn prefix + make_palindrome(mid) + suffix;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n// (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string string) {\n    int n = string.size();\n    std::string rev_str = string;\n    std::reverse(rev_str.begin(), rev_str.end());\n\n    // Construct temporary string\n    std::string temp = string + \"$\" + rev_str;\n\n    int temp_len = temp.size();\n\n    // Compute temporary array to compute longest prefix suffix\n    std::vector<int> lps(temp_len);\n    lps[0] = 0;\n    int len = 0;\n    int i = 1;\n    while (i < temp_len) {\n        if (temp[i] == temp[len]) {\n            len++;\n            lps[i] = len;\n            i++;\n        } else {\n            if (len != 0) {\n                len = lps[len - 1];\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n\n    // The longest prefix which is also suffix in reversed string\n    std::string prefix = string.substr(0, n - lps[temp_len - 1]);\n\n    // Reverse the prefix and append to original string\n    std::reverse(prefix.begin(), prefix.end());\n    string += prefix;\n\n    return string;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n// (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string string) {\n    int n = string.length();\n    std::string rev = string;\n    std::reverse(rev.begin(), rev.end());\n    std::string str = string + \"#\" + rev;\n\n    std::vector<int> lps(str.length(), 0);\n    for (int i = 1; i < str.length(); i++) {\n        int j = lps[i - 1];\n        while (j > 0 && str[i] != str[j]) {\n            j = lps[j - 1];\n        }\n        if (str[i] == str[j]) {\n            j++;\n        }\n        lps[i] = j;\n    }\n\n    return string + rev.substr(lps.back());\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor((\"010\"), (\"110\"))\n// (\"100\")\nstd::string string_xor(std::string a, std::string b) {\nassert(a.size() == b.size());\nstd::string result = \"\";\nfor (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n        result += '0';\n    } else {\n        result += '1';\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor((\"010\"), (\"110\"))\n// (\"100\")\nstd::string string_xor(std::string a, std::string b) {\nstd::string result = \"\";\nassert(a.length() == b.length());\n\nfor (size_t i = 0; i < a.length(); i++) {\n    if (a[i] == b[i])\n        result += '0';\n    else\n        result += '1';\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor((\"010\"), (\"110\"))\n// (\"100\")\nstd::string string_xor(std::string a, std::string b) {\nstd::string result = \"\";\nassert(a.size() == b.size());\n\nfor (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n        result += '0';\n    } else {\n        result += '1';\n    }\n}\n\nreturn result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor((\"010\"), (\"110\"))\n// (\"100\")\nstd::string string_xor(std::string a, std::string b) {\nassert(a.size() == b.size());\nstd::string result = \"\";\nfor (size_t i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n        result += '0';\n    } else {\n        result += '1';\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor((\"010\"), (\"110\"))\n// (\"100\")\nstd::string string_xor(std::string a, std::string b) {\nstd::string result = \"\";\nassert(a.length() == b.length());\n\nfor (int i = 0; i < a.length(); i++) {\n    if (a[i] == b[i])\n        result += \"0\";\n    else\n        result += \"1\";\n}\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlong special_factorial(long n) {\nlong result = 1;\nfor(long i = n; i > 0; --i) {\n    long factorial = 1;\n    for(long j = i; j > 0; --j) {\n        factorial *= j;\n    }\n    result *= factorial;\n}\nreturn result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlong special_factorial(long n) {\nlong result = 1;\nfor(long i = n; i > 0; i--){\n    long temp = 1;\n    for(long j = i; j > 0; j--){\n        temp *= j;\n    }\n    result *= temp;\n}\nreturn result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlong special_factorial(long n) {\nlong long result = 1;\nfor(long i = 1; i <= n; i++) {\n    long long factorial = 1;\n    for(long j = 1; j <= i; j++) {\n        factorial *= j;\n    }\n    result *= factorial;\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlong special_factorial(long n) {\nlong result = 1;\nfor (long i = 1; i <= n; ++i) {\n    for (long j = 1; j <= i; ++j) {\n        result *= j;\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlong special_factorial(long n) {\nlong result = 1;\nfor(long i = n; i > 0; i--){\n    long factorial = 1;\n    for(long j = i; j > 0; j--){\n        factorial *= j;\n    }\n    result *= factorial;\n}\nreturn result;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) {\nlong sum = 0;\nfor(long i = 0; i < k; i++) {\n    if(arr[i] >= 0 && arr[i] <= 99) {\n        sum += arr[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) {\nlong sum = 0;\nfor(int i = 0; i < k; i++) {\n    if(arr[i] >= 0 && arr[i] <= 99) {\n        sum += arr[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) {\nlong sum = 0;\nfor(long i = 0; i < k; i++) {\n    if(arr[i] >= 0 && arr[i] <= 99) {\n        sum += arr[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) {\nlong sum = 0;\nfor(long i = 0; i < k; i++) {\n    if(arr[i] >= 0 && arr[i] <= 99) {\n        sum += arr[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) {\nlong sum = 0;\nfor(long i = 0; i < k; i++) {\n    if(arr[i] >= 0 && arr[i] <= 99) {\n        sum += arr[i];\n    }\n}\nreturn sum;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4((5))\n// (4)\n// >>> fib4((6))\n// (8)\n// >>> fib4((7))\n// (14)\nlong fib4(long n) {\nif (n == 0 || n == 1 || n == 3)\n    return 0;\nelse if (n == 2)\n    return 2;\n\nlong fib[n+1];\nfib[0] = 0;\nfib[1] = 0;\nfib[2] = 2;\nfib[3] = 0;\n\nfor (long i = 4; i <= n; i++) {\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n}\n\nreturn fib[n];\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4((5))\n// (4)\n// >>> fib4((6))\n// (8)\n// >>> fib4((7))\n// (14)\nlong fib4(long n) {\nif(n == 0 || n == 1 || n == 3)\n    return 0;\nif(n == 2)\n    return 2;\n\nlong fib[n+1];\nfib[0] = 0;\nfib[1] = 0;\nfib[2] = 2;\nfib[3] = 0;\n\nfor(long i = 4; i <= n; i++)\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n\nreturn fib[n];\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4((5))\n// (4)\n// >>> fib4((6))\n// (8)\n// >>> fib4((7))\n// (14)\nlong fib4(long n) {\nif (n == 0) return 0;\nif (n == 1) return 0;\nif (n == 2) return 2;\nif (n == 3) return 0;\n\nstd::vector<long> fib(n + 1, 0);\nfib[0] = 0;\nfib[1] = 0;\nfib[2] = 2;\nfib[3] = 0;\n\nfor (long i = 4; i <= n; ++i) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n}\n\nreturn fib[n];\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4((5))\n// (4)\n// >>> fib4((6))\n// (8)\n// >>> fib4((7))\n// (14)\nlong fib4(long n) {\nif (n == 0) return 0;\nif (n == 1) return 0;\nif (n == 2) return 2;\nif (n == 3) return 0;\n\nlong a = 0, b = 0, c = 2, d = 0, e;\n\nfor (long i = 4; i <= n; i++) {\n    e = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n}\n\nreturn d;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4((5))\n// (4)\n// >>> fib4((6))\n// (8)\n// >>> fib4((7))\n// (14)\nlong fib4(long n) {\nif (n == 0) return 0;\nif (n == 1) return 0;\nif (n == 2) return 2;\nif (n == 3) return 0;\n\nstd::vector<long> fib4(n+1, 0);\nfib4[2] = 2;\n\nfor (long i = 4; i <= n; i++) {\n    fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n}\n\nreturn fib4[n];\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long> unique_digits(std::vector<long> x) {\nstd::vector<long> result;\nfor(auto num : x){\n    bool hasEvenDigit = false;\n    while(num > 0){\n        if((num % 10) % 2 == 0){\n            hasEvenDigit = true;\n            break;\n        }\n        num /= 10;\n    }\n    if(!hasEvenDigit)\n        result.push_back(num);\n}\nstd::sort(result.begin(), result.end());\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long> unique_digits(std::vector<long> x) {\nstd::vector<long> result;\n    for (auto num : x) {\n        bool hasEvenDigit = false;\n        long temp = num;\n        while (temp > 0) {\n            if ((temp % 10) % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if (!hasEvenDigit) {\n            result.push_back(num);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long> unique_digits(std::vector<long> x) {\nstd::vector<long> result;\nfor(auto num : x) {\n    bool hasEvenDigit = false;\n    while(num > 0) {\n        if((num % 10) % 2 == 0) {\n            hasEvenDigit = true;\n            break;\n        }\n        num /= 10;\n    }\n    if(!hasEvenDigit) {\n        result.push_back(num);\n    }\n}\nstd::sort(result.begin(), result.end());\nreturn result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long> unique_digits(std::vector<long> x) {\nstd::vector<long> result;\n    for(auto num : x) {\n        bool hasEvenDigit = false;\n        while(num > 0) {\n            if((num % 10) % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(!hasEvenDigit) {\n            result.push_back(num);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long> unique_digits(std::vector<long> x) {\nstd::vector<long> result;\nfor (long num : x) {\n    bool hasEvenDigit = false;\n    while (num > 0) {\n        if ((num % 10) % 2 == 0) {\n            hasEvenDigit = true;\n            break;\n        }\n        num /= 10;\n    }\n    if (!hasEvenDigit) {\n        result.push_back(num);\n    }\n}\nstd::sort(result.begin(), result.end());\nreturn result;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a vector of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty vector.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string> select_words(std::string s, long n) {\nstd::vector<std::string> result;\n    \n    // Function to check if a character is a consonant\n    auto isConsonant = [](char ch) {\n        ch = tolower(ch);\n        return ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u';\n    };\n\n    std::istringstream iss(s);\n    std::string word;\n\n    // Iterate over each word in the string\n    while (iss >> word) {\n        long consonantCount = 0;\n\n        // Count the consonants in the word\n        for (char ch : word) {\n            if (isConsonant(ch)) {\n                consonantCount++;\n            }\n        }\n\n        // If the word has exactly n consonants, add it to the result\n        if (consonantCount == n) {\n            result.push_back(word);\n        }\n    }\n\n    return result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a vector of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty vector.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string> select_words(std::string s, long n) {\nstd::vector<std::string> result;\nstd::string word;\nstd::stringstream ss(s);\nstd::string vowels = \"aeiouAEIOU\";\n\nwhile (ss >> word) {\n    long count = 0;\n    for (char c : word) {\n        if (vowels.find(c) == std::string::npos) {\n            count++;\n        }\n    }\n    if (count == n) {\n        result.push_back(word);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a vector of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty vector.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string> select_words(std::string s, long n) {\nstd::vector<std::string> result;\nif(s.empty()) return result;\n\nstd::istringstream iss(s);\nstd::string word;\n\nwhile(iss >> word) {\n    long count = 0;\n    for(char c : word) {\n        c = tolower(c);\n        if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n            count++;\n        }\n    }\n    if(count == n) {\n        result.push_back(word);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a vector of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty vector.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string> select_words(std::string s, long n) {\nstd::vector<std::string> result;\nstd::istringstream iss(s);\nstd::string word;\n\nwhile (iss >> word) {\n    long consonants = 0;\n    for (char c : word) {\n        c = std::tolower(c);\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n            consonants++;\n        }\n    }\n    if (consonants == n) {\n        result.push_back(word);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a vector of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty vector.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string> select_words(std::string s, long n) {\nstd::vector<std::string> result;\nstd::string word;\nstd::stringstream ss(s);\n\nwhile (ss >> word) {\n    long consonants = 0;\n    for (char c : word) {\n        c = std::tolower(c);\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n            consonants++;\n        }\n    }\n    if (consonants == n) {\n        result.push_back(word);\n    }\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1, (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n// (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long w) {\n// Calculate sum of elements in the vector\nlong sum = std::accumulate(q.begin(), q.end(), 0L);\n\n// Check if sum is less than or equal to w\nif(sum > w) return false;\n\n// Check if vector is a palindrome\nfor(int i = 0, j = q.size()-1; i < j; i++, j--) {\n    if(q[i] != q[j]) return false;\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1, (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n// (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long w) {\n// Calculate the sum of elements in the vector\nlong sum = std::accumulate(q.begin(), q.end(), 0L);\n\n// Check if the sum is greater than the maximum possible weight\nif (sum > w) {\n    return false;\n}\n\n// Check if the vector is a palindrome\nfor (size_t i = 0; i < q.size() / 2; ++i) {\n    if (q[i] != q[q.size() - 1 - i]) {\n        return false;\n    }\n}\n\n// If the vector is a palindrome and the sum is less than or equal to the maximum possible weight, it will fly\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1, (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n// (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long w) {\n// Calculate the sum of the elements in the vector\nlong sum = std::accumulate(q.begin(), q.end(), 0L);\n\n// Check if the sum is greater than the maximum possible weight\nif (sum > w) {\n    return false;\n}\n\n// Check if the vector is a palindrome\nfor (size_t i = 0, j = q.size() - 1; i < j; ++i, --j) {\n    if (q[i] != q[j]) {\n        return false;\n    }\n}\n\n// If the vector is a palindrome and the sum of its elements is less than or equal to the maximum possible weight, it will fly\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1, (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n// (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long w) {\n// Calculate sum of elements in vector q\nlong sum = std::accumulate(q.begin(), q.end(), 0L);\n\n// Check if sum is greater than maximum weight\nif (sum > w) {\n    return false;\n}\n\n// Check if vector q is palindromic\nfor (int i = 0, j = q.size() - 1; i < j; i++, j--) {\n    if (q[i] != q[j]) {\n        return false;\n    }\n}\n\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1, (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n// (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long w) {\n// calculate the sum of elements in the vector\nlong sum = std::accumulate(q.begin(), q.end(), 0L);\n\n// check if the sum is greater than the maximum weight\nif(sum > w) {\n    return false;\n}\n\n// check if the vector is a palindrome\nfor(int i = 0; i < q.size()/2; i++) {\n    if(q[i] != q[q.size()-1-i]) {\n        return false;\n    }\n}\n\n// if the sum is less than or equal to the maximum weight and the vector is a palindrome, the object will fly\nreturn true;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n// >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong fib(long n) {\n// Initialize base cases\nif (n <= 0) {\n    return 0;\n} else if (n == 1) {\n    return 1;\n} else {\n    // Initialize first two Fibonacci numbers\n    long fib1 = 0, fib2 = 1, fibn;\n\n    // Generate Fibonacci numbers for 2 to n\n    for (long i = 2; i <= n; i++) {\n        fibn = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = fibn;\n    }\n\n    return fib2;\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n// >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong fib(long n) {\nif (n <= 1)\n    return n;\n\nlong a = 0, b = 1;\n\nfor (long i = 2; i <= n; i++) {\n    long temp = a;\n    a = b;\n    b = temp + b;\n}\n\nreturn b;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n// >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong fib(long n) {\nif(n <= 1)\n    return n;\nlong a = 0, b = 1;\nfor(long i = 2; i <= n; i++) {\n    long c = a + b;\n    a = b;\n    b = c;\n}\nreturn b;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n// >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong fib(long n) {\nif (n <= 1)\n    return n;\nlong a = 0, b = 1;\nfor (long i = 2; i <= n; i++) {\n    long temp = a + b;\n    a = b;\n    b = temp;\n}\nreturn b;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n// >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong fib(long n) {\nif (n <= 1)\n    return n;\nlong a = 0, b = 1;\nfor (long i = 2; i <= n; i++) {\n    long c = a + b;\n    a = b;\n    b = c;\n}\nreturn b;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name of a class (a string) and a vector of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the vector.\n// For example, if you are given \"Slices\" as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\nstd::string strongest_extension = \"\";\nint max_strength = INT_MIN;\n\nfor (const auto& ext : extensions) {\n    int cap = 0, sm = 0;\n    for (const auto& ch : ext) {\n        if (isupper(ch)) cap++;\n        else if (islower(ch)) sm++;\n    }\n    int strength = cap - sm;\n    if (strength > max_strength) {\n        max_strength = strength;\n        strongest_extension = ext;\n    }\n}\n\nreturn class_name + \".\" + strongest_extension;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name of a class (a string) and a vector of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the vector.\n// For example, if you are given \"Slices\" as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\nstd::string strongest_extension = \"\";\nint max_strength = INT_MIN;\n\nfor (const auto& extension : extensions) {\n    int CAP = 0, SM = 0;\n    for (const auto& ch : extension) {\n        if (std::isupper(ch)) CAP++;\n        else if (std::islower(ch)) SM++;\n    }\n\n    int strength = CAP - SM;\n    if (strength > max_strength) {\n        max_strength = strength;\n        strongest_extension = extension;\n    }\n}\n\nreturn class_name + \".\" + strongest_extension;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name of a class (a string) and a vector of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the vector.\n// For example, if you are given \"Slices\" as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\nstd::string strongest_extension = \"\";\nint max_strength = INT_MIN;\n\nfor (const auto& extension : extensions) {\n    int CAP = 0, SM = 0;\n    for (char c : extension) {\n        if (isupper(c)) CAP++;\n        else if (islower(c)) SM++;\n    }\n\n    int strength = CAP - SM;\n    if (strength > max_strength) {\n        max_strength = strength;\n        strongest_extension = extension;\n    }\n}\n\nreturn class_name + \".\" + strongest_extension;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name of a class (a string) and a vector of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the vector.\n// For example, if you are given \"Slices\" as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\nstd::string strongest_extension = \"\";\nint max_strength = INT_MIN;\n\nfor (const auto& extension : extensions) {\n    int CAP = 0, SM = 0;\n    for (const auto& ch : extension) {\n        if (isupper(ch)) CAP++;\n        else if (islower(ch)) SM++;\n    }\n    int strength = CAP - SM;\n\n    if (strength > max_strength) {\n        max_strength = strength;\n        strongest_extension = extension;\n    }\n}\n\nreturn class_name + \".\" + strongest_extension;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name of a class (a string) and a vector of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the vector.\n// For example, if you are given \"Slices\" as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\nstd::string strongest_extension = \"\";\nint max_strength = INT_MIN;\n\nfor (const auto& extension : extensions) {\n    int strength = 0;\n    for (const auto& ch : extension) {\n        if (isupper(ch)) {\n            strength++;\n        } else if (islower(ch)) {\n            strength--;\n        }\n    }\n\n    if (strength > max_strength) {\n        max_strength = strength;\n        strongest_extension = extension;\n    }\n}\n\nreturn class_name + \".\" + strongest_extension;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\")\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string> lst) {\n// Initialize counters for open and close parentheses\nint openCount = 0, closeCount = 0;\n\n// Iterate over the strings in the vector\nfor (const auto& str : lst) {\n    for (const auto& ch : str) {\n        if (ch == '(') {\n            openCount++;\n        } else if (ch == ')') {\n            if (openCount > 0) {\n                openCount--;\n            } else {\n                closeCount++;\n            }\n        }\n    }\n}\n\n// Check if there are unmatched parentheses\nif (openCount != closeCount) {\n    return \"No\";\n}\n\n// Iterate over the strings in reversed order\nfor (auto it = lst.rbegin(); it != lst.rend(); ++it) {\n    openCount = 0;\n    closeCount = 0;\n    for (auto it2 = it->rbegin(); it2 != it->rend(); ++it2) {\n        if (*it2 == ')') {\n            closeCount++;\n        } else if (*it2 == '(') {\n            if (closeCount > 0) {\n                closeCount--;\n            } else {\n                openCount++;\n            }\n        }\n    }\n    if (openCount > 0) {\n        return \"No\";\n    }\n}\n\nreturn \"Yes\";",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\")\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string> lst) {\nint open = 0, close = 0;\n    for (auto &s : lst) {\n        for (char c : s) {\n            if (c == '(') open++;\n            else if (c == ')' && open > 0) open--;\n            else close++;\n        }\n    }\n    return (open == 0 && close == 0) ? \"Yes\" : \"No\";",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\")\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string> lst) {\n// Initialize counters for open and close parentheses\nint open = 0, close = 0;\n\n// Iterate over each string in the vector\nfor (const auto& str : lst) {\n    // Iterate over each character in the string\n    for (const auto& ch : str) {\n        // If the character is an open parenthesis, increment the open counter\n        if (ch == '(') {\n            open++;\n        }\n        // If the character is a close parenthesis\n        else if (ch == ')') {\n            // If there are open parentheses, decrement the open counter\n            if (open > 0) {\n                open--;\n            }\n            // Otherwise, increment the close counter\n            else {\n                close++;\n            }\n        }\n    }\n}\n\n// If there are no unmatched open or close parentheses, the strings can be concatenated to form a good string\nif (open == 0 && close == 0) {\n    return \"Yes\";\n}\n// Otherwise, the strings cannot be concatenated to form a good string\nelse {\n    return \"No\";\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\")\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string> lst) {\nint open = 0, close = 0;\n    for (const auto &str : lst) {\n        for (const auto &ch : str) {\n            if (ch == '(') {\n                open++;\n            } else {\n                if (open > 0) {\n                    open--;\n                } else {\n                    close++;\n                }\n            }\n        }\n    }\n    return open == close ? \"Yes\" : \"No\";",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\")\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string> lst) {\nint open = 0, close = 0;\nfor (const auto &s : lst) {\n    for (const auto &c : s) {\n        if (c == '(') {\n            open++;\n        } else {\n            if (open > 0) {\n                open--;\n            } else {\n                close++;\n            }\n        }\n    }\n}\n\nfor (auto it = lst.rbegin(); it != lst.rend(); ++it) {\n    for (auto c = it->rbegin(); c != it->rend(); ++c) {\n        if (*c == ')') {\n            close++;\n        } else {\n            if (close > 0) {\n                close--;\n            } else {\n                open++;\n            }\n        }\n    }\n}\n\nreturn open == 0 && close == 0 ? \"Yes\" : \"No\";"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n// std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n// std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\nif (lst.size() < 2) {\n    return std::nullopt;\n}\n\nstd::sort(lst.begin(), lst.end());\n\nlong smallest = lst[0];\nfor (int i = 1; i < lst.size(); i++) {\n    if (lst[i] > smallest) {\n        return lst[i];\n    }\n}\n\nreturn std::nullopt;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n// std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n// std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\nif (lst.size() < 2) {\n        return std::nullopt;\n    }\n\n    std::sort(lst.begin(), lst.end());\n\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] > lst[0]) {\n            return lst[i];\n        }\n    }\n\n    return std::nullopt;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n// std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n// std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\nif(lst.size() < 2) {\n    return std::nullopt;\n}\n\nstd::sort(lst.begin(), lst.end());\nlong smallest = lst[0];\nfor(int i = 1; i < lst.size(); i++) {\n    if(lst[i] > smallest) {\n        return lst[i];\n    }\n}\n\nreturn std::nullopt;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n// std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n// std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\nif (lst.size() < 2) {\n    return std::nullopt;\n}\n\nstd::sort(lst.begin(), lst.end());\n\nfor (size_t i = 1; i < lst.size(); ++i) {\n    if (lst[i] > lst[0]) {\n        return lst[i];\n    }\n}\n\nreturn std::nullopt;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n// std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n// std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\nif (lst.size() < 2) {\n    return std::nullopt;\n}\n\nstd::sort(lst.begin(), lst.end());\n\nlong smallest = lst[0];\nfor (int i = 1; i < lst.size(); i++) {\n    if (lst[i] > smallest) {\n        return lst[i];\n    }\n}\n\nreturn std::nullopt;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n// (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>> any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6f), (-2.2f), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n// Check if the numbers are integers\nif (floor(x) != x || floor(y) != y || floor(z) != z)\n    return false;\n\n// Check if one of the numbers is the sum of the other two\nif (x == y + z || y == x + z || z == x + y)\n    return true;\n\n// If none of the above conditions are met, return false\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n// (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>> any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6f), (-2.2f), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n// Check if the numbers are integers\n    if (floor(x) != x || floor(y) != y || floor(z) != z) {\n        return false;\n    }\n\n    // Check if one of the numbers is equal to the sum of the other two\n    if (x == y + z || y == x + z || z == x + y) {\n        return true;\n    }\n\n    // Return false in any other cases\n    return false;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n// (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>> any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6f), (-2.2f), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n// Check if all numbers are integers\nif (floor(x) != x || floor(y) != y || floor(z) != z)\n    return false;\n\n// Check if one of the numbers is equal to the sum of the other two\nif (x == y + z || y == x + z || z == x + y)\n    return true;\n\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n// (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>> any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6f), (-2.2f), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n// Check if the numbers are integers\nif (floor(x) == x && floor(y) == y && floor(z) == z) {\n    // Check if one of the numbers is equal to the sum of the other two\n    if ((x + y == z) || (x + z == y) || (y + z == x)) {\n        return true;\n    }\n}\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n// (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>> any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6f), (-2.2f), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n// Check if the numbers are integers\n    if (floor(x) != x || floor(y) != y || floor(z) != z) {\n        return false;\n    }\n\n    // Check if one of the numbers is equal to the sum of the other two\n    if (x == y + z || y == x + z || z == x + y) {\n        return true;\n    }\n\n    // If none of the above conditions are met, return false\n    return false;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5f))\n// (0.5f)\nfloat truncate_number(float number) {\nint intPart = (int)number;\nfloat decimalPart = number - intPart;\nreturn decimalPart;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5f))\n// (0.5f)\nfloat truncate_number(float number) {\nint intPart = (int)number;\nreturn number - intPart;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5f))\n// (0.5f)\nfloat truncate_number(float number) {\nint intPart = (int)number;\nreturn number - intPart;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5f))\n// (0.5f)\nfloat truncate_number(float number) {\nint intPart = static_cast<int>(number);\nfloat decimalPart = number - intPart;\nreturn decimalPart;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5f))\n// (0.5f)\nfloat truncate_number(float number) {\nint intPart = static_cast<int>(number);\nfloat decimalPart = number - intPart;\nreturn decimalPart;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector with elements incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\nfor(auto &i : l) {\n    i++;\n}\nreturn l;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector with elements incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\nfor(auto &i : l) {\n    i++;\n}\nreturn l;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector with elements incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\nfor(auto& i : l) {\n    i++;\n}\nreturn l;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector with elements incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\nfor(auto& i : l) {\n    i++;\n}\nreturn l;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector with elements incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\nfor(auto& i : l) {\n    i++;\n}\nreturn l;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y((7), (34), (12))\n// (34)\n// >>> x_or_y((15), (8), (5))\n// (5)\nlong x_or_y(long n, long x, long y) {\nbool isPrime = true;\nif(n <= 1) {\n    isPrime = false;\n} else {\n    for(long i = 2; i <= sqrt(n); i++) {\n        if(n % i == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n}\nif(isPrime) {\n    return x;\n} else {\n    return y;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y((7), (34), (12))\n// (34)\n// >>> x_or_y((15), (8), (5))\n// (5)\nlong x_or_y(long n, long x, long y) {\nbool isPrime = true;\n\nif (n <= 1) {\n    isPrime = false;\n} else {\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n}\n\nif (isPrime) {\n    return x;\n} else {\n    return y;\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y((7), (34), (12))\n// (34)\n// >>> x_or_y((15), (8), (5))\n// (5)\nlong x_or_y(long n, long x, long y) {\nbool isPrime = true;\n\nif (n <= 1) {\n    isPrime = false;\n} else {\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n}\n\nif (isPrime) {\n    return x;\n} else {\n    return y;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y((7), (34), (12))\n// (34)\n// >>> x_or_y((15), (8), (5))\n// (5)\nlong x_or_y(long n, long x, long y) {\nbool isPrime = true;\nif (n <= 1) {\n    isPrime = false;\n} else {\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n}\nreturn isPrime ? x : y;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y((7), (34), (12))\n// (34)\n// >>> x_or_y((15), (8), (5))\n// (5)\nlong x_or_y(long n, long x, long y) {\nbool isPrime = true;\n\nif (n <= 1) {\n    isPrime = false;\n} else {\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n}\n\nif (isPrime) {\n    return x;\n} else {\n    return y;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n// >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100), (101))\n// (1)\nlong modp(long n, long p) {\nlong result = 1;\nlong base = 2;\n\n// Convert n to binary and perform \"square and multiply\"\nwhile (n > 0) {\n    // If n is odd, multiply result by base\n    if (n % 2 == 1) {\n        result = (result * base) % p;\n    }\n    // Square the base\n    base = (base * base) % p;\n    // Move to next bit of n\n    n = n / 2;\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n// >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100), (101))\n// (1)\nlong modp(long n, long p) {\nlong result = 1;\nlong base = 2;\n\nwhile (n > 0) {\n    if (n & 1) {\n        result = (result * base) % p;\n    }\n    base = (base * base) % p;\n    n = n >> 1;\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n// >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100), (101))\n// (1)\nlong modp(long n, long p) {\nlong result = 1;\nwhile(n > 0) {\n    if(n % 2 == 1) {\n        result = (result * 2) % p;\n    }\n    n = n / 2;\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n// >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100), (101))\n// (1)\nlong modp(long n, long p) {\n    long result = 1;\n    long base = 2;\n\n    while (n > 0) {\n        if (n & 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = n >> 1;\n    }\n\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n// >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100), (101))\n// (1)\nlong modp(long n, long p) {\nlong result = 1;\nlong base = 2;\nwhile (n > 0) {\n    if (n & 1) {\n        result = (result * base) % p;\n    }\n    base = (base * base) % p;\n    n = n >> 1;\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n// (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\nnum = abs(num); // take absolute value to handle negative numbers\nlong even_count = 0, odd_count = 0;\n\nwhile (num > 0) {\n    long digit = num % 10;\n    if (digit % 2 == 0) {\n        even_count++;\n    } else {\n        odd_count++;\n    }\n    num /= 10;\n}\n\nreturn std::make_tuple(even_count, odd_count);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n// (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\nnum = abs(num);\nlong even_count = 0, odd_count = 0;\nwhile (num > 0) {\n    long digit = num % 10;\n    if (digit % 2 == 0) {\n        even_count++;\n    } else {\n        odd_count++;\n    }\n    num /= 10;\n}\nreturn std::make_tuple(even_count, odd_count);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n// (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\nnum = std::abs(num);\nlong even_count = 0, odd_count = 0;\nwhile(num > 0) {\n    long digit = num % 10;\n    if(digit % 2 == 0) {\n        even_count++;\n    } else {\n        odd_count++;\n    }\n    num /= 10;\n}\nreturn std::make_tuple(even_count, odd_count);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n// (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\nnum = abs(num);\nlong even_count = 0, odd_count = 0;\nwhile(num > 0) {\n    long digit = num % 10;\n    if(digit % 2 == 0) {\n        even_count++;\n    } else {\n        odd_count++;\n    }\n    num /= 10;\n}\nreturn std::make_tuple(even_count, odd_count);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n// (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\nnum = abs(num);\nlong even_count = 0;\nlong odd_count = 0;\n\nwhile (num > 0) {\n    long digit = num % 10;\n    if (digit % 2 == 0) {\n        even_count++;\n    } else {\n        odd_count++;\n    }\n    num /= 10;\n}\n\nreturn std::make_tuple(even_count, odd_count);"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy((\"a\"))\n// (false)\n// >>> is_happy((\"aa\"))\n// (false)\n// >>> is_happy((\"abcd\"))\n// (true)\n// >>> is_happy((\"aabb\"))\n// (false)\n// >>> is_happy((\"adb\"))\n// (true)\n// >>> is_happy((\"xyy\"))\n// (false)\nbool is_happy(std::string s) {\nif (s.length() < 3) {\n    return false;\n}\n\nfor (int i = 0; i < s.length() - 2; i++) {\n    if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n        return false;\n    }\n}\n\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy((\"a\"))\n// (false)\n// >>> is_happy((\"aa\"))\n// (false)\n// >>> is_happy((\"abcd\"))\n// (true)\n// >>> is_happy((\"aabb\"))\n// (false)\n// >>> is_happy((\"adb\"))\n// (true)\n// >>> is_happy((\"xyy\"))\n// (false)\nbool is_happy(std::string s) {\nif (s.length() < 3) {\n    return false;\n}\n\nfor (int i = 0; i < s.length() - 2; i++) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n        return false;\n    }\n}\n\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy((\"a\"))\n// (false)\n// >>> is_happy((\"aa\"))\n// (false)\n// >>> is_happy((\"abcd\"))\n// (true)\n// >>> is_happy((\"aabb\"))\n// (false)\n// >>> is_happy((\"adb\"))\n// (true)\n// >>> is_happy((\"xyy\"))\n// (false)\nbool is_happy(std::string s) {\nif (s.length() < 3) {\n    return false;\n}\n\nfor (int i = 0; i < s.length() - 2; i++) {\n    if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n        return false;\n    }\n}\n\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy((\"a\"))\n// (false)\n// >>> is_happy((\"aa\"))\n// (false)\n// >>> is_happy((\"abcd\"))\n// (true)\n// >>> is_happy((\"aabb\"))\n// (false)\n// >>> is_happy((\"adb\"))\n// (true)\n// >>> is_happy((\"xyy\"))\n// (false)\nbool is_happy(std::string s) {\nif (s.length() < 3) {\n    return false;\n}\n\nfor (int i = 0; i < s.length() - 2; i++) {\n    if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n        return false;\n    }\n}\n\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy((\"a\"))\n// (false)\n// >>> is_happy((\"aa\"))\n// (false)\n// >>> is_happy((\"abcd\"))\n// (true)\n// >>> is_happy((\"aabb\"))\n// (false)\n// >>> is_happy((\"adb\"))\n// (true)\n// >>> is_happy((\"xyy\"))\n// (false)\nbool is_happy(std::string s) {\nif (s.length() < 3)\n    return false;\n\nfor (int i = 0; i < s.length() - 2; i++) {\n    if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n        return false;\n}\n\nreturn true;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n// (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long n) {\nlong maxPrime = -1;\n\n// Divide n by 2 until it is not divisible\nwhile (n % 2 == 0) {\n    maxPrime = 2;\n    n >>= 1; // equivalent to n /= 2\n}\n\n// n must be odd at this point, thus skip the even numbers and iterate only for odd\nfor (int i = 3; i <= sqrt(n); i += 2) {\n    while (n % i == 0) {\n        maxPrime = i;\n        n = n / i;\n    }\n}\n\n// This condition is to handle the case when n is a prime number greater than 2\nif (n > 2)\n    maxPrime = n;\n\nreturn maxPrime;\n",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n// (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long n) {\nlong maxPrime = -1;\n  \n    // Print the number of 2s that divide n\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n  \n    // n must be odd at this point, thus skip the even numbers and iterate only for odd\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n = n / i;\n        }\n    }\n  \n    // This condition is to handle the case when n is a prime number\n    // greater than 2\n    if (n > 2)\n        maxPrime = n;\n  \n    return maxPrime;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n// (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long n) {\nlong maxPrime = -1;\n\n// Divide n by 2 until n is odd\nwhile (n % 2 == 0) {\n    maxPrime = 2;\n    n >>= 1; // equivalent to n /= 2\n}\n\n// n must be odd at this point, thus skip the even numbers and iterate only for odd\nfor (int i = 3; i <= sqrt(n); i += 2) {\n    while (n % i == 0) {\n        maxPrime = i;\n        n = n / i;\n    }\n}\n\n// This condition is to handle the case when n is a prime number greater than 2\nif (n > 2)\n    maxPrime = n;\n\nreturn maxPrime;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n// (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long n) {\nlong maxPrime = -1;\n\n// Divide n by 2 until it's not divisible\nwhile (n % 2 == 0) {\n    maxPrime = 2;\n    n >>= 1; // equivalent to n /= 2\n}\n\n// n must be odd at this point, thus skip the even numbers and iterate only for odd\nfor (int i = 3; i <= sqrt(n); i += 2) {\n    while (n % i == 0) {\n        maxPrime = i;\n        n = n / i;\n    }\n}\n\n// This condition is to handle the case when n is a prime number\n// greater than 2\nif (n > 2)\n    maxPrime = n;\n\nreturn maxPrime;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n// (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long n) {\nlong maxPrime = -1;\n\n// Print the number of 2s that divide n\nwhile (n % 2 == 0) {\n    maxPrime = 2;\n    n >>= 1; // equivalent to n /= 2\n}\n\n// n must be odd at this point, thus skip the even numbers and iterate only for odd\nfor (int i = 3; i <= sqrt(n); i += 2) {\n    while (n % i == 0) {\n        maxPrime = i;\n        n = n / i;\n    }\n}\n\n// This condition is to handle the case when n is a prime number greater than 2\nif (n > 2)\n    maxPrime = n;\n\nreturn maxPrime;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"))\n// (153)\nlong digitSum(std::string s) {\nlong sum = 0;\nfor(char c : s) {\n    if(isupper(c)) {\n        sum += c;\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"))\n// (153)\nlong digitSum(std::string s) {\nlong sum = 0;\nfor (char c : s) {\n    if (isupper(c)) {\n        sum += c;\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"))\n// (153)\nlong digitSum(std::string s) {\nlong sum = 0;\nfor(char c : s) {\n    if(isupper(c)) {\n        sum += c;\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"))\n// (153)\nlong digitSum(std::string s) {\nlong sum = 0;\nfor(char c : s) {\n    if(c >= 'A' && c <= 'Z') {\n        sum += c;\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"))\n// (153)\nlong digitSum(std::string s) {\nlong sum = 0;\nfor(char c : s) {\n    if(isupper(c)) {\n        sum += c;\n    }\n}\nreturn sum;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n// (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n// Get the minimum and maximum values\nfloat min_val = *std::min_element(numbers.begin(), numbers.end());\nfloat max_val = *std::max_element(numbers.begin(), numbers.end());\n\n// Rescale the numbers\nfor (float &num : numbers) {\n    num = (num - min_val) / (max_val - min_val);\n}\n\nreturn numbers;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n// (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n// Find the minimum and maximum values in the vector\nauto min_max = std::minmax_element(numbers.begin(), numbers.end());\nfloat min_val = *min_max.first;\nfloat max_val = *min_max.second;\n\n// Subtract the minimum from all elements and divide by the range\nfor(auto& num : numbers) {\n    num = (num - min_val) / (max_val - min_val);\n}\n\nreturn numbers;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n// (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n// Find the minimum and maximum values in the vector\nfloat min_val = *std::min_element(numbers.begin(), numbers.end());\nfloat max_val = *std::max_element(numbers.begin(), numbers.end());\n\n// Rescale the numbers\nfor (auto &num : numbers) {\n    num = (num - min_val) / (max_val - min_val);\n}\n\nreturn numbers;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n// (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n// Check if the vector is empty\nif(numbers.empty()) return numbers;\n\n// Find the minimum and maximum values in the vector\nfloat min_val = *min_element(numbers.begin(), numbers.end());\nfloat max_val = *max_element(numbers.begin(), numbers.end());\n\n// Subtract the minimum value from all elements and divide by the range (max - min)\nfor(auto& num : numbers) {\n    num = (num - min_val) / (max_val - min_val);\n}\n\nreturn numbers;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n// (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n// Ensure the vector has at least two elements\n    assert(numbers.size() >= 2);\n\n    // Find the minimum and maximum values in the vector\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n\n    // Rescale the values in the vector\n    for (auto& num : numbers) {\n        num = (num - min_val) / (max_val - min_val);\n    }\n\n    return numbers;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n// (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24, (long)321})))\n// (0)\nlong solution(std::vector<long> lst) {\nlong sum = 0;\nfor (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0 && lst[i] % 2 != 0) {\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n// (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24, (long)321})))\n// (0)\nlong solution(std::vector<long> lst) {\nlong sum = 0;\nfor(int i = 0; i < lst.size(); i+=2){\n    if(lst[i] % 2 != 0){\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n// (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24, (long)321})))\n// (0)\nlong solution(std::vector<long> lst) {\nlong sum = 0;\nfor (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0 && lst[i] % 2 != 0) {\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n// (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24, (long)321})))\n// (0)\nlong solution(std::vector<long> lst) {\nlong sum = 0;\nfor (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0 && lst[i] % 2 != 0) {\n        sum += lst[i];\n    }\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n// (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24, (long)321})))\n// (0)\nlong solution(std::vector<long> lst) {\nlong sum = 0;\nfor(int i = 0; i < lst.size(); i++){\n    if(i % 2 == 0 && lst[i] % 2 != 0){\n        sum += lst[i];\n    }\n}\nreturn sum;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a vector, [ smalest_value, its index ],\n// If there are no even values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n// Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\nstd::vector<long> result;\n    long smallestEven = LONG_MAX;\n    int smallestIndex = -1;\n\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] < smallestEven){\n            smallestEven = arr[i];\n            smallestIndex = i;\n        }\n    }\n\n    if(smallestIndex != -1){\n        result.push_back(smallestEven);\n        result.push_back(smallestIndex);\n    }\n\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a vector, [ smalest_value, its index ],\n// If there are no even values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n// Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\nstd::vector<long> result;\nlong min = LONG_MAX;\nint index = -1;\n\nfor(int i = 0; i < arr.size(); i++) {\n    if(arr[i] % 2 == 0 && arr[i] < min) {\n        min = arr[i];\n        index = i;\n    }\n}\n\nif(index != -1) {\n    result.push_back(min);\n    result.push_back(index);\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a vector, [ smalest_value, its index ],\n// If there are no even values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n// Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\nstd::vector<long> result;\nlong minEven = LONG_MAX;\nint minIndex = -1;\n\nfor(int i = 0; i < arr.size(); i++) {\n    if(arr[i] % 2 == 0 && arr[i] < minEven) {\n        minEven = arr[i];\n        minIndex = i;\n    }\n}\n\nif(minIndex != -1) {\n    result.push_back(minEven);\n    result.push_back(minIndex);\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a vector, [ smalest_value, its index ],\n// If there are no even values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n// Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\nstd::vector<long> result;\n    long min_even = LONG_MAX;\n    long min_index = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_index != -1) {\n        result.push_back(min_even);\n        result.push_back(min_index);\n    }\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a vector, [ smalest_value, its index ],\n// If there are no even values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n// Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\n// Initialize smallest even value and its index\nlong smallestEven = LONG_MAX;\nlong index = -1;\n\n// Traverse through the vector\nfor (long i = 0; i < arr.size(); i++) {\n    // Check if the current value is even and less than the smallest even found so far\n    if (arr[i] % 2 == 0 && arr[i] < smallestEven) {\n        smallestEven = arr[i];\n        index = i;\n    }\n}\n\n// If no even number was found, return an empty vector\nif (index == -1) {\n    return std::vector<long>();\n}\n\n// Return the smallest even number and its index\nreturn std::vector<long>({smallestEven, index});"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive integer n. You have to create an integer vector a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) {\n// First, create the vector a\nstd::vector<long> a(n);\nfor (long i = 1; i <= n; ++i) {\n    a[i-1] = i * i - i + 1;\n}\n\n// Then, count the number of elements of a that are 0, 1, or 2 modulo 3\nstd::vector<long> counts(3, 0);\nfor (long i = 0; i < n; ++i) {\n    counts[a[i] % 3]++;\n}\n\n// The number of valid triples is counts[0] * (counts[0] - 1) * (counts[0] - 2) / 6\n// (all three elements are 0 modulo 3)\n// plus counts[0] * (counts[1]) * (counts[2]) / 6\n// (one element is 0 modulo 3, one is 1 modulo 3, and one is 2 modulo 3)\nreturn counts[0] * (counts[0] - 1) * (counts[0] - 2) / 6\n     + counts[0] * counts[1] * counts[2]; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive integer n. You have to create an integer vector a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) {\n    std::vector<long> a(n+1);\n    for(long i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive integer n. You have to create an integer vector a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) {\nstd::vector<long> a(n);\nfor (long i = 1; i <= n; i++) {\n    a[i-1] = i * i - i + 1;\n}\n\nlong count = 0;\nfor (long i = 0; i < n; i++) {\n    for (long j = i + 1; j < n; j++) {\n        for (long k = j + 1; k < n; k++) {\n            if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                count++;\n            }\n        }\n    }\n}\n\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive integer n. You have to create an integer vector a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) {\nstd::vector<long> a(n);\nfor (long i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n}\n\nlong count = 0;\nfor (long i = 0; i < n; i++) {\n    for (long j = i + 1; j < n; j++) {\n        for (long k = j + 1; k < n; k++) {\n            if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                count++;\n            }\n        }\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive integer n. You have to create an integer vector a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; ++i) {\n        a[i] = i * i - i + 1;\n    }\n\n    long count = 0;\n    for (long i = 0; i < n; ++i) {\n        for (long j = i + 1; j < n; ++j) {\n            for (long k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    ++count;\n                }\n            }\n        }\n    }\n\n    return count;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this problem, you will implement a function that takes two vectors of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a vector of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (\"YES\")\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4})))\n// (\"NO\")\n// It is assumed that the input vectors will be non-empty.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\nint odd_count1 = 0, even_count2 = 0;\n\n// Count odd numbers in lst1\nfor(auto num : lst1) {\n    if(num % 2 != 0) {\n        odd_count1++;\n    }\n}\n\n// Count even numbers in lst2\nfor(auto num : lst2) {\n    if(num % 2 == 0) {\n        even_count2++;\n    }\n}\n\n// If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\nif(odd_count1 <= even_count2) {\n    return \"YES\";\n} else {\n    return \"NO\";\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this problem, you will implement a function that takes two vectors of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a vector of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (\"YES\")\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4})))\n// (\"NO\")\n// It is assumed that the input vectors will be non-empty.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\nint oddCount1 = 0, evenCount2 = 0;\n\n// Count the number of odd numbers in lst1\nfor(long num : lst1) {\n    if(num % 2 != 0) {\n        oddCount1++;\n    }\n}\n\n// Count the number of even numbers in lst2\nfor(long num : lst2) {\n    if(num % 2 == 0) {\n        evenCount2++;\n    }\n}\n\n// If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2,\n// it is possible to exchange elements to make lst1 a vector of only even numbers.\nif(oddCount1 <= evenCount2) {\n    return \"YES\";\n}\nelse {\n    return \"NO\";\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this problem, you will implement a function that takes two vectors of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a vector of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (\"YES\")\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4})))\n// (\"NO\")\n// It is assumed that the input vectors will be non-empty.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\nint oddCount1 = 0, evenCount2 = 0;\n\nfor (long num : lst1) {\n    if (num % 2 != 0) {\n        oddCount1++;\n    }\n}\n\nfor (long num : lst2) {\n    if (num % 2 == 0) {\n        evenCount2++;\n    }\n}\n\nif (evenCount2 >= oddCount1) {\n    return \"YES\";\n} else {\n    return \"NO\";\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this problem, you will implement a function that takes two vectors of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a vector of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (\"YES\")\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4})))\n// (\"NO\")\n// It is assumed that the input vectors will be non-empty.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\nint oddCount1 = 0, evenCount2 = 0;\n\nfor(auto num : lst1) {\n    if(num % 2 != 0) {\n        oddCount1++;\n    }\n}\n\nfor(auto num : lst2) {\n    if(num % 2 == 0) {\n        evenCount2++;\n    }\n}\n\nif(oddCount1 <= evenCount2) {\n    return \"YES\";\n}\nelse {\n    return \"NO\";\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this problem, you will implement a function that takes two vectors of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a vector of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (\"YES\")\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4})))\n// (\"NO\")\n// It is assumed that the input vectors will be non-empty.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\nint oddCount1 = 0;\nint evenCount2 = 0;\n\n// Count the number of odd numbers in lst1\nfor (long num : lst1) {\n    if (num % 2 != 0) {\n        oddCount1++;\n    }\n}\n\n// Count the number of even numbers in lst2\nfor (long num : lst2) {\n    if (num % 2 == 0) {\n        evenCount2++;\n    }\n}\n\n// If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2\n// then it is possible to exchange elements to make lst1 a vector of only even numbers\nif (oddCount1 <= evenCount2) {\n    return \"YES\";\n} else {\n    return \"NO\";\n}\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0f)\nfloat median(std::vector<long> l) {\n// Sort the vector\nstd::sort(l.begin(), l.end());\n\n// Calculate the median\nif (l.size() % 2 == 0) {\n    return (l[l.size()/2 - 1] + l[l.size()/2]) / 2.0;\n} else {\n    return l[l.size()/2];\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0f)\nfloat median(std::vector<long> l) {\nstd::sort(l.begin(), l.end());\nint n = l.size();\nif (n % 2 == 0) {\n    return float(l[n / 2 - 1] + l[n / 2]) / 2.0;\n} else {\n    return float(l[n / 2]);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0f)\nfloat median(std::vector<long> l) {\n// Sort the vector\nstd::sort(l.begin(), l.end());\n\n// Check if the size of the vector is even\nif (l.size() % 2 == 0) {\n    return (l[l.size()/2 - 1] + l[l.size()/2]) / 2.0;\n} else {\n    return l[l.size()/2];\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0f)\nfloat median(std::vector<long> l) {\n// Sort the vector\nstd::sort(l.begin(), l.end());\n\n// Check if the size of the vector is even or odd\nif (l.size() % 2 != 0) {\n    return (float)l[l.size() / 2];\n} else {\n    return (float)(l[(l.size() - 1) / 2] + l[l.size() / 2]) / 2.0;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0f)\nfloat median(std::vector<long> l) {\n// Sort the vector\nstd::sort(l.begin(), l.end());\n\n// Calculate the median\nif (l.size() % 2 == 0) {\n    // If the size of the vector is even, the median is the average of the two middle numbers\n    return (l[l.size()/2 - 1] + l[l.size()/2]) / 2.0;\n} else {\n    // If the size of the vector is odd, the median is the middle number\n    return l[l.size()/2];\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length((\"Hello\"))\n// (true)\n// >>> prime_length((\"abcdcba\"))\n// (true)\n// >>> prime_length((\"kittens\"))\n// (true)\n// >>> prime_length((\"orange\"))\n// (false)\nbool prime_length(std::string string) {\nint n = string.length();\nif (n <= 1) return false;\nfor (int i = 2; i * i <= n; i++) {\n    if (n % i == 0) return false;\n}\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length((\"Hello\"))\n// (true)\n// >>> prime_length((\"abcdcba\"))\n// (true)\n// >>> prime_length((\"kittens\"))\n// (true)\n// >>> prime_length((\"orange\"))\n// (false)\nbool prime_length(std::string string) {\nint length = string.length();\nif(length < 2) return false;\nfor(int i = 2; i * i <= length; i++) {\n    if(length % i == 0) return false;\n}\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length((\"Hello\"))\n// (true)\n// >>> prime_length((\"abcdcba\"))\n// (true)\n// >>> prime_length((\"kittens\"))\n// (true)\n// >>> prime_length((\"orange\"))\n// (false)\nbool prime_length(std::string string) {\nint length = string.length();\nif(length <= 1) return false;\nfor(int i = 2; i * i <= length; i++) {\n    if(length % i == 0) return false;\n}\nreturn true; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length((\"Hello\"))\n// (true)\n// >>> prime_length((\"abcdcba\"))\n// (true)\n// >>> prime_length((\"kittens\"))\n// (true)\n// >>> prime_length((\"orange\"))\n// (false)\nbool prime_length(std::string string) {\nint n = string.length();\nif (n <= 1) return false;\nif (n == 2) return true;\nif (n % 2 == 0) return false;\nfor (int i = 3; i * i <= n; i += 2) {\n    if (n % i == 0) return false;\n}\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length((\"Hello\"))\n// (true)\n// >>> prime_length((\"abcdcba\"))\n// (true)\n// >>> prime_length((\"kittens\"))\n// (true)\n// >>> prime_length((\"orange\"))\n// (false)\nbool prime_length(std::string string) {\nint length = string.length();\nif(length < 2) return false;\nfor(int i = 2; i*i <= length; i++) {\n    if(length % i == 0) return false;\n}\nreturn true;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers, find the minimum number of elements that\n// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long> arr) {\nlong changes = 0;\nint i = 0, j = arr.size() - 1;\nwhile(i < j) {\n    if(arr[i] != arr[j]) {\n        changes++;\n    }\n    i++;\n    j--;\n}\nreturn changes;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers, find the minimum number of elements that\n// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long> arr) {\nlong start = 0;\nlong end = arr.size() - 1;\nlong changes = 0;\n\nwhile (start <= end) {\n    if (arr[start] != arr[end]) {\n        changes++;\n    }\n    start++;\n    end--;\n}\n\nreturn changes;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers, find the minimum number of elements that\n// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long> arr) {\nlong changes = 0;\nint start = 0;\nint end = arr.size()-1;\nwhile(start < end) {\n    if(arr[start] != arr[end]) {\n        changes++;\n    }\n    start++;\n    end--;\n}\nreturn changes;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers, find the minimum number of elements that\n// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long> arr) {\nlong changes = 0;\nint i = 0, j = arr.size() - 1;\n\nwhile(i < j) {\n    if(arr[i] != arr[j]) {\n        changes++;\n    }\n    i++;\n    j--;\n}\n\nreturn changes;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers, find the minimum number of elements that\n// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long> arr) {\nlong changes = 0;\nfor(int i = 0, j = arr.size()-1; i < j; i++, j--){\n    if(arr[i] != arr[j]){\n        changes++;\n    }\n}\nreturn changes;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of numbers.\n// You need to return the sum of squared numbers in the given vector,\n// round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n// >>> lst((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})))\n// (14)\n// >>> lst((std::vector<float>({(float)1.0f, (float)4.0f, (float)9.0f})))\n// (98)\n// >>> lst((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n// (84)\n// >>> lst((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f})))\n// (29)\n// >>> lst((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f})))\n// (6)\nlong sum_squares(std::vector<float> lst) {\nlong sum = 0;\nfor(auto &num : lst){\n    int ceilNum = std::ceil(num);\n    sum += ceilNum * ceilNum;\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of numbers.\n// You need to return the sum of squared numbers in the given vector,\n// round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n// >>> lst((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})))\n// (14)\n// >>> lst((std::vector<float>({(float)1.0f, (float)4.0f, (float)9.0f})))\n// (98)\n// >>> lst((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n// (84)\n// >>> lst((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f})))\n// (29)\n// >>> lst((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f})))\n// (6)\nlong sum_squares(std::vector<float> lst) {\nlong sum = 0;\nfor(auto &i : lst){\n    int ceil_val = std::ceil(i);\n    sum += ceil_val * ceil_val;\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of numbers.\n// You need to return the sum of squared numbers in the given vector,\n// round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n// >>> lst((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})))\n// (14)\n// >>> lst((std::vector<float>({(float)1.0f, (float)4.0f, (float)9.0f})))\n// (98)\n// >>> lst((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n// (84)\n// >>> lst((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f})))\n// (29)\n// >>> lst((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f})))\n// (6)\nlong sum_squares(std::vector<float> lst) {\nlong sum = 0;\nfor(auto &num : lst) {\n    int ceil_num = std::ceil(num);\n    sum += ceil_num * ceil_num;\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of numbers.\n// You need to return the sum of squared numbers in the given vector,\n// round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n// >>> lst((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})))\n// (14)\n// >>> lst((std::vector<float>({(float)1.0f, (float)4.0f, (float)9.0f})))\n// (98)\n// >>> lst((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n// (84)\n// >>> lst((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f})))\n// (29)\n// >>> lst((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f})))\n// (6)\nlong sum_squares(std::vector<float> lst) {\nlong sum = 0;\nfor(auto &num : lst) {\n    long ceilNum = std::ceil(num);\n    sum += ceilNum * ceilNum;\n}\nreturn sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of numbers.\n// You need to return the sum of squared numbers in the given vector,\n// round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n// >>> lst((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})))\n// (14)\n// >>> lst((std::vector<float>({(float)1.0f, (float)4.0f, (float)9.0f})))\n// (98)\n// >>> lst((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n// (84)\n// >>> lst((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f})))\n// (29)\n// >>> lst((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f})))\n// (6)\nlong sum_squares(std::vector<float> lst) {\nlong sum = 0;\nfor (auto& num : lst) {\n    long ceiling_num = std::ceil(num);\n    sum += ceiling_num * ceiling_num;\n}\nreturn sum;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name) {\nint count_digits = 0, count_dots = 0;\nstd::string valid_extensions[] = {\"txt\", \"exe\", \"dll\"};\nstd::string name, extension;\n\n// Count digits and dots in the file name\nfor (char c : file_name) {\n    if (isdigit(c)) count_digits++;\n    if (c == '.') count_dots++;\n}\n\n// If there are more than three digits or not exactly one dot, return \"No\"\nif (count_digits > 3 || count_dots != 1) return \"No\";\n\n// Split the file name into name and extension\nsize_t dot_position = file_name.find('.');\nname = file_name.substr(0, dot_position);\nextension = file_name.substr(dot_position + 1);\n\n// Check if the name is not empty and starts with a letter\nif (name.empty() || !isalpha(name[0])) return \"No\";\n\n// Check if the extension is valid\nfor (const std::string &valid_extension : valid_extensions) {\n    if (extension == valid_extension) return \"Yes\";\n}\n\n// If none of the conditions are met, return \"No\"\nreturn \"No\";",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name) {\nstd::string validExtensions[] = {\"txt\", \"exe\", \"dll\"};\nint digitCount = 0;\nsize_t dotPos = file_name.find('.');\n\nif (dotPos == std::string::npos || dotPos == 0 || !isalpha(file_name[0])) {\n    return \"No\";\n}\n\nstd::string prefix = file_name.substr(0, dotPos);\nstd::string extension = file_name.substr(dotPos + 1);\n\nfor (char ch : prefix) {\n    if (isdigit(ch)) {\n        digitCount++;\n    }\n    if (digitCount > 3) {\n        return \"No\";\n    }\n}\n\nfor (std::string validExtension : validExtensions) {\n    if (extension == validExtension) {\n        return \"Yes\";\n    }\n}\n\nreturn \"No\";\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name) {\nint count_digits = 0;\nint count_dots = 0;\nstd::string valid_extensions[] = {\"txt\", \"exe\", \"dll\"};\n\n// Count the digits and dots in the file name\nfor (char c : file_name) {\n    if (isdigit(c)) count_digits++;\n    if (c == '.') count_dots++;\n}\n\n// If there are more than 3 digits or not exactly one dot, return \"No\"\nif (count_digits > 3 || count_dots != 1) return \"No\";\n\n// Split the name into base and extension\nstd::string base = file_name.substr(0, file_name.find('.'));\nstd::string extension = file_name.substr(file_name.find('.') + 1);\n\n// If the base is empty or does not start with a letter, return \"No\"\nif (base.empty() || !isalpha(base[0])) return \"No\";\n\n// If the extension is not one of the valid ones, return \"No\"\nif (std::find(std::begin(valid_extensions), std::end(valid_extensions), extension) == std::end(valid_extensions)) return \"No\";\n\n// If all checks passed, return \"Yes\"\nreturn \"Yes\";",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name) {\nint count_digits = 0;\nint count_dots = 0;\nstd::string extensions[3] = {\"txt\", \"exe\", \"dll\"};\n\n// Count digits and dots in the file name\nfor (char c : file_name) {\n    if (isdigit(c)) {\n        count_digits++;\n    }\n    if (c == '.') {\n        count_dots++;\n    }\n}\n\n// Check if the file name contains more than three digits or more than one dot\nif (count_digits > 3 || count_dots != 1) {\n    return \"No\";\n}\n\n// Split the file name into name and extension\nstd::string name = file_name.substr(0, file_name.find('.'));\nstd::string extension = file_name.substr(file_name.find('.') + 1);\n\n// Check if the name is empty or does not start with a letter\nif (name.empty() || !isalpha(name[0])) {\n    return \"No\";\n}\n\n// Check if the extension is one of the valid extensions\nfor (std::string ext : extensions) {\n    if (extension == ext) {\n        return \"Yes\";\n    }\n}\n\nreturn \"No\";",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name) {\nint dotCount = 0, digitCount = 0;\nstd::string extensions[3] = {\"txt\", \"exe\", \"dll\"};\n\n// Check each character in the file name\nfor (char c : file_name) {\n    if (c == '.') {\n        dotCount++;\n    } else if (isdigit(c)) {\n        digitCount++;\n    }\n}\n\n// Check conditions\nif (dotCount != 1 || digitCount > 3) {\n    return \"No\";\n}\n\n// Split the file name into name and extension\nstd::string name = file_name.substr(0, file_name.find('.'));\nstd::string extension = file_name.substr(file_name.find('.') + 1);\n\n// Check if the name starts with a letter\nif (!isalpha(name[0])) {\n    return \"No\";\n}\n\n// Check if the extension is valid\nif (std::find(std::begin(extensions), std::end(extensions), extension) == std::end(extensions)) {\n    return \"No\";\n}\n\nreturn \"Yes\";"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are three distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n// Sort the vector\nstd::sort(l.begin(), l.end());\n\nfor (int i = 0; i < l.size() - 2; i++) {\n    // To find the other two elements, start two index variables\n    // j from i+1 and k from the end of the vector\n    int j = i + 1;\n    int k = l.size() - 1;\n\n    while (j < k) {\n        // If sum of current triplet is more or less, \n        // move j or k accordingly\n        if (l[i] + l[j] + l[k] == 0) {\n            return true;\n        }\n        else if (l[i] + l[j] + l[k] < 0) {\n            j++;\n        }\n        else {\n            k--;\n        }\n    }\n}\n\n// If we reach here, then no triplet was found\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are three distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n// Sort the vector\nstd::sort(l.begin(), l.end());\n\nfor (int i = 0; i < l.size() - 2; i++) {\n    // To find the other two elements, start two index variables \n    // from two corners of the array and move them toward each other \n    int start = i + 1, end = l.size() - 1; \n    while (start < end) { \n        if (l[i] + l[start] + l[end] == 0) {\n            return true; \n        }\n        else if (l[i] + l[start] + l[end] < 0) {\n            start++; \n        }\n        else { // A[i] + A[lo] + A[hi] > sum \n            end--; \n        } \n    } \n} \n// If no triplet with 0 sum found in array \nreturn false; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are three distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n// Sort the vector\nstd::sort(l.begin(), l.end());\n\n// Iterate through the vector\nfor (int i = 0; i < l.size() - 2; i++) {\n    // Use two pointers to find if there is a pair whose sum equals to the negative of the current element\n    int left = i + 1;\n    int right = l.size() - 1;\n    while (left < right) {\n        long sum = l[i] + l[left] + l[right];\n        if (sum == 0) {\n            return true;\n        } else if (sum < 0) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n}\n\n// If no such triplet is found, return false\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are three distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n// Sort the vector\nstd::sort(l.begin(), l.end());\n\nfor(int i = 0; i < l.size() - 2; i++) {\n    // Two pointers\n    int start = i + 1;\n    int end = l.size() - 1;\n\n    while(start < end) {\n        long sum = l[i] + l[start] + l[end];\n        // If sum of elements at current pointers and i is zero, we found the triple\n        if(sum == 0) {\n            return true;\n        } else if(sum < 0) {\n            // If sum is less than zero, increment the start pointer\n            start++;\n        } else {\n            // If sum is more than zero, decrement the end pointer\n            end--;\n        }\n    }\n}\n// If no triple sum to zero found, return false\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are three distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n// Sort the vector\nstd::sort(l.begin(), l.end());\n\nfor (int i = 0; i < l.size() - 2; i++) {\n    // To find the other two elements, start two index variables\n    // from two corners of the array and move them toward each other\n    int left = i + 1; // index of the first element in the remaining elements\n    int right = l.size() - 1; // index of the last element\n    \n    while (left < right) {\n        if (l[i] + l[left] + l[right] == 0) {\n            // If sum of elements at index i, left and right is zero then found three elements\n            return true;\n        }\n        else if (l[i] + l[left] + l[right] < 0) {\n            // If sum is less than 0, then increase the left corner\n            left++;\n        }\n        else {\n            // If sum is greater than 0, then decrease the right corner\n            right--;\n        }\n    }\n}\n\n// If no triplet with 0 sum found in array\nreturn false;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n// (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\nlong start1 = std::get<0>(interval1);\nlong end1 = std::get<1>(interval1);\nlong start2 = std::get<0>(interval2);\nlong end2 = std::get<1>(interval2);\n\nlong start = std::max(start1, start2);\nlong end = std::min(end1, end2);\n\nif (end < start) {\n    return \"NO\";\n}\n\nlong length = end - start + 1;\n\nif (length < 2) {\n    return \"NO\";\n}\n\nfor (long i = 2; i * i <= length; i++) {\n    if (length % i == 0) {\n        return \"NO\";\n    }\n}\n\nreturn \"YES\";\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n// (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\n    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\n    if (start > end) {\n        return \"NO\";\n    }\n\n    long length = end - start + 1;\n\n    if (length < 2) {\n        return \"NO\";\n    }\n\n    for (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\n    return \"YES\";\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n// (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n// Find the intersection of the two intervals\n    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\n    // If the intervals do not intersect, return \"NO\"\n    if (start > end) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    long length = end - start + 1;\n\n    // If the length is less than 2, it is not a prime number\n    if (length < 2) {\n        return \"NO\";\n    }\n\n    // Check if the length is a prime number\n    for (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\n    // If none of the above conditions are met, the length is a prime number\n    return \"YES\";\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n// (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\n    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\n    if (start > end) {\n        return \"NO\";\n    }\n\n    long length = end - start + 1;\n\n    if (length < 2) {\n        return \"NO\";\n    }\n\n    for (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\n    return \"YES\";\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n// (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\n    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\n    if (start > end) {\n        return \"NO\";\n    }\n\n    long intersection_length = end - start + 1;\n\n    if (intersection_length < 2) {\n        return \"NO\";\n    }\n\n    for (long i = 2; i * i <= intersection_length; i++) {\n        if (intersection_length % i == 0) {\n            return \"NO\";\n        }\n    }\n\n    return \"YES\";\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the vector of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\nstd::vector<std::string> result;\nstd::string temp;\nint open = 0;\n\nfor (char c : paren_string) {\n    if (c == ' ') continue;\n    temp += c;\n\n    if (c == '(') open++;\n    else if (c == ')') open--;\n\n    if (open == 0) {\n        result.push_back(temp);\n        temp.clear();\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the vector of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\nstd::vector<std::string> result;\nstd::string temp;\nint open = 0;\n\nfor (char c : paren_string) {\n    if (c == ' ') continue; // ignore spaces\n    if (c == '(') {\n        open++;\n        temp.push_back(c);\n    }\n    else if (c == ')') {\n        open--;\n        temp.push_back(c);\n        if (open == 0) {\n            result.push_back(temp);\n            temp.clear();\n        }\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the vector of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\nstd::vector<std::string> result;\nstd::string temp;\nint open = 0;\n\nfor (char c : paren_string) {\n    if (c == ' ') continue;\n    temp += c;\n    if (c == '(') open++;\n    else if (c == ')') open--;\n    if (open == 0) {\n        result.push_back(temp);\n        temp.clear();\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the vector of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\nstd::vector<std::string> result;\nstd::string temp;\nint open_count = 0;\n\nfor (char c : paren_string) {\n    if (c == ' ') continue;\n    if (c == '(') {\n        open_count++;\n    } else if (c == ')') {\n        open_count--;\n    }\n    temp.push_back(c);\n    if (open_count == 0) {\n        result.push_back(temp);\n        temp.clear();\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the vector of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\nstd::vector<std::string> groups;\nstd::string group;\nint open = 0;\n\nfor (char c : paren_string) {\n    if (c == ' ') continue;\n    if (c == '(') {\n        open++;\n    } else if (c == ')') {\n        open--;\n    }\n    group += c;\n    if (open == 0) {\n        groups.push_back(group);\n        group.clear();\n    }\n}\n\nreturn groups;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0, (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\nstd::vector<long> result;\nfor(size_t i = 0; i < game.size(); i++) {\n    result.push_back(abs(game[i] - guess[i]));\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0, (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\nstd::vector<long> result;\nfor (size_t i = 0; i < game.size(); i++) {\n    result.push_back(abs(game[i] - guess[i]));\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0, (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\nstd::vector<long> result;\nfor (int i = 0; i < game.size(); i++) {\n    result.push_back(abs(game[i] - guess[i]));\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0, (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\nstd::vector<long> result;\nfor (size_t i = 0; i < game.size(); i++) {\n    result.push_back(std::abs(game[i] - guess[i]));\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0, (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\nstd::vector<long> result;\nfor (size_t i = 0; i < game.size(); i++) {\n    result.push_back(abs(game[i] - guess[i]));\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) {\n// If n is 1, there is only one 1-digit number that starts and ends with 1, which is 1 itself\nif(n == 1) return 1;\n\n// For n-digit numbers starting or ending with 1, there are 2*10^(n-1) such numbers\n// 10^(n-1) for numbers starting with 1 and 10^(n-1) for numbers ending with 1\n// But this counts twice the numbers which start and end with 1\n// There are 10^(n-2) such numbers\n// So, subtract these from the total count\nreturn 2*pow(10, n-1) - pow(10, n-2);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) {\n// If n is 1, the numbers are 1, 2, 3, ..., 9. So the count is 1.\nif (n == 1) {\n    return 1;\n}\n\n// If n is greater than 1, the numbers are 10, 11, 12, ..., 19, 21, 31, ..., 91, 101, 111, ..., 191, 201, ..., 991, ...\n// The count of such numbers is 2 * (10^(n-1)) because we have 10 possibilities (0-9) for each digit except the first and last one.\nreturn 2 * pow(10, n - 1);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) {\nif(n == 1) {\n    return 1;\n}\nelse {\n    return 2 * pow(10, n-1);\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) {\n// If n is 1, there is only one digit number that starts or ends with 1, which is 1 itself.\nif (n == 1) {\n    return 1;\n}\n\n// For n-digit numbers, there are 10^(n-1) possible numbers.\n// But we need to subtract the count of numbers that start and end with 0.\n// Since a number cannot start with 0, there are 9 * 10^(n-2) numbers that start with non-zero digit and end with 0.\n// So, the count of n-digit numbers that start or end with 1 is 10^(n-1) - 9 * 10^(n-2).\n// But we have counted twice the numbers that start and end with 1.\n// There are 10^(n-2) such numbers.\n// So, we add back these numbers to the count.\n\nlong count = pow(10, n-1) - 9 * pow(10, n-2) + pow(10, n-2);\nreturn count;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) {\nif(n == 1) return 1;\nelse return 2 * pow(10, n - 1); \n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter((\"apple pie\"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"apple pi e\"))\n// (true)\n// >>> check_if_last_char_is_a_letter((\"apple pi e \"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"\"))\n// (false)\nbool check_if_last_char_is_a_letter(std::string txt) {\n// Check if the string is empty\nif(txt.empty())\n    return false;\n\n// Get the last character of the string\nchar lastChar = txt[txt.length() - 1];\n\n// Check if the last character is a space\nif(lastChar == ' ')\n    return false;\n\n// Check if the last character is a letter\nif(!isalpha(lastChar))\n    return false;\n\n// Check if the character before the last character is a space\nif(txt[txt.length() - 2] == ' ')\n    return true;\n\nreturn false; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter((\"apple pie\"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"apple pi e\"))\n// (true)\n// >>> check_if_last_char_is_a_letter((\"apple pi e \"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"\"))\n// (false)\nbool check_if_last_char_is_a_letter(std::string txt) {\n// Check if string is empty\n    if(txt.empty())\n        return false;\n\n    // Get the last character\n    char lastChar = txt[txt.length() - 1];\n\n    // Check if the last character is a space\n    if(lastChar == ' ')\n        return false;\n\n    // Check if the last character is an alphabetical character\n    if(isalpha(lastChar)) {\n        // Check if the character before the last character is a space\n        if(txt.length() > 1 && txt[txt.length() - 2] == ' ')\n            return true;\n    }\n\n    return false;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter((\"apple pie\"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"apple pi e\"))\n// (true)\n// >>> check_if_last_char_is_a_letter((\"apple pi e \"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"\"))\n// (false)\nbool check_if_last_char_is_a_letter(std::string txt) {\n// Check if string is empty\nif(txt.empty()) return false;\n\n// Check if last character is a space\nif(txt.back() == ' ') return false;\n\n// Check if last character is a letter\nif(isalpha(txt.back())) {\n    // Check if the character before last is a space or the start of the string\n    if(txt.size() == 1 || txt[txt.size()-2] == ' ') return true;\n}\n\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter((\"apple pie\"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"apple pi e\"))\n// (true)\n// >>> check_if_last_char_is_a_letter((\"apple pi e \"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"\"))\n// (false)\nbool check_if_last_char_is_a_letter(std::string txt) {\nif (txt.empty()) {\n    return false;\n}\n\nchar lastChar = txt.back();\n\nif (lastChar == ' ') {\n    return false;\n}\n\nreturn isalpha(lastChar);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter((\"apple pie\"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"apple pi e\"))\n// (true)\n// >>> check_if_last_char_is_a_letter((\"apple pi e \"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"\"))\n// (false)\nbool check_if_last_char_is_a_letter(std::string txt) {\n// check if string is empty\nif(txt.empty()) {\n    return false;\n}\n\n// get the last character of the string\nchar lastChar = txt[txt.length() - 1];\n\n// check if the last character is an alphabetical character and not a space\nif(isalpha(lastChar) && txt[txt.length() - 2] == ' ') {\n    return true;\n} else {\n    return false;\n}\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n// >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"))\n// (false)\nbool valid_date(std::string date) {\n// Check if date string is empty\n    if(date.empty()) return false;\n\n    // Check if date format is correct\n    if(date[2] != '-' || date[5] != '-' || date.size() != 10) return false;\n\n    // Extract day, month and year from date string\n    int day = std::stoi(date.substr(3,2));\n    int month = std::stoi(date.substr(0,2));\n    int year = std::stoi(date.substr(6,4));\n\n    // Check if month is valid\n    if(month < 1 || month > 12) return false;\n\n    // Check if day is valid\n    if(day < 1 || day > 31) return false;\n\n    // Check if day is valid for specific month\n    if((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) return false;\n\n    // Check if day is valid for February\n    if(month == 2) {\n        // Check for leap year\n        if((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n            if(day > 29) return false;\n        } else {\n            if(day > 28) return false;\n        }\n    }\n\n    // If all checks passed, return true\n    return true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n// >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"))\n// (false)\nbool valid_date(std::string date) {\n// Check if the date string is empty\nif(date.empty()) return false;\n\n// Check the date format\nif(date[2] != '-' || date[5] != '-' || date.size() != 10) return false;\n\n// Extract the day, month and year\nint day = std::stoi(date.substr(3,2));\nint month = std::stoi(date.substr(0,2));\nint year = std::stoi(date.substr(6,4));\n\n// Check if the month is valid\nif(month < 1 || month > 12) return false;\n\n// Check if the day is valid\nif(day < 1 || day > 31) return false;\n\n// Check if the day is valid for the specific month\nif((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) return false;\nif(month == 2 && day > 29) return false;\n\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n// >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"))\n// (false)\nbool valid_date(std::string date) {\n// Check if date string is empty\nif (date.empty()) {\n    return false;\n}\n\n// Check if date string is in correct format\nif (date.size() != 10 || date[2] != '-' || date[5] != '-') {\n    return false;\n}\n\n// Extract day, month and year from date string\nint day = stoi(date.substr(3, 2));\nint month = stoi(date.substr(0, 2));\nint year = stoi(date.substr(6, 4));\n\n// Check if month is valid\nif (month < 1 || month > 12) {\n    return false;\n}\n\n// Check if day is valid\nif (day < 1 || ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31) || ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) || (month == 2 && day > 29)) {\n    return false;\n}\n\n// If all checks pass, return true\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n// >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"))\n// (false)\nbool valid_date(std::string date) {\n// Check if date string is not empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if date string is in the format: mm-dd-yyyy\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n\n    // Extract day, month and year from date string\n    int day = std::stoi(date.substr(3, 2));\n    int month = std::stoi(date.substr(0, 2));\n    int year = std::stoi(date.substr(6, 4));\n\n    // Check if month is not less than 1 or higher than 12\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check if day is not less than 1 or higher than 31, 30 or 29 depending on the month\n    if (month == 2) {\n        // Check for leap year\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 28) {\n                return false;\n            }\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    return true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n// >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"))\n// (false)\nbool valid_date(std::string date) {\n// Check if the string is empty\n    if (date.empty()) return false;\n\n    // Check if the string is in the correct format\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') return false;\n\n    // Extract the day, month and year from the date string\n    int day = std::stoi(date.substr(3, 2));\n    int month = std::stoi(date.substr(0, 2));\n    int year = std::stoi(date.substr(6, 4));\n\n    // Check if the month is valid\n    if (month < 1 || month > 12) return false;\n\n    // Check if the day is valid\n    if (day < 1 || day > 31) return false;\n\n    // Check if the day is valid for the specific month\n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) return false;\n\n    // Check if the day is valid for February\n    if (month == 2) {\n        // Check for leap year\n        if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n            if (day > 29) return false;\n        } else {\n            if (day > 28) return false;\n        }\n    }\n\n    // If all checks passed, the date is valid\n    return true;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums which takes a vector of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1, (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1, (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\nlong count = 0;\nfor(auto num : arr) {\n    long sum = 0;\n    while(num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    if(sum > 0) {\n        count++;\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums which takes a vector of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1, (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1, (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\nlong count = 0;\nfor(auto num : arr) {\n    long sum = 0;\n    while(num) {\n        sum += num % 10;\n        num /= 10;\n    }\n    if(sum > 0) {\n        ++count;\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums which takes a vector of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1, (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1, (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\nlong count = 0;\nfor (long num : arr) {\n    long sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    if (sum > 0) {\n        count++;\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums which takes a vector of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1, (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1, (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\nlong count = 0;\nfor(auto num : arr) {\n    long sum = 0;\n    while(num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    if(sum > 0)\n        count++;\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums which takes a vector of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1, (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1, (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\nlong count = 0;\n\nfor(auto num : arr) {\n    long sum = 0;\n    while(num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    if(sum > 0) {\n        count++;\n    }\n}\n\nreturn count;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle((\"Hi\"))\n// (\"Hi\")\n// >>> anti_shuffle((\"hello\"))\n// (\"ehllo\")\n// >>> anti_shuffle((\"Hello World!!!\"))\n// (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\nstd::string result = \"\";\nstd::stringstream ss(s);\nstd::string word;\n\nwhile (ss >> word) {\n    std::sort(word.begin(), word.end());\n    result += word + \" \";\n}\n\n// Remove the trailing space\nif (!result.empty()) {\n    result.pop_back();\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle((\"Hi\"))\n// (\"Hi\")\n// >>> anti_shuffle((\"hello\"))\n// (\"ehllo\")\n// >>> anti_shuffle((\"Hello World!!!\"))\n// (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\nstd::stringstream ss(s);\nstd::string word, result = \"\";\n\nwhile(ss >> word) {\n    std::sort(word.begin(), word.end());\n    result += word + \" \";\n}\n\nresult.pop_back(); // remove the last space\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle((\"Hi\"))\n// (\"Hi\")\n// >>> anti_shuffle((\"hello\"))\n// (\"ehllo\")\n// >>> anti_shuffle((\"Hello World!!!\"))\n// (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\nstd::stringstream ss(s);\nstd::string word;\nstd::string result = \"\";\n\nwhile (ss >> word) {\n    std::sort(word.begin(), word.end());\n    result += word + \" \";\n}\n\n// Remove the trailing space\nif (!result.empty()) {\n    result.pop_back();\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle((\"Hi\"))\n// (\"Hi\")\n// >>> anti_shuffle((\"hello\"))\n// (\"ehllo\")\n// >>> anti_shuffle((\"Hello World!!!\"))\n// (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\nstd::string result = \"\";\nstd::stringstream ss(s);\nstd::string word;\n\nwhile (ss >> word) {\n    std::sort(word.begin(), word.end());\n    result += word + \" \";\n}\n\n// Remove the last space\nif (!result.empty())\n    result.pop_back();\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle((\"Hi\"))\n// (\"Hi\")\n// >>> anti_shuffle((\"hello\"))\n// (\"ehllo\")\n// >>> anti_shuffle((\"Hello World!!!\"))\n// (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\nstd::stringstream ss(s);\nstd::string word, result = \"\";\n\nwhile (ss >> word) {\n    std::sort(word.begin(), word.end());\n    result += word + \" \";\n}\n\n// Remove the trailing space\nresult.erase(result.length() - 1);\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\nint start = 0;\nint end = text.length() - 1;\n\nwhile (start < end) {\n    if (text[start] != text[end]) {\n        return false;\n    }\n    start++;\n    end--;\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\nint start = 0;\nint end = text.length() - 1;\n\nwhile (start < end) {\n    if (text[start] != text[end]) {\n        return false;\n    }\n    start++;\n    end--;\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\nint start = 0;\nint end = text.length() - 1;\n\nwhile(start < end) {\n    if(text[start] != text[end]) {\n        return false;\n    }\n    start++;\n    end--;\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\nint start = 0;\nint end = text.length() - 1;\n\nwhile (start < end) {\n    if (text[start] != text[end]) {\n        return false;\n    }\n    start++;\n    end--;\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\nint start = 0;\nint end = text.length() - 1;\n\nwhile (start < end) {\n    if (text[start] != text[end]) {\n        return false;\n    }\n    start++;\n    end--;\n}\n\nreturn true;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\nstd::string vowels = \"aeiouAEIOU\";\nstd::string closest_vowel = \"\";\n\nfor (int i = word.length() - 2; i > 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos && \n        vowels.find(word[i - 1]) == std::string::npos && \n        vowels.find(word[i + 1]) == std::string::npos) {\n        closest_vowel = word[i];\n        break;\n    }\n}\nreturn closest_vowel;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\nstd::string vowels = \"aeiouAEIOU\";\nstd::reverse(word.begin(), word.end());\nfor (int i = 1; i < word.length() - 1; i++) {\n    if (vowels.find(word[i]) != std::string::npos) {\n        if (vowels.find(word[i - 1]) == std::string::npos && vowels.find(word[i + 1]) == std::string::npos) {\n            return std::string(1, word[i]);\n        }\n    }\n}\nreturn \"\";\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\nstd::string vowels = \"aeiouAEIOU\";\nstd::string closest_vowel = \"\";\n\nfor (int i = word.size() - 2; i > 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos && \n        vowels.find(word[i-1]) == std::string::npos && \n        vowels.find(word[i+1]) == std::string::npos) {\n        closest_vowel = word[i];\n        break;\n    }\n}\nreturn closest_vowel;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\nstd::string vowels = \"aeiouAEIOU\";\nstd::string result = \"\";\nfor(int i = word.length() - 2; i > 0; i--){\n    if(vowels.find(word[i]) != std::string::npos && \n       vowels.find(word[i-1]) == std::string::npos && \n       vowels.find(word[i+1]) == std::string::npos){\n        result = word[i];\n        break;\n    }\n}\nreturn result; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\nstd::string vowels = \"aeiouAEIOU\";\nstd::string result = \"\";\nfor (int i = word.size() - 2; i > 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos && \n        vowels.find(word[i - 1]) == std::string::npos && \n        vowels.find(word[i + 1]) == std::string::npos) {\n        result = word[i];\n        break;\n    }\n}\nreturn result;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n// >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n// (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n// >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\nif (n <= 1) return false;\nif (n <= 3) return true;\n\nif (n % 2 == 0 || n % 3 == 0) return false;\n\nfor (long i = 5; i * i <= n; i += 6) {\n    if (n % i == 0 || n % (i + 2) == 0)\n        return false;\n}\n\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n// >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n// (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n// >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\nif(n <= 1)\n    return false;\nif(n == 2)\n    return true;\nif(n % 2 == 0)\n    return false;\nfor(long i = 3; i * i <= n; i += 2) {\n    if(n % i == 0)\n        return false;\n}\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n// >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n// (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n// >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\nif(n <= 1) \n    return false;\nif(n == 2) \n    return true;\nif(n % 2 == 0) \n    return false;\nfor(long i = 3; i * i <= n; i += 2) {\n    if(n % i == 0)\n        return false;\n}\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n// >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n// (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n// >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\nif(n <= 1)\n    return false;\nif(n == 2)\n    return true;\nif(n % 2 == 0)\n    return false;\nfor(long i = 3; i * i <= n; i += 2) {\n    if(n % i == 0)\n        return false;\n}\nreturn true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n// >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n// (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n// >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\nif (n <= 1) {\n    return false;\n}\nif (n == 2) {\n    return true;\n}\nif (n % 2 == 0) {\n    return false;\n}\nfor (long i = 3; i * i <= n; i += 2) {\n    if (n % i == 0) {\n        return false;\n    }\n}\nreturn true;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify((\"1/5\"), (\"5/1\"))\n// (true)\n// >>> simplify((\"1/6\"), (\"2/1\"))\n// (false)\n// >>> simplify((\"7/10\"), (\"10/2\"))\n// (false)\nbool simplify(std::string x, std::string n) {\n    // Splitting the fraction into numerator and denominator\n    auto splitFraction = [](std::string fraction) {\n        size_t pos = fraction.find('/');\n        int numerator = std::stoi(fraction.substr(0, pos));\n        int denominator = std::stoi(fraction.substr(pos + 1));\n        return std::make_pair(numerator, denominator);\n    };\n\n    // Splitting the fractions\n    auto [x_numerator, x_denominator] = splitFraction(x);\n    auto [n_numerator, n_denominator] = splitFraction(n);\n\n    // Simplifying the expression\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\n    // Checking if the result is a whole number\n    return result_numerator % result_denominator == 0;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify((\"1/5\"), (\"5/1\"))\n// (true)\n// >>> simplify((\"1/6\"), (\"2/1\"))\n// (false)\n// >>> simplify((\"7/10\"), (\"10/2\"))\n// (false)\nbool simplify(std::string x, std::string n) {\n// Split the strings into numerator and denominator\nstd::string x_num_str = x.substr(0, x.find(\"/\"));\nstd::string x_den_str = x.substr(x.find(\"/\") + 1);\nstd::string n_num_str = n.substr(0, n.find(\"/\"));\nstd::string n_den_str = n.substr(n.find(\"/\") + 1);\n\n// Convert strings to integers\nint x_num = std::stoi(x_num_str);\nint x_den = std::stoi(x_den_str);\nint n_num = std::stoi(n_num_str);\nint n_den = std::stoi(n_den_str);\n\n// Multiply the fractions\nint num_result = x_num * n_num;\nint den_result = x_den * n_den;\n\n// Check if the result is a whole number\nif (num_result % den_result == 0) {\n    return true;\n} else {\n    return false;\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify((\"1/5\"), (\"5/1\"))\n// (true)\n// >>> simplify((\"1/6\"), (\"2/1\"))\n// (false)\n// >>> simplify((\"7/10\"), (\"10/2\"))\n// (false)\nbool simplify(std::string x, std::string n) {\n// Splitting the fractions into numerator and denominator\nstd::string x_num = x.substr(0, x.find(\"/\"));\nstd::string x_den = x.substr(x.find(\"/\") + 1);\nstd::string n_num = n.substr(0, n.find(\"/\"));\nstd::string n_den = n.substr(n.find(\"/\") + 1);\n\n// Converting the strings to integers\nint x_num_int = std::stoi(x_num);\nint x_den_int = std::stoi(x_den);\nint n_num_int = std::stoi(n_num);\nint n_den_int = std::stoi(n_den);\n\n// Calculating the product of the fractions\nint num_product = x_num_int * n_num_int;\nint den_product = x_den_int * n_den_int;\n\n// Checking if the product is a whole number\nif (num_product % den_product == 0) {\n    return true;\n} else {\n    return false;\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify((\"1/5\"), (\"5/1\"))\n// (true)\n// >>> simplify((\"1/6\"), (\"2/1\"))\n// (false)\n// >>> simplify((\"7/10\"), (\"10/2\"))\n// (false)\nbool simplify(std::string x, std::string n) {\n// Split the fractions into numerator and denominator\nstd::string x_num_str = x.substr(0, x.find(\"/\"));\nstd::string x_den_str = x.substr(x.find(\"/\") + 1);\nstd::string n_num_str = n.substr(0, n.find(\"/\"));\nstd::string n_den_str = n.substr(n.find(\"/\") + 1);\n\n// Convert the strings to integers\nint x_num = std::stoi(x_num_str);\nint x_den = std::stoi(x_den_str);\nint n_num = std::stoi(n_num_str);\nint n_den = std::stoi(n_den_str);\n\n// Simplify the expression x * n\nint num = x_num * n_num;\nint den = x_den * n_den;\n\n// Check if the result is a whole number\nreturn num % den == 0;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify((\"1/5\"), (\"5/1\"))\n// (true)\n// >>> simplify((\"1/6\"), (\"2/1\"))\n// (false)\n// >>> simplify((\"7/10\"), (\"10/2\"))\n// (false)\nbool simplify(std::string x, std::string n) {\n// Splitting the strings into numerator and denominator\nstd::string x_num = x.substr(0, x.find(\"/\"));\nstd::string x_den = x.substr(x.find(\"/\") + 1);\nstd::string n_num = n.substr(0, n.find(\"/\"));\nstd::string n_den = n.substr(n.find(\"/\") + 1);\n\n// Converting strings to integers\nint x_numerator = std::stoi(x_num);\nint x_denominator = std::stoi(x_den);\nint n_numerator = std::stoi(n_num);\nint n_denominator = std::stoi(n_den);\n\n// Calculating the product of the fractions\nint product_numerator = x_numerator * n_numerator;\nint product_denominator = x_denominator * n_denominator;\n\n// If the product is a whole number, return true\nif (product_numerator % product_denominator == 0) {\n    return true;\n}\n// Otherwise, return false\nelse {\n    return false;\n}\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key((\"AB\"))\n// (1)\n// >>> hex_key((\"1077E\"))\n// (2)\n// >>> hex_key((\"ABED1A33\"))\n// (4)\n// >>> hex_key((\"123456789ABCDEF0\"))\n// (6)\n// >>> hex_key((\"2020\"))\n// (2)\nlong hex_key(std::string num) {\nlong count = 0;\nfor (char c : num) {\n    if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n        count++;\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key((\"AB\"))\n// (1)\n// >>> hex_key((\"1077E\"))\n// (2)\n// >>> hex_key((\"ABED1A33\"))\n// (4)\n// >>> hex_key((\"123456789ABCDEF0\"))\n// (6)\n// >>> hex_key((\"2020\"))\n// (2)\nlong hex_key(std::string num) {\nlong count = 0;\nfor(char c : num) {\n    if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n        count++;\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key((\"AB\"))\n// (1)\n// >>> hex_key((\"1077E\"))\n// (2)\n// >>> hex_key((\"ABED1A33\"))\n// (4)\n// >>> hex_key((\"123456789ABCDEF0\"))\n// (6)\n// >>> hex_key((\"2020\"))\n// (2)\nlong hex_key(std::string num) {\nlong count = 0;\n    for(char c : num){\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'){\n            count++;\n        }\n    }\n    return count;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key((\"AB\"))\n// (1)\n// >>> hex_key((\"1077E\"))\n// (2)\n// >>> hex_key((\"ABED1A33\"))\n// (4)\n// >>> hex_key((\"123456789ABCDEF0\"))\n// (6)\n// >>> hex_key((\"2020\"))\n// (2)\nlong hex_key(std::string num) {\nlong count = 0;\nfor (char c : num) {\n    if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n        count++;\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key((\"AB\"))\n// (1)\n// >>> hex_key((\"1077E\"))\n// (2)\n// >>> hex_key((\"ABED1A33\"))\n// (4)\n// >>> hex_key((\"123456789ABCDEF0\"))\n// (6)\n// >>> hex_key((\"2020\"))\n// (2)\nlong hex_key(std::string num) {\nlong count = 0;\nfor (char c : num) {\n    if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n        count++;\n    }\n}\nreturn count;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) {\n// Function to check if a number is prime\nauto is_prime = [](int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n            return false;\n    return true;\n};\n\nstd::stringstream ss(sentence);\nstd::string word, result = \"\";\n\n// Extract each word\nwhile (ss >> word) {\n    // If word length is prime, add it to the result\n    if (is_prime(word.length())) {\n        if (!result.empty()) result += \" \";\n        result += word;\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) {\n// Function to check if a number is prime\nauto is_prime = [](int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n};\n\nstd::stringstream ss(sentence);\nstd::string word;\nstd::string result = \"\";\n\n// Extract each word\nwhile (ss >> word) {\n    // If the length of the word is prime, add it to the result\n    if (is_prime(word.length())) {\n        if (!result.empty())\n            result += \" \";\n        result += word;\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) {\n    // Function to check if a number is prime\n    auto isPrime = [](int n) {\n        if(n <= 1) return false;\n        if(n == 2) return true;\n        if(n % 2 == 0) return false;\n        for(int i = 3; i*i <= n; i += 2) {\n            if(n % i == 0) return false;\n        }\n        return true;\n    };\n\n    std::string result = \"\";\n    std::istringstream iss(sentence);\n    std::string word;\n    \n    // Iterate over each word in the sentence\n    while(iss >> word) {\n        // If the length of the word is a prime number, add it to the result\n        if(isPrime(word.length())) {\n            if(!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    \n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) {\n    // Function to check if a number is prime\n    auto is_prime = [](int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    };\n\n    std::stringstream ss(sentence);\n    std::string word;\n    std::string result;\n\n    // Loop through each word in the sentence\n    while (ss >> word) {\n        // If the length of the word is a prime number, add it to the result\n        if (is_prime(word.length())) {\n            if (!result.empty()) result += \" \";\n            result += word;\n        }\n    }\n\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) {\n// Function to check if a number is prime\nauto is_prime = [](int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0) return false;\n    return true;\n};\n\nstd::string result;\nstd::istringstream iss(sentence);\nfor(std::string s; iss >> s; )\n    if(is_prime(s.size()))\n        result += s + ' ';\nif (!result.empty()) result.pop_back(); // remove last space\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n// >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long> histogram(std::string test) {\nstd::map<std::string,long> count;\nstd::istringstream iss(test);\nstd::string word;\nlong max_count = 0;\n\nwhile (iss >> word) {\n    count[word]++;\n    if (count[word] > max_count) {\n        max_count = count[word];\n    }\n}\n\nstd::map<std::string,long> result;\nfor (const auto& pair : count) {\n    if (pair.second == max_count) {\n        result.insert(pair);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n// >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long> histogram(std::string test) {\nstd::map<std::string, long> frequency;\nstd::istringstream iss(test);\nstd::string word;\n\nwhile (iss >> word) {\n    frequency[word]++;\n}\n\nlong maxFrequency = 0;\nfor (auto const& pair: frequency) {\n    if (pair.second > maxFrequency) {\n        maxFrequency = pair.second;\n    }\n}\n\nstd::map<std::string, long> result;\nfor (auto const& pair: frequency) {\n    if (pair.second == maxFrequency) {\n        result.insert(pair);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n// >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long> histogram(std::string test) {\nstd::map<std::string,long> letterCount;\nstd::istringstream iss(test);\nstd::string letter;\n\n// Count the occurrence of each letter\nwhile (iss >> letter) {\n    letterCount[letter]++;\n}\n\nlong maxCount = 0;\n\n// Find the maximum occurrence\nfor (auto const& pair : letterCount) {\n    if (pair.second > maxCount) {\n        maxCount = pair.second;\n    }\n}\n\nstd::map<std::string,long> maxLetterCount;\n\n// Find all letters with maximum occurrence\nfor (auto const& pair : letterCount) {\n    if (pair.second == maxCount) {\n        maxLetterCount.insert(pair);\n    }\n}\n\nreturn maxLetterCount;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n// >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long> histogram(std::string test) {\nstd::map<std::string, long> countMap;\nstd::istringstream iss(test);\nstd::string word;\n\n// Count the occurrences\nwhile (iss >> word) {\n    countMap[word]++;\n}\n\nlong maxCount = 0;\nfor (auto const& pair: countMap) {\n    if (pair.second > maxCount) {\n        maxCount = pair.second;\n    }\n}\n\n// Remove the elements which don't have the max count\nfor (auto it = countMap.begin(); it != countMap.end();) {\n    if (it->second != maxCount) {\n        it = countMap.erase(it);\n    } else {\n        ++it;\n    }\n}\n\nreturn countMap;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n// >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long> histogram(std::string test) {\nstd::map<std::string, long> letterCount;\nstd::istringstream iss(test);\nstd::string letter;\nlong maxCount = 0;\n\n// Count the occurrence of each letter\nwhile (iss >> letter) {\n    letterCount[letter]++;\n    if (letterCount[letter] > maxCount) {\n        maxCount = letterCount[letter];\n    }\n}\n\n// Create a map with the most frequent letters\nstd::map<std::string, long> mostFrequent;\nfor (const auto& pair : letterCount) {\n    if (pair.second == maxCount) {\n        mostFrequent.insert(pair);\n    }\n}\n\nreturn mostFrequent;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()), (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\nstd::vector<std::tuple<long, long>> result;\n    for(long i = 0; i < lst.size(); i++) {\n        std::vector<long> temp;\n        for(long j = 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == x) {\n                temp.push_back(j);\n            }\n        }\n        std::sort(temp.begin(), temp.end(), std::greater<long>());\n        for(auto& j: temp) {\n            result.push_back(std::make_tuple(i, j));\n        }\n    }\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()), (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\nstd::vector<std::tuple<long, long>> result;\n\n    for (long i = 0; i < lst.size(); ++i) {\n        std::vector<long> row = lst[i];\n        std::vector<long> indices;\n        for (long j = 0; j < row.size(); ++j) {\n            if (row[j] == x) {\n                indices.push_back(j);\n            }\n        }\n        std::sort(indices.begin(), indices.end(), std::greater<long>());\n        for (long index : indices) {\n            result.emplace_back(i, index);\n        }\n    }\n\n    return result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()), (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\nstd::vector<std::tuple<long, long>> result;\n\nfor(long i = 0; i < lst.size(); i++) {\n    std::vector<long> temp;\n    for(long j = 0; j < lst[i].size(); j++) {\n        if(lst[i][j] == x) {\n            temp.push_back(j);\n        }\n    }\n    std::sort(temp.begin(), temp.end(), std::greater<long>());\n    for(long j = 0; j < temp.size(); j++) {\n        result.push_back(std::make_tuple(i, temp[j]));\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()), (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\nstd::vector<std::tuple<long, long>> result;\n\nfor (long i = 0; i < lst.size(); i++) {\n    std::vector<long> temp;\n    for (long j = 0; j < lst[i].size(); j++) {\n        if (lst[i][j] == x) {\n            temp.push_back(j);\n        }\n    }\n    // Sort the columns in descending order\n    std::sort(temp.begin(), temp.end(), std::greater<long>());\n    for (long j : temp) {\n        result.push_back(std::make_tuple(i, j));\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()), (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\nstd::vector<std::tuple<long, long>> result;\n\nfor (long i = 0; i < lst.size(); i++) {\n    std::vector<long> row = lst[i];\n    std::vector<long> indices;\n\n    for (long j = 0; j < row.size(); j++) {\n        if (row[j] == x) {\n            indices.push_back(j);\n        }\n    }\n\n    // Sort indices in descending order\n    std::sort(indices.begin(), indices.end(), std::greater<long>());\n\n    for (long index : indices) {\n        result.push_back(std::make_tuple(i, index));\n    }\n}\n\nreturn result;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned vector sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz((5))\n// (std::vector<long>({(long)1, (long)5}))\nstd::vector<long> get_odd_collatz(long n) {\nstd::vector<long> odd_numbers;\n\nwhile(n != 1) {\n    if(n % 2 != 0) {\n        odd_numbers.push_back(n);\n    }\n    if(n % 2 == 0) {\n        n = n / 2;\n    } else {\n        n = 3 * n + 1;\n    }\n}\n\n// add 1 to the vector as the sequence always ends with 1\nodd_numbers.push_back(1);\n\n// sort the vector in increasing order\nstd::sort(odd_numbers.begin(), odd_numbers.end());\n\nreturn odd_numbers;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned vector sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz((5))\n// (std::vector<long>({(long)1, (long)5}))\nstd::vector<long> get_odd_collatz(long n) {\nstd::vector<long> odd_numbers;\n    while(n != 1) {\n        if(n % 2 != 0) {\n            odd_numbers.push_back(n);\n        }\n        n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n    }\n    odd_numbers.push_back(1); // As 1 is always included in the sequence\n    std::sort(odd_numbers.begin(), odd_numbers.end()); // Sorting the vector\n    return odd_numbers;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned vector sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz((5))\n// (std::vector<long>({(long)1, (long)5}))\nstd::vector<long> get_odd_collatz(long n) {\nstd::vector<long> odd_numbers;\n\nwhile(n != 1) {\n    if(n % 2 != 0) {\n        odd_numbers.push_back(n);\n    }\n    n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n}\n\nodd_numbers.push_back(1);\n\nstd::sort(odd_numbers.begin(), odd_numbers.end());\n\nreturn odd_numbers;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned vector sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz((5))\n// (std::vector<long>({(long)1, (long)5}))\nstd::vector<long> get_odd_collatz(long n) {\nstd::vector<long> odd_collatz;\n    while(n != 1){\n        if(n % 2 != 0){\n            odd_collatz.push_back(n);\n        }\n        n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n    }\n    odd_collatz.push_back(1);\n    std::sort(odd_collatz.begin(), odd_collatz.end());\n    return odd_collatz;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned vector sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz((5))\n// (std::vector<long>({(long)1, (long)5}))\nstd::vector<long> get_odd_collatz(long n) {\nstd::vector<long> odd_collatz;\n    while(n != 1) {\n        if(n % 2 != 0) {\n            odd_collatz.push_back(n);\n        }\n        n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n    }\n    odd_collatz.push_back(1); // the sequence always ends with 1\n    std::sort(odd_collatz.begin(), odd_collatz.end());\n    return odd_collatz;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n// (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n// (-1)\nlong can_arrange(std::vector<long> arr) {\nint index = -1;\nfor (int i = arr.size() - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) {\n        index = i;\n        break;\n    }\n}\nreturn index;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n// (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n// (-1)\nlong can_arrange(std::vector<long> arr) {\nint index = -1;\nfor (int i = 1; i < arr.size(); i++) {\n    if (arr[i] < arr[i - 1]) {\n        index = i;\n    }\n}\nreturn index;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n// (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n// (-1)\nlong can_arrange(std::vector<long> arr) {\nint index = -1;\nfor (int i = arr.size() - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) {\n        index = i;\n        break;\n    }\n}\nreturn index;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n// (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n// (-1)\nlong can_arrange(std::vector<long> arr) {\nint index = -1;\nfor (int i = arr.size() - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) {\n        index = i;\n        break;\n    }\n}\nreturn index;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n// (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n// (-1)\nlong can_arrange(std::vector<long> arr) {\nint index = -1;\nfor (int i = arr.size() - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) {\n        index = i;\n        break;\n    }\n}\nreturn index;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string numbers) {\nstd::map<std::string, int> numeral_map = {\n    {\"zero\", 0},\n    {\"one\", 1},\n    {\"two\", 2},\n    {\"three\", 3},\n    {\"four\", 4},\n    {\"five\", 5},\n    {\"six\", 6},\n    {\"seven\", 7},\n    {\"eight\", 8},\n    {\"nine\", 9}\n};\n\nstd::stringstream ss(numbers);\nstd::string word;\nstd::vector<std::pair<int, std::string>> numeral_pairs;\n\nwhile (ss >> word) {\n    numeral_pairs.push_back({numeral_map[word], word});\n}\n\nstd::sort(numeral_pairs.begin(), numeral_pairs.end());\n\nstd::string sorted_numbers = \"\";\nfor (const auto &pair : numeral_pairs) {\n    sorted_numbers += pair.second + \" \";\n}\n\n// Remove trailing space\nsorted_numbers = sorted_numbers.substr(0, sorted_numbers.size() - 1);\n\nreturn sorted_numbers;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string numbers) {\nstd::vector<std::string> words = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\nstd::map<std::string, int> numbers_map;\nfor(int i = 0; i < words.size(); i++) {\n    numbers_map[words[i]] = i;\n}\n\nstd::stringstream ss(numbers);\nstd::string word;\nstd::vector<std::pair<int, std::string>> pairs;\n\nwhile(ss >> word) {\n    pairs.push_back({numbers_map[word], word});\n}\n\nstd::sort(pairs.begin(), pairs.end());\n\nstd::string result = \"\";\nfor(auto &p : pairs) {\n    if(result != \"\") result += \" \";\n    result += p.second;\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string numbers) {\nstd::map<std::string, int> numMap = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<std::pair<int, std::string>> numPairs;\n\n    while (ss >> word) {\n        numPairs.push_back({numMap[word], word});\n    }\n\n    std::sort(numPairs.begin(), numPairs.end());\n\n    std::string result = \"\";\n    for (int i = 0; i < numPairs.size(); i++) {\n        result += numPairs[i].second;\n        if (i != numPairs.size() - 1) {\n            result += \" \";\n        }\n    }\n\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string numbers) {\nstd::map<std::string, int> numMap = {\n    {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, \n    {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n};\n\nstd::stringstream ss(numbers);\nstd::string word;\nstd::vector<std::pair<int, std::string>> numVec;\n\nwhile(ss >> word) {\n    assert(numMap.find(word) != numMap.end());\n    numVec.push_back({numMap[word], word});\n}\n\nstd::sort(numVec.begin(), numVec.end());\n\nstd::string sortedNumbers;\nfor(auto& num : numVec) {\n    if(!sortedNumbers.empty()) {\n        sortedNumbers += \" \";\n    }\n    sortedNumbers += num.second;\n}\n\nreturn sortedNumbers;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string numbers) {\nstd::map<std::string, int> number_map = {{\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\nstd::stringstream ss(numbers);\nstd::string word;\nstd::vector<std::pair<int, std::string>> number_pairs;\n\nwhile (ss >> word) {\n    number_pairs.push_back({number_map[word], word});\n}\n\nstd::sort(number_pairs.begin(), number_pairs.end());\n\nstd::string sorted_numbers;\nfor (const auto& pair : number_pairs) {\n    if (!sorted_numbers.empty()) {\n        sorted_numbers += \" \";\n    }\n    sorted_numbers += pair.second;\n}\n\nreturn sorted_numbers;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12), (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string circular_shift(long x, long shift) {\nstd::string str = std::to_string(x);\nlong len = str.length();\n\nif(shift > len) {\n    std::reverse(str.begin(), str.end());\n} else {\n    std::rotate(str.rbegin(), str.rbegin() + shift, str.rend());\n}\n\nreturn str;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12), (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string circular_shift(long x, long shift) {\nstd::string x_str = std::to_string(x);\n    long n = x_str.length();\n\n    if (shift > n) {\n        std::reverse(x_str.begin(), x_str.end());\n    } else {\n        std::rotate(x_str.rbegin(), x_str.rbegin() + shift, x_str.rend());\n    }\n\n    return x_str;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12), (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string circular_shift(long x, long shift) {\nstd::string str = std::to_string(x);\nint len = str.length();\n\nif (shift > len) {\n    std::reverse(str.begin(), str.end());\n} else {\n    std::rotate(str.rbegin(), str.rbegin() + shift, str.rend());\n}\n\nreturn str;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12), (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string circular_shift(long x, long shift) {\nstd::string str = std::to_string(x);\nlong len = str.length();\n\nif(shift > len) {\n    std::reverse(str.begin(), str.end());\n} else {\n    std::rotate(str.rbegin(), str.rbegin() + shift, str.rend());\n}\n\nreturn str;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12), (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string circular_shift(long x, long shift) {\nstd::string str = std::to_string(x);\nlong size = str.size();\n\nif (shift > size) {\n    std::reverse(str.begin(), str.end());\n} else {\n    std::rotate(str.rbegin(), str.rbegin() + shift, str.rend());\n}\n\nreturn str;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// \"\n// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// (long({(long)1, (long)2, (long)3}))\n// >>> lst\n// (long())\n// >>> lst\n// (long({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))\nlong sum_squares(std::vector<long> lst) {\nlong sum = 0;\nfor (int i = 0; i < lst.size(); i++) {\n    if (i % 3 == 0) {\n        sum += lst[i] * lst[i];\n    } else if (i % 4 == 0) {\n        sum += lst[i] * lst[i] * lst[i];\n    } else {\n        sum += lst[i];\n    }\n}\nreturn sum;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// \"\n// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// (long({(long)1, (long)2, (long)3}))\n// >>> lst\n// (long())\n// >>> lst\n// (long({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))\nlong sum_squares(std::vector<long> lst) {\nlong sum = 0;\nfor(int i = 0; i < lst.size(); i++){\n    if(i % 3 == 0){\n        sum += lst[i] * lst[i];\n    }\n    else if(i % 4 == 0){\n        sum += lst[i] * lst[i] * lst[i];\n    }\n    else{\n        sum += lst[i];\n    }\n}\nreturn sum;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// \"\n// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// (long({(long)1, (long)2, (long)3}))\n// >>> lst\n// (long())\n// >>> lst\n// (long({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))\nlong sum_squares(std::vector<long> lst) {\nlong sum = 0;\nfor (int i = 0; i < lst.size(); i++) {\n    if (i % 3 == 0) {\n        sum += lst[i] * lst[i];\n    } else if (i % 4 == 0) {\n        sum += lst[i] * lst[i] * lst[i];\n    } else {\n        sum += lst[i];\n    }\n}\nreturn sum;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// \"\n// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// (long({(long)1, (long)2, (long)3}))\n// >>> lst\n// (long())\n// >>> lst\n// (long({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))\nlong sum_squares(std::vector<long> lst) {\nlong sum = 0;\nfor (int i = 0; i < lst.size(); i++) {\n    if (i % 3 == 0) {\n        sum += lst[i] * lst[i];\n    } else if (i % 4 == 0) {\n        sum += lst[i] * lst[i] * lst[i];\n    } else {\n        sum += lst[i];\n    }\n}\nreturn sum;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// \"\n// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// (long({(long)1, (long)2, (long)3}))\n// >>> lst\n// (long())\n// >>> lst\n// (long({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))\nlong sum_squares(std::vector<long> lst) {\nlong sum = 0;\nfor (int i = 0; i < lst.size(); i++) {\n    if (i % 3 == 0) {\n        sum += pow(lst[i], 2);\n    } else if (i % 4 == 0) {\n        sum += pow(lst[i], 3);\n    } else {\n        sum += lst[i];\n    }\n}\nreturn sum;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long> lst) {\n    // Function to check if a number is prime\n    auto isPrime = [](long n) {\n        if (n <= 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    };\n\n    // Find the largest prime number\n    long largestPrime = -1;\n    for (long num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n\n    // If no prime number was found, return 0\n    if (largestPrime == -1) return 0;\n\n    // Calculate the sum of the digits of the largest prime number\n    long sum = 0;\n    while (largestPrime != 0) {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\n    return sum;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long> lst) {\n    // Function to check if a number is prime\n    auto isPrime = [](long n) {\n        if (n <= 1)\n            return false;\n        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return false;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0)\n                return false;\n        return true;\n    };\n\n    long largestPrime = -1;\n    // Iterate over the list to find the largest prime number\n    for (const auto &num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n\n    // If no prime number is found, return 0\n    if (largestPrime == -1) {\n        return 0;\n    }\n\n    // Calculate the sum of digits of the largest prime number\n    long sum = 0;\n    while (largestPrime != 0) {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\n    return sum;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long> lst) {\n    long largestPrime = 0;\n    for(long num : lst){\n        bool isPrime = true;\n        if(num<=1){\n            isPrime = false;\n        } else {\n            for(long i=2; i*i<=num; i++){\n                if(num%i==0){\n                    isPrime = false;\n                    break;\n                }\n            }\n        }\n        if(isPrime){\n            largestPrime = std::max(largestPrime, num);\n        }\n    }\n\n    long sumOfDigits = 0;\n    while(largestPrime != 0){\n        sumOfDigits += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\n    return sumOfDigits;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long> lst) {\n    // Function to check if a number is prime\n    auto is_prime = [](long n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    };\n\n    // Find the largest prime number\n    long largest_prime = 0;\n    for (long num : lst) {\n        if (is_prime(num) && num > largest_prime) {\n            largest_prime = num;\n        }\n    }\n\n    // Calculate the sum of the digits of the largest prime number\n    long sum_of_digits = 0;\n    while (largest_prime != 0) {\n        sum_of_digits += largest_prime % 10;\n        largest_prime /= 10;\n    }\n\n    return sum_of_digits;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long> lst) {\n    // Function to check if a number is prime\n    auto isPrime = [](long n) {\n        if (n <= 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (long i = 5; i * i <= n; i += 6)\n            if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n        return true;\n    };\n\n    long largestPrime = -1;\n    for (long num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n\n    // If no prime number is found, return 0\n    if (largestPrime == -1) return 0;\n\n    long sum = 0;\n    while (largestPrime != 0) {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\n    return sum;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\nlong sum = 0;\nlong product = 1;\n\nfor(auto& num : numbers) {\n    sum += num;\n    product *= num;\n}\n\nreturn std::make_tuple(sum, product);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\nlong sum = 0;\nlong product = 1;\n\nfor(auto& num : numbers) {\n    sum += num;\n    product *= num;\n}\n\nreturn std::make_tuple(sum, product);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\nlong sum = 0;\nlong product = 1;\n\nfor(const auto& num : numbers){\n    sum += num;\n    product *= num;\n}\n\nreturn std::make_tuple(sum, product);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\nlong sum = 0;\nlong product = 1;\n\nfor(const auto& number : numbers) {\n    sum += number;\n    product *= number;\n}\n\nreturn std::make_tuple(sum, product);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\nlong sum = 0;\nlong product = 1;\n\nfor(auto& num : numbers) {\n    sum += num;\n    product *= num;\n}\n\nreturn std::make_tuple(sum, product);"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n// >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\nif (x > y) return -1;\n\nif (y % 2 == 0) return y;\nelse if (y - 1 >= x) return y - 1;\nelse return -1; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n// >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\nif(x > y) return -1;\n\nif(y % 2 == 0) return y;\nelse if(y-1 >= x && (y-1) % 2 == 0) return y-1;\n\nreturn -1;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n// >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\nif(x > y) return -1;\n\nif(y % 2 == 0) return y;\nelse if(y-1 >= x && (y-1) % 2 == 0) return y-1;\n\nreturn -1;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n// >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\nif (x > y) {\n    return -1;\n}\n\nif (y % 2 == 0) {\n    return y;\n} else if (y - 1 >= x) {\n    return y - 1;\n} else {\n    return -1;\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n// >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\nif (x > y) return -1;\n\nif (y % 2 == 0) return y;\nelse if (y-1 >= x && (y-1) % 2 == 0) return y-1;\n\nreturn -1;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a vector.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n// >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\nstd::optional<long> largestNegative = std::nullopt;\nstd::optional<long> smallestPositive = std::nullopt;\n\nfor (long num : lst) {\n    if (num < 0) {\n        if (!largestNegative.has_value() || num > largestNegative.value()) {\n            largestNegative = num;\n        }\n    } else if (num > 0) {\n        if (!smallestPositive.has_value() || num < smallestPositive.value()) {\n            smallestPositive = num;\n        }\n    }\n}\n\nreturn std::make_tuple(largestNegative, smallestPositive);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a vector.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n// >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\nstd::optional<long> largest_negative = std::nullopt;\nstd::optional<long> smallest_positive = std::nullopt;\n\nfor (const auto& num : lst) {\n    if (num < 0 && (!largest_negative.has_value() || num > *largest_negative)) {\n        largest_negative = num;\n    } else if (num > 0 && (!smallest_positive.has_value() || num < *smallest_positive)) {\n        smallest_positive = num;\n    }\n}\n\nreturn std::make_tuple(largest_negative, smallest_positive);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a vector.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n// >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n// Initialize optional variables for largest negative and smallest positive integers\nstd::optional<long> largest_negative = std::nullopt;\nstd::optional<long> smallest_positive = std::nullopt;\n\n// Go through each element in the vector\nfor (const auto& num : lst) {\n    // If the number is negative\n    if (num < 0) {\n        // If largest_negative is nullopt or the current number is larger than the stored largest_negative\n        if (!largest_negative.has_value() || num > largest_negative.value()) {\n            largest_negative = num;\n        }\n    }\n    // If the number is positive\n    else if (num > 0) {\n        // If smallest_positive is nullopt or the current number is smaller than the stored smallest_positive\n        if (!smallest_positive.has_value() || num < smallest_positive.value()) {\n            smallest_positive = num;\n        }\n    }\n}\n\n// Return the tuple of largest_negative and smallest_positive\nreturn std::make_tuple(largest_negative, smallest_positive);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a vector.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n// >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\nstd::optional<long> largest_negative = std::nullopt;\nstd::optional<long> smallest_positive = std::nullopt;\n\nfor (long num : lst) {\n    if (num < 0) {\n        if (!largest_negative.has_value() || num > largest_negative.value()) {\n            largest_negative = num;\n        }\n    } else if (num > 0) {\n        if (!smallest_positive.has_value() || num < smallest_positive.value()) {\n            smallest_positive = num;\n        }\n    }\n}\n\nreturn std::make_tuple(largest_negative, smallest_positive);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a vector.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n// >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\nstd::optional<long> largest_negative = std::nullopt;\nstd::optional<long> smallest_positive = std::nullopt;\n\nfor (auto num : lst) {\n    if (num < 0) {\n        if (!largest_negative.has_value() || num > largest_negative.value()) {\n            largest_negative = num;\n        }\n    } else if (num > 0) {\n        if (!smallest_positive.has_value() || num < smallest_positive.value()) {\n            smallest_positive = num;\n        }\n    }\n}\n\nreturn std::make_tuple(largest_negative, smallest_positive);\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\nstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\nstd::set<char> distinct_chars(string.begin(), string.end());\nreturn distinct_chars.size();\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\nstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\nstd::unordered_set<char> distinct_characters(string.begin(), string.end());\nreturn distinct_characters.size();\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\nstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\nstd::set<char> distinct_chars(string.begin(), string.end());\nreturn distinct_chars.size();\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\nstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\nstd::unordered_set<char> distinct_chars(string.begin(), string.end());\nreturn distinct_chars.size();\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\nstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\nstd::set<char> unique_chars(string.begin(), string.end());\nreturn unique_chars.size();\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a vector, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile((3))\n// (std::vector<long>({(long)3, (long)5, (long)7}))\nstd::vector<long> make_a_pile(long n) {\nstd::vector<long> pile;\nfor (long i = 0; i < n; i++) {\n    pile.push_back(n + 2 * i);\n}\nreturn pile;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a vector, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile((3))\n// (std::vector<long>({(long)3, (long)5, (long)7}))\nstd::vector<long> make_a_pile(long n) {\nstd::vector<long> pile;\nfor(long i = 0; i < n; i++){\n    pile.push_back(n + 2 * i);\n}\nreturn pile;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a vector, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile((3))\n// (std::vector<long>({(long)3, (long)5, (long)7}))\nstd::vector<long> make_a_pile(long n) {\nstd::vector<long> pile;\nfor(long i = 0; i < n; i++) {\n    pile.push_back(n + 2 * i);\n}\nreturn pile;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a vector, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile((3))\n// (std::vector<long>({(long)3, (long)5, (long)7}))\nstd::vector<long> make_a_pile(long n) {\nstd::vector<long> pile;\nfor(long i = 0; i < n; i++){\n    pile.push_back(n + 2*i);\n}\nreturn pile;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a vector, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile((3))\n// (std::vector<long>({(long)3, (long)5, (long)7}))\nstd::vector<long> make_a_pile(long n) {\nstd::vector<long> pile;\nfor(long i = 0; i < n; i++){\n    pile.push_back(n + 2*i);\n}\nreturn pile;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0, (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\nstd::optional<long> prod_signs(std::vector<long> arr) {\nif(arr.empty())\n    return std::nullopt;\n\nlong sum = 0;\nint product = 1;\n\nfor(auto &num : arr){\n    if(num > 0){\n        sum += num;\n    }\n    else if(num < 0){\n        sum += -num;\n        product *= -1;\n    }\n}\n\nreturn sum * product; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0, (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\nstd::optional<long> prod_signs(std::vector<long> arr) {\nlong sum = 0;\nlong sign_product = 1;\nif(arr.empty()) {\n    return std::nullopt;\n}\nfor(auto &num : arr) {\n    sum += std::abs(num);\n    if(num < 0) {\n        sign_product *= -1;\n    } else if(num == 0) {\n        sign_product = 0;\n        break;\n    }\n}\nreturn sum * sign_product;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0, (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\nstd::optional<long> prod_signs(std::vector<long> arr) {\nif (arr.empty()) return std::nullopt;\n\nlong sum = 0;\nint sign_product = 1;\n\nfor (auto num : arr) {\n    sum += abs(num);\n    if (num > 0) sign_product *= 1;\n    else if (num < 0) sign_product *= -1;\n    else sign_product *= 0;\n}\n\nreturn sum * sign_product;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0, (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\nstd::optional<long> prod_signs(std::vector<long> arr) {\nif (arr.empty()) {\n    return std::nullopt;\n}\n\nlong sum = 0;\nint prodSign = 1;\nfor (long num : arr) {\n    sum += std::abs(num);\n    if (num < 0) {\n        prodSign *= -1;\n    } else if (num == 0) {\n        prodSign = 0;\n        break;\n    }\n}\n\nreturn sum * prodSign;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0, (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\nstd::optional<long> prod_signs(std::vector<long> arr) {\nif(arr.empty()) {\n    return std::nullopt;\n}\n\nlong sum = 0;\nint signProduct = 1;\n\nfor(auto num : arr) {\n    sum += std::abs(num);\n    if(num < 0) {\n        signProduct *= -1;\n    } else if(num > 0) {\n        signProduct *= 1;\n    } else {\n        signProduct = 0;\n        break;\n    }\n}\n\nreturn sum * signProduct;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n// >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) {\nlong min_sum = nums[0];\nlong current_sum = nums[0];\n\nfor (int i = 1; i < nums.size(); i++) {\n    current_sum = std::min(nums[i], current_sum + nums[i]);\n    min_sum = std::min(min_sum, current_sum);\n}\n\nreturn min_sum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n// >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) {\nlong minSum = nums[0];\nlong currSum = nums[0];\n\nfor (int i = 1; i < nums.size(); i++) {\n    if (currSum > 0) {\n        currSum = nums[i];\n    } else {\n        currSum += nums[i];\n    }\n    minSum = std::min(minSum, currSum);\n}\n\nreturn minSum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n// >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) {\nlong minSum = nums[0];\nlong currSum = nums[0];\n\nfor (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum, currSum);\n}\n\nreturn minSum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n// >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) {\nlong minSum = nums[0];\nlong currentSum = nums[0];\n\nfor (size_t i = 1; i < nums.size(); i++) {\n    currentSum = std::min(nums[i], currentSum + nums[i]);\n    minSum = std::min(minSum, currentSum);\n}\n\nreturn minSum;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n// >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) {\nlong minSum = nums[0];\nlong currSum = nums[0];\n\nfor (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum, currSum);\n}\n\nreturn minSum;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence((0))\n// (\"0\")\n// >>> string_sequence((5))\n// (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) {\nstd::stringstream ss;\nfor(long i = 0; i <= n; i++) {\n    ss << i;\n    if(i != n) ss << \" \";\n}\nreturn ss.str();",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence((0))\n// (\"0\")\n// >>> string_sequence((5))\n// (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) {\nstd::string result = \"\";\nfor(long i = 0; i <= n; i++) {\n    result += std::to_string(i) + \" \";\n}\nresult.pop_back(); // remove the last space\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence((0))\n// (\"0\")\n// >>> string_sequence((5))\n// (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) {\nstd::ostringstream oss;\nfor(long i = 0; i <= n; i++) {\n    oss << i;\n    if(i != n) {\n        oss << \" \";\n    }\n}\nreturn oss.str();",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence((0))\n// (\"0\")\n// >>> string_sequence((5))\n// (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) {\nstd::string result = \"\";\nfor(long i = 0; i <= n; i++) {\n    result += std::to_string(i) + \" \";\n}\nresult.pop_back(); // remove the last space\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence((0))\n// (\"0\")\n// >>> string_sequence((5))\n// (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) {\nstd::stringstream ss;\nfor(long i = 0; i <= n; i++) {\n    ss << i;\n    if(i != n) {\n        ss << \" \";\n    }\n}\nreturn ss.str();"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check((\"abcd\"), (\"abd\"))\n// (false)\n// >>> cycpattern_check((\"hello\"), (\"ell\"))\n// (true)\n// >>> cycpattern_check((\"whassup\"), (\"psus\"))\n// (false)\n// >>> cycpattern_check((\"abab\"), (\"baa\"))\n// (true)\n// >>> cycpattern_check((\"efef\"), (\"eeff\"))\n// (false)\n// >>> cycpattern_check((\"himenss\"), (\"simen\"))\n// (true)\nbool cycpattern_check(std::string a, std::string b) {\n// Check if size of b is greater than a, if so return false\n    if (b.size() > a.size()) return false;\n\n    // Create a new string by appending a with itself\n    std::string temp = a + a;\n\n    // Generate all rotations of b and check if it is a substring of temp\n    for (int i = 0; i < b.size(); i++) {\n        std::string rotation = b.substr(i) + b.substr(0, i);\n        if (temp.find(rotation) != std::string::npos) return true;\n    }\n\n    // If none of the rotations of b is a substring of temp, return false\n    return false;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check((\"abcd\"), (\"abd\"))\n// (false)\n// >>> cycpattern_check((\"hello\"), (\"ell\"))\n// (true)\n// >>> cycpattern_check((\"whassup\"), (\"psus\"))\n// (false)\n// >>> cycpattern_check((\"abab\"), (\"baa\"))\n// (true)\n// >>> cycpattern_check((\"efef\"), (\"eeff\"))\n// (false)\n// >>> cycpattern_check((\"himenss\"), (\"simen\"))\n// (true)\nbool cycpattern_check(std::string a, std::string b) {\nstd::string temp = a + a; // Concatenate the string with itself\nfor (int i = 0; i < b.length(); i++) {\n    std::string rotation = b.substr(i) + b.substr(0, i); // Generate all rotations of b\n    if (temp.find(rotation) != std::string::npos) { // If the rotation is a substring of temp\n        return true;\n    }\n}\nreturn false; // If no rotation of b is a substring of temp\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check((\"abcd\"), (\"abd\"))\n// (false)\n// >>> cycpattern_check((\"hello\"), (\"ell\"))\n// (true)\n// >>> cycpattern_check((\"whassup\"), (\"psus\"))\n// (false)\n// >>> cycpattern_check((\"abab\"), (\"baa\"))\n// (true)\n// >>> cycpattern_check((\"efef\"), (\"eeff\"))\n// (false)\n// >>> cycpattern_check((\"himenss\"), (\"simen\"))\n// (true)\nbool cycpattern_check(std::string a, std::string b) {\n// Concatenate string a with itself\nstd::string temp = a + a;\n\n// Check if string b is a substring of the concatenated string\nif (temp.find(b) != std::string::npos)\n    return true;\n\n// Generate all rotations of string b and check if any of them is a substring of the concatenated string\nfor (int i = 0; i < b.length(); i++) {\n    std::rotate(b.begin(), b.begin() + 1, b.end());\n    if (temp.find(b) != std::string::npos)\n        return true;\n}\n\n// If none of the rotations of string b is a substring of the concatenated string, return false\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check((\"abcd\"), (\"abd\"))\n// (false)\n// >>> cycpattern_check((\"hello\"), (\"ell\"))\n// (true)\n// >>> cycpattern_check((\"whassup\"), (\"psus\"))\n// (false)\n// >>> cycpattern_check((\"abab\"), (\"baa\"))\n// (true)\n// >>> cycpattern_check((\"efef\"), (\"eeff\"))\n// (false)\n// >>> cycpattern_check((\"himenss\"), (\"simen\"))\n// (true)\nbool cycpattern_check(std::string a, std::string b) {\n// Create all rotations of b and check if any of them is a substring of a\nfor(int i = 0; i < b.size(); i++) {\n    std::rotate(b.begin(), b.begin() + 1, b.end());\n    if (a.find(b) != std::string::npos) {\n        return true;\n    }\n}\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check((\"abcd\"), (\"abd\"))\n// (false)\n// >>> cycpattern_check((\"hello\"), (\"ell\"))\n// (true)\n// >>> cycpattern_check((\"whassup\"), (\"psus\"))\n// (false)\n// >>> cycpattern_check((\"abab\"), (\"baa\"))\n// (true)\n// >>> cycpattern_check((\"efef\"), (\"eeff\"))\n// (false)\n// >>> cycpattern_check((\"himenss\"), (\"simen\"))\n// (true)\nbool cycpattern_check(std::string a, std::string b) {\nstd::string temp = a + a;\nfor(int i = 0; i < b.length(); i++) {\n    std::rotate(b.begin(), b.begin() + 1, b.end());\n    if(temp.find(b) != std::string::npos) {\n        return true;\n    }\n}\nreturn false;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4, (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l) {\nif(l.size() < 2) return true;\n\nbool isIncreasing = l[1] > l[0];\n\nfor(int i = 1; i < l.size(); i++) {\n    if(isIncreasing) {\n        if(l[i] < l[i-1]) return false;\n    } else {\n        if(l[i] > l[i-1]) return false;\n    }\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4, (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l) {\nif(l.size() < 2) {\n    return true;\n}\n\nbool isIncreasing = l[1] > l[0];\nfor(int i = 2; i < l.size(); i++) {\n    if((l[i] > l[i-1]) != isIncreasing) {\n        return false;\n    }\n}\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4, (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l) {\nif(l.size() < 2) return true;\n\nbool increasing = l[1] > l[0];\n\nfor(int i = 1; i < l.size(); i++) {\n    if((increasing && l[i] < l[i-1]) || (!increasing && l[i] > l[i-1])) {\n        return false;\n    }\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4, (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l) {\nif(l.size() < 2) return true;\n\nbool isIncreasing = l[1] > l[0];\n\nfor(int i = 1; i < l.size(); i++) {\n    if(isIncreasing) {\n        if(l[i] < l[i-1]) return false;\n    } else {\n        if(l[i] > l[i-1]) return false;\n    }\n}\n\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4, (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l) {\nif(l.size() < 2) return true;\n\nbool isIncreasing = l[1] > l[0];\n\nfor(int i = 1; i < l.size(); i++) {\n    if(isIncreasing) {\n        if(l[i] < l[i-1]) return false;\n    } else {\n        if(l[i] > l[i-1]) return false;\n    }\n}\n\nreturn true;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n// std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) {\nif (strings.empty()) {\n    return std::nullopt;\n}\n\nstd::string longest_string = strings[0];\nfor (const auto& str : strings) {\n    if (str.length() > longest_string.length()) {\n        longest_string = str;\n    }\n}\nreturn longest_string;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n// std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) {\nif(strings.empty())\n    return std::nullopt;\n\nstd::string longest_string = strings[0];\nfor(auto &str : strings) {\n    if(str.length() > longest_string.length())\n        longest_string = str;\n}\nreturn longest_string;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n// std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) {\nif (strings.empty()) {\n    return std::nullopt;\n}\n\nstd::string longest_string = strings[0];\nfor (const auto& str : strings) {\n    if (str.length() > longest_string.length()) {\n        longest_string = str;\n    }\n}\nreturn longest_string;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n// std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) {\nif (strings.empty()) {\n    return std::nullopt;\n}\n\nstd::string longestString = strings[0];\nfor (const auto& str : strings) {\n    if (str.length() > longestString.length()) {\n        longestString = str;\n    }\n}\nreturn longestString;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n// std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) {\nif (strings.empty()) {\n    return std::nullopt;\n}\n\nstd::string longest_string = strings[0];\nfor (const auto& str : strings) {\n    if (str.length() > longest_string.length()) {\n        longest_string = str;\n    }\n}\nreturn longest_string;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if all numbers in the vector l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long> l, long t) {\nfor(auto& num : l) {\n    if(num >= t) {\n        return false;\n    }\n}\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if all numbers in the vector l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long> l, long t) {\nfor(auto num : l) {\n    if(num >= t) {\n        return false;\n    }\n}\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if all numbers in the vector l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long> l, long t) {\nfor(auto& num : l) {\n    if(num >= t) {\n        return false;\n    }\n}\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if all numbers in the vector l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long> l, long t) {\nfor(auto& num : l) {\n    if(num >= t) {\n        return false;\n    }\n}\nreturn true;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if all numbers in the vector l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long> l, long t) {\nfor(auto num : l) {\n    if(num >= t) {\n        return false;\n    }\n}\nreturn true;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\nstd::vector<int> prime_factors;\n    for(int i = 2; a > 1; i++) {\n        while(a % i == 0) {\n            prime_factors.push_back(i);\n            a /= i;\n        }\n    }\n    if(prime_factors.size() == 3)\n        return true;\n    else\n        return false;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\nstd::vector<int> primeFactors;\n    for (int i = 2; a > 1 && i <= sqrt(a); i++) {\n        while (a % i == 0) {\n            primeFactors.push_back(i);\n            a /= i;\n        }\n    }\n    if (a > 1) {\n        primeFactors.push_back(a);\n    }\n    return primeFactors.size() == 3;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\nstd::vector<int> prime_factors;\nfor(int i = 2; a > 1; i++) {\n    while(a % i == 0) {\n        prime_factors.push_back(i);\n        a /= i;\n    }\n}\nreturn prime_factors.size() == 3; }",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\nstd::vector<int> primeFactors;\nfor(int i = 2; a > 1; i++) {\n    while(a % i == 0) {\n        primeFactors.push_back(i);\n        a /= i;\n    }\n}\nreturn primeFactors.size() == 3 && primeFactors[0] != primeFactors[1] && primeFactors[1] != primeFactors[2] && primeFactors[0] != primeFactors[2];\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\nstd::vector<int> primes;\nfor (int i = 2; i <= a; i++) {\n    bool isPrime = true;\n    for (int j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        primes.push_back(i);\n    }\n}\n\nint count = 0;\nfor (int i = 0; i < primes.size(); i++) {\n    while (a % primes[i] == 0) {\n        a /= primes[i];\n        count++;\n    }\n    if (count > 3) {\n        return false;\n    }\n}\n\nreturn count == 3 && a == 1;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4, (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n// >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long> l) {\nstd::vector<long> result;\nfor(auto num: l){\n    if(num > 0){\n        result.push_back(num);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4, (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n// >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long> l) {\nstd::vector<long> positiveNumbers;\nfor (long i : l) {\n    if (i > 0) {\n        positiveNumbers.push_back(i);\n    }\n}\nreturn positiveNumbers;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4, (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n// >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long> l) {\nstd::vector<long> positive_numbers;\nfor(auto num : l) {\n    if(num > 0) {\n        positive_numbers.push_back(num);\n    }\n}\nreturn positive_numbers;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4, (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n// >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long> l) {\nstd::vector<long> positive_numbers;\nfor(auto num : l) {\n    if(num > 0) {\n        positive_numbers.push_back(num);\n    }\n}\nreturn positive_numbers;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4, (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n// >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long> l) {\nstd::vector<long> positive_numbers;\nfor(long num : l) {\n    if(num > 0) {\n        positive_numbers.push_back(num);\n    }\n}\nreturn positive_numbers;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_third((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})))\n// (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5}))\nstd::vector<long> sort_third(std::vector<long> l) {\nstd::vector<long> divisible_by_three;\nstd::vector<long> result = l;\n\nfor (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n        divisible_by_three.push_back(l[i]);\n    }\n}\n\nstd::sort(divisible_by_three.begin(), divisible_by_three.end());\n\nint j = 0;\nfor (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n        result[i] = divisible_by_three[j];\n        j++;\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_third((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})))\n// (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5}))\nstd::vector<long> sort_third(std::vector<long> l) {\nstd::vector<long> divisibleByThree;\nfor (int i = 0; i < l.size(); i += 3) {\n    divisibleByThree.push_back(l[i]);\n}\n\nstd::sort(divisibleByThree.begin(), divisibleByThree.end());\n\nfor (int i = 0, j = 0; i < l.size(); i += 3, ++j) {\n    l[i] = divisibleByThree[j];\n}\n\nreturn l;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_third((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})))\n// (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5}))\nstd::vector<long> sort_third(std::vector<long> l) {\nstd::vector<long> divisible_by_three;\nstd::vector<long> result = l;\n\n// Extract elements at indices divisible by three\nfor (size_t i = 0; i < l.size(); i += 3) {\n    divisible_by_three.push_back(l[i]);\n}\n\n// Sort the extracted elements\nstd::sort(divisible_by_three.begin(), divisible_by_three.end());\n\n// Replace elements at indices divisible by three with sorted elements\nfor (size_t i = 0, j = 0; i < l.size(); i += 3, ++j) {\n    result[i] = divisible_by_three[j];\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_third((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})))\n// (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5}))\nstd::vector<long> sort_third(std::vector<long> l) {\nstd::vector<long> divisible_by_three;\nstd::vector<long> result = l;\n\nfor (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n        divisible_by_three.push_back(l[i]);\n    }\n}\n\nstd::sort(divisible_by_three.begin(), divisible_by_three.end());\n\nint j = 0;\nfor (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n        result[i] = divisible_by_three[j];\n        j++;\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_third((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})))\n// (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5}))\nstd::vector<long> sort_third(std::vector<long> l) {\nstd::vector<long> divisibleByThree;\nfor (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n        divisibleByThree.push_back(l[i]);\n    }\n}\nstd::sort(divisibleByThree.begin(), divisibleByThree.end());\n\nint j = 0;\nfor (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n        l[i] = divisibleByThree[j];\n        j++;\n    }\n}\n\nreturn l;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) {\nstd::vector<long> result;\nstd::stringstream ss(paren_string);\nstd::string temp;\n\nwhile(getline(ss, temp, ' ')) {\n    long max_depth = 0, current_depth = 0;\n    for(char c : temp) {\n        if(c == '(') {\n            current_depth++;\n            if(current_depth > max_depth)\n                max_depth = current_depth;\n        } else if(c == ')') {\n            if(current_depth > 0)\n                current_depth--;\n        }\n    }\n    result.push_back(max_depth);\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) {\nstd::vector<long> result;\nstd::stringstream ss(paren_string);\nstd::string group;\n\nwhile (std::getline(ss, group, ' ')) {\n    long max_depth = 0;\n    long depth = 0;\n    for (char c : group) {\n        if (c == '(') {\n            depth++;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        } else if (c == ')') {\n            if (depth > 0) {\n                depth--;\n            } else {\n                // Invalid parentheses string, return empty vector\n                return std::vector<long>();\n            }\n        }\n    }\n    // If not all parentheses are closed, return empty vector\n    if (depth != 0) {\n        return std::vector<long>();\n    }\n    result.push_back(max_depth);\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) {\nstd::vector<long> depth_levels;\nstd::stringstream ss(paren_string);\nstd::string group;\n\nwhile (std::getline(ss, group, ' ')) {\n    long max_depth = 0;\n    long current_depth = 0;\n    for (char c : group) {\n        if (c == '(') {\n            current_depth++;\n            if (current_depth > max_depth) {\n                max_depth = current_depth;\n            }\n        } else if (c == ')') {\n            if (current_depth > 0) {\n                current_depth--;\n            }\n        }\n    }\n    depth_levels.push_back(max_depth);\n}\n\nreturn depth_levels;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) {\nstd::vector<long> nesting_levels;\nstd::istringstream iss(paren_string);\nstd::string group;\n\nwhile (std::getline(iss, group, ' ')) {\n    long max_depth = 0;\n    long current_depth = 0;\n\n    for (char c : group) {\n        if (c == '(') {\n            current_depth++;\n            if (current_depth > max_depth)\n                max_depth = current_depth;\n        } else if (c == ')') {\n            if (current_depth > 0)\n                current_depth--;\n        }\n    }\n\n    nesting_levels.push_back(max_depth);\n}\n\nreturn nesting_levels;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) {\nstd::vector<long> result;\nstd::stringstream ss(paren_string);\nstd::string group;\n\nwhile (ss >> group) {\n    long max_depth = 0, current_depth = 0;\n    for (char c : group) {\n        if (c == '(') {\n            current_depth++;\n            if (current_depth > max_depth)\n                max_depth = current_depth;\n        } else if (c == ')') {\n            if (current_depth > 0)\n                current_depth--;\n        }\n    }\n    result.push_back(max_depth);\n}\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area((5), (3))\n// (7.5f)\nfloat triangle_area(long a, long h) {\nreturn 0.5f * a * h;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area((5), (3))\n// (7.5f)\nfloat triangle_area(long a, long h) {\nreturn 0.5f * a * h;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area((5), (3))\n// (7.5f)\nfloat triangle_area(long a, long h) {\nreturn 0.5f * a * h;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area((5), (3))\n// (7.5f)\nfloat triangle_area(long a, long h) {\nreturn 0.5f * a * h;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area((5), (3))\n// (7.5f)\nfloat triangle_area(long a, long h) {\nreturn 0.5 * a * h;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply((148), (412))\n// (16)\n// >>> multiply((19), (28))\n// (72)\n// >>> multiply((2020), (1851))\n// (0)\n// >>> multiply((14), (-15))\n// (20)\nlong multiply(long a, long b) {\n// Get the unit digits of both numbers\nlong unitDigitA = abs(a % 10);\nlong unitDigitB = abs(b % 10);\n\n// Return the product of the unit digits\nreturn unitDigitA * unitDigitB;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply((148), (412))\n// (16)\n// >>> multiply((19), (28))\n// (72)\n// >>> multiply((2020), (1851))\n// (0)\n// >>> multiply((14), (-15))\n// (20)\nlong multiply(long a, long b) {\n// Get the unit digits of both numbers\nlong unitDigitA = abs(a % 10);\nlong unitDigitB = abs(b % 10);\n\n// Return the product of the unit digits\nreturn unitDigitA * unitDigitB;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply((148), (412))\n// (16)\n// >>> multiply((19), (28))\n// (72)\n// >>> multiply((2020), (1851))\n// (0)\n// >>> multiply((14), (-15))\n// (20)\nlong multiply(long a, long b) {\n// Get the last digit of both numbers\nint lastDigitA = abs(a % 10);\nint lastDigitB = abs(b % 10);\n\n// Return the product of the last digits\nreturn lastDigitA * lastDigitB; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply((148), (412))\n// (16)\n// >>> multiply((19), (28))\n// (72)\n// >>> multiply((2020), (1851))\n// (0)\n// >>> multiply((14), (-15))\n// (20)\nlong multiply(long a, long b) {\n// Get the unit digits of both numbers\nlong unitDigitA = abs(a % 10);\nlong unitDigitB = abs(b % 10);\n\n// Multiply the unit digits and return the result\nreturn unitDigitA * unitDigitB; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply((148), (412))\n// (16)\n// >>> multiply((19), (28))\n// (72)\n// >>> multiply((2020), (1851))\n// (0)\n// >>> multiply((14), (-15))\n// (20)\nlong multiply(long a, long b) {\n// Get the last digit of both numbers\nlong lastDigitA = abs(a % 10);\nlong lastDigitB = abs(b % 10);\n\n// Return the product of the last digits\nreturn lastDigitA * lastDigitB;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n// (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\nfloat sum = 0.0f;\nfloat mean = 0.0f;\nfloat mad = 0.0f;\n\n// Calculate the sum of the numbers\nfor (float number : numbers) {\n    sum += number;\n}\n\n// Calculate the mean of the numbers\nmean = sum / numbers.size();\n\n// Calculate the Mean Absolute Deviation\nfor (float number : numbers) {\n    mad += std::abs(number - mean);\n}\n\nmad /= numbers.size();\n\nreturn mad;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n// (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\nfloat sum = 0.0f;\nfloat mean = 0.0f;\nfloat mad = 0.0f;\n\n// Calculate the mean\nfor (auto &num : numbers) {\n    sum += num;\n}\nmean = sum / numbers.size();\n\n// Calculate the mean absolute deviation\nfor (auto &num : numbers) {\n    mad += std::abs(num - mean);\n}\nmad = mad / numbers.size();\n\nreturn mad;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n// (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\nfloat sum = 0;\nfloat mean, mad = 0;\n\n// Calculate sum of all elements in the vector\nfor(int i=0; i<numbers.size(); i++)\n    sum += numbers[i];\n\n// Calculate mean\nmean = sum / numbers.size();\n\n// Calculate Mean Absolute Deviation\nfor(int i=0; i<numbers.size(); i++)\n    mad += abs(numbers[i] - mean);\n\nmad /= numbers.size();\n\nreturn mad;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n// (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\nfloat sum = 0.0f;\nfloat mean = 0.0f;\nfloat mad = 0.0f;\n\n// Calculate the mean of the numbers\nfor (int i = 0; i < numbers.size(); i++) {\n    sum += numbers[i];\n}\nmean = sum / numbers.size();\n\n// Calculate the Mean Absolute Deviation\nfor (int i = 0; i < numbers.size(); i++) {\n    mad += std::abs(numbers[i] - mean);\n}\nmad = mad / numbers.size();\n\nreturn mad;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n// (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\nfloat sum = 0;\nfloat mean;\nfloat mad = 0;\n\n// Calculate the sum of the numbers\nfor (int i = 0; i < numbers.size(); i++) {\n    sum += numbers[i];\n}\n\n// Calculate the mean\nmean = sum / numbers.size();\n\n// Calculate the absolute deviation from the mean for each number\nfor (int i = 0; i < numbers.size(); i++) {\n    mad += abs(numbers[i] - mean);\n}\n\n// Calculate the mean absolute deviation\nmad = mad / numbers.size();\n\nreturn mad;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1, (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2, (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n// Sort both vectors\nstd::sort(l1.begin(), l1.end());\nstd::sort(l2.begin(), l2.end());\n\nstd::vector<long> result;\n\n// Use std::set_intersection to find common elements\nstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\n// Remove duplicates\nresult.erase(std::unique(result.begin(), result.end()), result.end());\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1, (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2, (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n// Sort both the vectors\nstd::sort(l1.begin(), l1.end());\nstd::sort(l2.begin(), l2.end());\n\nstd::vector<long> commonElements;\n\n// Use std::set_intersection algorithm to find common elements\nstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(commonElements));\n\n// Remove duplicate elements\nauto last = std::unique(commonElements.begin(), commonElements.end());\ncommonElements.erase(last, commonElements.end());\n\nreturn commonElements;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1, (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2, (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n// Sort both vectors\nstd::sort(l1.begin(), l1.end());\nstd::sort(l2.begin(), l2.end());\n\nstd::vector<long> common_elements;\n\n// Use std::set_intersection to find common elements\nstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(common_elements));\n\n// Remove duplicate elements\nauto last = std::unique(common_elements.begin(), common_elements.end());\ncommon_elements.erase(last, common_elements.end());\n\nreturn common_elements;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1, (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2, (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n// Create a set from the first vector\nstd::set<long> set1(l1.begin(), l1.end());\n\n// Create a set from the second vector\nstd::set<long> set2(l2.begin(), l2.end());\n\n// Create a vector to store the common elements\nstd::vector<long> commonElements;\n\n// Use the std::set_intersection algorithm to find common elements\nstd::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::back_inserter(commonElements));\n\nreturn commonElements;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1, (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2, (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n// Sort both vectors\nstd::sort(l1.begin(), l1.end());\nstd::sort(l2.begin(), l2.end());\n\nstd::vector<long> result;\n\n// Use std::set_intersection to find common elements\nstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\n// Remove duplicates\nresult.erase(std::unique(result.begin(), result.end()), result.end());\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n// (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n// (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\nstd::string roman = \"\";\nstd::vector<std::pair<int, char>> value_map = {\n    {1000, 'm'}, {900, 'c'}, {500, 'd'}, {400, 'c'},\n    {100, 'c'}, {90, 'x'}, {50, 'l'}, {40, 'x'},\n    {10, 'x'}, {9, 'i'}, {5, 'v'}, {4, 'i'},\n    {1, 'i'}\n};\n\nfor (auto& pair : value_map) {\n    while (number >= pair.first) {\n        roman += pair.second;\n        number -= pair.first;\n    }\n}\n\nreturn roman;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n// (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n// (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\nstd::string result = \"\";\nstd::vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\nstd::vector<std::string> symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\nfor (int i = 0; i < values.size(); i++) {\n    while (number >= values[i]) {\n        number -= values[i];\n        result += symbols[i];\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n// (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n// (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\nstd::string result = \"\";\nstd::vector<std::pair<int, char>> roman = {\n    {1000, 'm'}, {900, 'c'}, {500, 'd'}, {400, 'c'}, {100, 'c'},\n    {90, 'x'}, {50, 'l'}, {40, 'x'}, {10, 'x'}, {9, 'i'}, {5, 'v'},\n    {4, 'i'}, {1, 'i'}\n};\n\nfor (auto &value : roman) {\n    while (number >= value.first) {\n        result += value.second;\n        number -= value.first;\n    }\n}\n\nfor (auto &c : result) {\n    c = tolower(c);\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n// (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n// (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\nstd::string roman = \"\";\nstd::vector<std::pair<int, char>> romanNumerals = {\n    {1000, 'm'},\n    {900, 'c'},\n    {500, 'd'},\n    {400, 'c'},\n    {100, 'c'},\n    {90, 'x'},\n    {50, 'l'},\n    {40, 'x'},\n    {10, 'x'},\n    {9, 'i'},\n    {5, 'v'},\n    {4, 'i'},\n    {1, 'i'}\n};\n\nfor (auto &pair : romanNumerals) {\n    while (number >= pair.first) {\n        roman += pair.second;\n        number -= pair.first;\n    }\n}\n\nreturn roman;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n// (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n// (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\nstd::string result = \"\";\nstd::vector<std::pair<int, char>> roman = {{1000, 'm'}, {900, 'c'}, {500, 'd'}, {400, 'c'}, {100, 'c'}, {90, 'x'}, {50, 'l'}, {40, 'x'}, {10, 'x'}, {9, 'i'}, {5, 'v'}, {4, 'i'}, {1, 'i'}};\n\nfor (auto &pair : roman) {\n    while (number >= pair.first) {\n        result += pair.second;\n        number -= pair.first;\n    }\n}\n\nfor (int i = 0; i < result.size(); i++) {\n    if (i + 1 < result.size() && ((result[i] == 'i' && result[i + 1] == 'x') || (result[i] == 'x' && result[i + 1] == 'c') || (result[i] == 'c' && result[i + 1] == 'm'))) {\n        result[i] = result[i + 1];\n        result[i + 1] = result[i - 1];\n        i++;\n    }\n}\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution((\"5 apples and 6 oranges\"), (19))\n// (8)\n// >>> fruit_distribution((\"0 apples and 1 oranges\"), (3))\n// (2)\n// >>> fruit_distribution((\"2 apples and 3 oranges\"), (100))\n// (95)\n// >>> fruit_distribution((\"100 apples and 1 oranges\"), (120))\n// (19)\nlong fruit_distribution(std::string s, long n) {\nstd::stringstream ss(s);\nstd::string temp;\nlong total_apples_oranges = 0;\n\nwhile (ss >> temp) {\n    if (std::isdigit(temp[0])) {\n        total_apples_oranges += std::stol(temp);\n    }\n}\n\nreturn n - total_apples_oranges;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution((\"5 apples and 6 oranges\"), (19))\n// (8)\n// >>> fruit_distribution((\"0 apples and 1 oranges\"), (3))\n// (2)\n// >>> fruit_distribution((\"2 apples and 3 oranges\"), (100))\n// (95)\n// >>> fruit_distribution((\"100 apples and 1 oranges\"), (120))\n// (19)\nlong fruit_distribution(std::string s, long n) {\nstd::istringstream iss(s);\nlong apples, oranges;\nstd::string temp;\niss >> apples >> temp >> temp >> oranges;\nlong mangoes = n - (apples + oranges);\nreturn mangoes; }",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution((\"5 apples and 6 oranges\"), (19))\n// (8)\n// >>> fruit_distribution((\"0 apples and 1 oranges\"), (3))\n// (2)\n// >>> fruit_distribution((\"2 apples and 3 oranges\"), (100))\n// (95)\n// >>> fruit_distribution((\"100 apples and 1 oranges\"), (120))\n// (19)\nlong fruit_distribution(std::string s, long n) {\n// Extract the number of apples and oranges from the string\nstd::istringstream iss(s);\nstd::string word;\nlong apples = 0, oranges = 0;\nwhile (iss >> word) {\n    if (std::isdigit(word[0])) {\n        long num = std::stol(word);\n        if (iss >> word) {\n            if (word == \"apples\") {\n                apples = num;\n            } else if (word == \"oranges\") {\n                oranges = num;\n            }\n        }\n    }\n}\n\n// Subtract the number of apples and oranges from the total to get the number of mangoes\nlong mangoes = n - (apples + oranges);\n\nreturn mangoes;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution((\"5 apples and 6 oranges\"), (19))\n// (8)\n// >>> fruit_distribution((\"0 apples and 1 oranges\"), (3))\n// (2)\n// >>> fruit_distribution((\"2 apples and 3 oranges\"), (100))\n// (95)\n// >>> fruit_distribution((\"100 apples and 1 oranges\"), (120))\n// (19)\nlong fruit_distribution(std::string s, long n) {\nlong total_apples_oranges = 0;\n\nstd::istringstream iss(s);\nstd::string word;\n\n// Parse the string and add the number of apples and oranges\nwhile (iss >> word) {\n    if (std::isdigit(word[0])) {\n        total_apples_oranges += std::stol(word);\n    }\n}\n\n// Subtract the total number of apples and oranges from the total number of fruits\nreturn n - total_apples_oranges;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution((\"5 apples and 6 oranges\"), (19))\n// (8)\n// >>> fruit_distribution((\"0 apples and 1 oranges\"), (3))\n// (2)\n// >>> fruit_distribution((\"2 apples and 3 oranges\"), (100))\n// (95)\n// >>> fruit_distribution((\"100 apples and 1 oranges\"), (120))\n// (19)\nlong fruit_distribution(std::string s, long n) {\nlong total_apples_oranges = 0;\nstd::istringstream iss(s);\nstd::string word;\n\nwhile (iss >> word) {\n    if (std::isdigit(word[0])) {\n        total_apples_oranges += std::stoi(word);\n    }\n}\n\nreturn n - total_apples_oranges;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete((\"abcde\"), (\"ae\"))\n// (std::make_tuple(\"bcd\", false))\n// >>> reverse_delete((\"abcdef\"), (\"b\"))\n// (std::make_tuple(\"acdef\", false))\n// >>> reverse_delete((\"abcdedcba\"), (\"ab\"))\n// (std::make_tuple(\"cdedc\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n// remove characters from s that are in c\nfor (char ch : c) {\n    s.erase(std::remove(s.begin(), s.end(), ch), s.end());\n}\n\n// check if s is a palindrome\nstd::string reversed_s = s;\nstd::reverse(reversed_s.begin(), reversed_s.end());\nbool is_palindrome = (s == reversed_s);\n\nreturn std::make_tuple(s, is_palindrome);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete((\"abcde\"), (\"ae\"))\n// (std::make_tuple(\"bcd\", false))\n// >>> reverse_delete((\"abcdef\"), (\"b\"))\n// (std::make_tuple(\"acdef\", false))\n// >>> reverse_delete((\"abcdedcba\"), (\"ab\"))\n// (std::make_tuple(\"cdedc\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n// Removing characters from s that are in c\nfor (char ch : c) {\n    s.erase(std::remove(s.begin(), s.end(), ch), s.end());\n}\n\n// Checking if s is a palindrome\nbool isPalindrome = true;\nfor (int i = 0, j = s.size() - 1; i < j; i++, j--) {\n    if (s[i] != s[j]) {\n        isPalindrome = false;\n        break;\n    }\n}\n\nreturn std::make_tuple(s, isPalindrome);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete((\"abcde\"), (\"ae\"))\n// (std::make_tuple(\"bcd\", false))\n// >>> reverse_delete((\"abcdef\"), (\"b\"))\n// (std::make_tuple(\"acdef\", false))\n// >>> reverse_delete((\"abcdedcba\"), (\"ab\"))\n// (std::make_tuple(\"cdedc\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n// Create a set from the string c\nstd::set<char> set_c(c.begin(), c.end());\n\n// Create a new string by removing characters from s that are in c\nstd::string result = \"\";\nfor (char ch : s) {\n    if (set_c.find(ch) == set_c.end()) {\n        result += ch;\n    }\n}\n\n// Check if the result string is a palindrome\nbool is_palindrome = true;\nint n = result.size();\nfor (int i = 0; i < n / 2; i++) {\n    if (result[i] != result[n - i - 1]) {\n        is_palindrome = false;\n        break;\n    }\n}\n\nreturn std::make_tuple(result, is_palindrome);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete((\"abcde\"), (\"ae\"))\n// (std::make_tuple(\"bcd\", false))\n// >>> reverse_delete((\"abcdef\"), (\"b\"))\n// (std::make_tuple(\"acdef\", false))\n// >>> reverse_delete((\"abcdedcba\"), (\"ab\"))\n// (std::make_tuple(\"cdedc\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n// Remove characters from s that are in c\nfor (char ch : c) {\n    s.erase(std::remove(s.begin(), s.end(), ch), s.end());\n}\n\n// Check if s is a palindrome\nstd::string reversed_s = s;\nstd::reverse(reversed_s.begin(), reversed_s.end());\nbool is_palindrome = (s == reversed_s);\n\nreturn std::make_tuple(s, is_palindrome);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete((\"abcde\"), (\"ae\"))\n// (std::make_tuple(\"bcd\", false))\n// >>> reverse_delete((\"abcdef\"), (\"b\"))\n// (std::make_tuple(\"acdef\", false))\n// >>> reverse_delete((\"abcdedcba\"), (\"ab\"))\n// (std::make_tuple(\"cdedc\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n// Remove characters in s that are also in c\nfor (char ch : c) {\n    s.erase(std::remove(s.begin(), s.end(), ch), s.end());\n}\n\n// Check if the result string is a palindrome\nstd::string reversed_s = s;\nstd::reverse(reversed_s.begin(), reversed_s.end());\nbool is_palindrome = (s == reversed_s);\n\nreturn std::make_tuple(s, is_palindrome);"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n// (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long a, long b) {\nif (b == 0)\n    return a;\nelse\n    return greatest_common_divisor(b, a % b);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n// (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long a, long b) {\nwhile (b != 0) {\n    long temp = b;\n    b = a % b;\n    a = temp;\n}\nreturn abs(a);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n// (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long a, long b) {\nif (b == 0)\n    return a;\nreturn greatest_common_divisor(b, a % b);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n// (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long a, long b) {\nwhile (b != 0) {\n    long temp = b;\n    b = a % b;\n    a = temp;\n}\nreturn abs(a);",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n// (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long a, long b) {\nwhile (b != 0) {\n        long temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return abs(a);\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string txt) {\nstd::vector<std::string> words;\nstd::istringstream iss(txt);\nstd::string token;\n\nif(txt.find(' ') != std::string::npos) {\n    while(std::getline(iss, token, ' ')) {\n        words.push_back(token);\n    }\n    return Union_std_vector_std_string__long(words);\n} else if(txt.find(',') != std::string::npos) {\n    while(std::getline(iss, token, ',')) {\n        words.push_back(token);\n    }\n    return Union_std_vector_std_string__long(words);\n} else {\n    long count = 0;\n    for(char c : txt) {\n        if(islower(c) && (c - 'a') % 2 != 0) {\n            count++;\n        }\n    }\n    return Union_std_vector_std_string__long(count);\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string txt) {\nstd::vector<std::string> words;\nstd::string word;\nstd::stringstream stream(txt);\n\nif(txt.find(' ') != std::string::npos) {\n    while(stream >> word) {\n        words.push_back(word);\n    }\n    return Union_std_vector_std_string__long(words);\n} else if(txt.find(',') != std::string::npos) {\n    while(std::getline(stream, word, ',')) {\n        words.push_back(word);\n    }\n    return Union_std_vector_std_string__long(words);\n} else {\n    long count = 0;\n    for(char c : txt) {\n        if(islower(c) && (c - 'a') % 2 != 0) {\n            count++;\n        }\n    }\n    return Union_std_vector_std_string__long(count);\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string txt) {\nstd::vector<std::string> words;\nstd::istringstream iss(txt);\nstd::string token;\n\nif(txt.find(' ') != std::string::npos) {\n    while(std::getline(iss, token, ' ')) {\n        words.push_back(token);\n    }\n    return Union_std_vector_std_string__long(words);\n} else if(txt.find(',') != std::string::npos) {\n    while(std::getline(iss, token, ',')) {\n        words.push_back(token);\n    }\n    return Union_std_vector_std_string__long(words);\n} else {\n    long odd_count = 0;\n    for(char c : txt) {\n        if(islower(c) && (c - 'a') % 2 != 0) {\n            odd_count++;\n        }\n    }\n    return Union_std_vector_std_string__long(odd_count);\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string txt) {\nstd::vector<std::string> words;\nstd::istringstream iss(txt);\nstd::string word;\nbool isWhiteSpace = txt.find(' ') != std::string::npos;\nbool isComma = txt.find(',') != std::string::npos;\n\nif (isWhiteSpace) {\n    while (std::getline(iss, word, ' ')) {\n        words.push_back(word);\n    }\n    return Union_std_vector_std_string__long(words);\n} else if (isComma) {\n    while (std::getline(iss, word, ',')) {\n        words.push_back(word);\n    }\n    return Union_std_vector_std_string__long(words);\n} else {\n    long count = 0;\n    for (char c : txt) {\n        if (islower(c) && ((c - 'a') % 2 == 1)) {\n            count++;\n        }\n    }\n    return Union_std_vector_std_string__long(count);\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string txt) {\nstd::vector<std::string> words;\nstd::stringstream ss(txt);\nstd::string word;\n\nif(txt.find(' ') != std::string::npos) {\n    while(std::getline(ss, word, ' ')) {\n        words.push_back(word);\n    }\n    return Union_std_vector_std_string__long(words);\n} else if(txt.find(',') != std::string::npos) {\n    while(std::getline(ss, word, ',')) {\n        words.push_back(word);\n    }\n    return Union_std_vector_std_string__long(words);\n} else {\n    long count = 0;\n    for(char c : txt) {\n        if(islower(c) && (c - 'a') % 2 != 0) {\n            count++;\n        }\n    }\n    return Union_std_vector_std_string__long(count);\n}\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to sort a vector of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr) {\n// Function to count number of ones in binary representation of a number\nauto countOnes = [](long n) {\n    return std::bitset<64>(n).count();\n};\n\n// Sort array based on number of ones in binary representation and then by decimal value\nstd::sort(arr.begin(), arr.end(), [&](long a, long b) {\n    int countA = countOnes(a);\n    int countB = countOnes(b);\n    if (countA == countB)\n        return a < b; // if number of ones is equal, sort by decimal value\n    return countA < countB; // else sort by number of ones\n});\n\nreturn arr;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to sort a vector of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr) {\n// Create a lambda function to count the number of ones in binary representation\nauto countOnes = [](long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n};\n\n// Sort the array\nstd::sort(arr.begin(), arr.end(), [&](long a, long b) {\n    int countA = countOnes(a);\n    int countB = countOnes(b);\n    // If the number of ones is the same, sort based on decimal value\n    if (countA == countB) {\n        return a < b;\n    }\n    // Otherwise, sort based on the number of ones\n    return countA < countB;\n});\n\nreturn arr;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to sort a vector of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr) {\n// Function to count number of ones in binary representation of a number\nauto countOnes = [](long n) {\n    int count = 0;\n    while(n) {\n        n = n & (n-1);\n        count++;\n    }\n    return count;\n};\n\n// Sort array\nstd::sort(arr.begin(), arr.end(), [countOnes](long a, long b) {\n    int countA = countOnes(a);\n    int countB = countOnes(b);\n    if(countA == countB) {\n        return a < b;\n    }\n    return countA < countB;\n});\n\nreturn arr;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to sort a vector of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr) {\n// Count the number of ones in binary representation of a number\nauto count_ones = [](long n) {\n    int count = 0;\n    while(n) {\n        n = n & (n - 1);\n        count++;\n    }\n    return count;\n};\n\n// Custom comparator for sorting\nauto compare = [&](long a, long b) {\n    int countA = count_ones(a);\n    int countB = count_ones(b);\n\n    if(countA == countB) {\n        return a < b;  // If number of ones is same, sort based on decimal value\n    }\n    return countA < countB;  // Sort based on number of ones\n};\n\nstd::sort(arr.begin(), arr.end(), compare);\n\nreturn arr;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to sort a vector of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr) {\n// Your code here\n    auto count_ones = [](long n) {\n        return std::bitset<64>(n).count();\n    };\n\n    std::sort(arr.begin(), arr.end(), [&](long a, long b) {\n        int ones_a = count_ones(a);\n        int ones_b = count_ones(b);\n        if (ones_a == ones_b) {\n            return a < b;\n        }\n        return ones_a < ones_b;\n    });\n\n    return arr;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) {\nstd::string result;\nfor (const auto& str : strings) {\n    result += str;\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) {\nstd::string result;\nfor (const auto& str : strings) {\n    result += str;\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) {\nstd::string result;\nfor(const auto& str : strings) {\n    result += str;\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) {\nstd::string result;\nfor(const auto& str : strings) {\n    result += str;\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) {\nstd::string result;\nfor(const auto& str : strings) {\n    result += str;\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted vector with a sorted order,\n// The vector is always a vector of strings and never a vector of numbers,\n// and it may contain duplicates.\n// The order of the vector should be ascending by length of each word, and you\n// should return the vector sorted by that rule.\n// If two words have the same length, sort the vector alphabetically.\n// The function should return a vector of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\nstd::vector<std::string> result;\n    \n    // Remove strings of odd length\n    for (auto it = lst.begin(); it != lst.end(); ) {\n        if (it->length() % 2 != 0) {\n            it = lst.erase(it);\n        } else {\n            ++it;\n        }\n    }\n    \n    // Sort the vector based on length and then alphabetically\n    std::sort(lst.begin(), lst.end(), [](const std::string &a, const std::string &b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n\n    return lst;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted vector with a sorted order,\n// The vector is always a vector of strings and never a vector of numbers,\n// and it may contain duplicates.\n// The order of the vector should be ascending by length of each word, and you\n// should return the vector sorted by that rule.\n// If two words have the same length, sort the vector alphabetically.\n// The function should return a vector of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\nstd::vector<std::string> result;\nfor(auto &str : lst) {\n    if(str.length() % 2 == 0) {\n        result.push_back(str);\n    }\n}\n\nstd::sort(result.begin(), result.end(), [](const std::string &a, const std::string &b) {\n    if(a.length() == b.length()) {\n        return a < b;\n    }\n    return a.length() < b.length();\n});\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted vector with a sorted order,\n// The vector is always a vector of strings and never a vector of numbers,\n// and it may contain duplicates.\n// The order of the vector should be ascending by length of each word, and you\n// should return the vector sorted by that rule.\n// If two words have the same length, sort the vector alphabetically.\n// The function should return a vector of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\nstd::vector<std::string> result;\n    for(auto &str : lst) {\n        if(str.length() % 2 == 0) {\n            result.push_back(str);\n        }\n    }\n    \n    std::sort(result.begin(), result.end(), [](const std::string &a, const std::string &b) {\n        if(a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted vector with a sorted order,\n// The vector is always a vector of strings and never a vector of numbers,\n// and it may contain duplicates.\n// The order of the vector should be ascending by length of each word, and you\n// should return the vector sorted by that rule.\n// If two words have the same length, sort the vector alphabetically.\n// The function should return a vector of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\nstd::vector<std::string> result;\n    for(auto &str : lst) {\n        if(str.size() % 2 == 0) {\n            result.push_back(str);\n        }\n    }\n    std::sort(result.begin(), result.end(), [](const std::string &a, const std::string &b) {\n        if(a.size() == b.size()) {\n            return a < b;\n        }\n        return a.size() < b.size();\n    });\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted vector with a sorted order,\n// The vector is always a vector of strings and never a vector of numbers,\n// and it may contain duplicates.\n// The order of the vector should be ascending by length of each word, and you\n// should return the vector sorted by that rule.\n// If two words have the same length, sort the vector alphabetically.\n// The function should return a vector of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\nstd::vector<std::string> result;\n\n// Remove strings with odd lengths\nfor (const auto& str : lst) {\n    if (str.size() % 2 == 0) {\n        result.push_back(str);\n    }\n}\n\n// Sort the vector by length of each word and then alphabetically\nstd::sort(result.begin(), result.end(), [](const std::string &a, const std::string &b) {\n    if (a.size() == b.size()) {\n        return a < b;\n    }\n    return a.size() < b.size();\n});\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\nstd::vector<std::string> result;\nfor(const auto& str : strings) {\n    if(str.find(substring) != std::string::npos) {\n        result.push_back(str);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\nstd::vector<std::string> result;\nfor (auto& str : strings) {\n    if (str.find(substring) != std::string::npos) {\n        result.push_back(str);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\nstd::vector<std::string> result;\nfor(const auto& str : strings) {\n    if(str.find(substring) != std::string::npos) {\n        result.push_back(str);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\nstd::vector<std::string> result;\nfor (const auto& str : strings) {\n    if (str.find(substring) != std::string::npos) {\n        result.push_back(str);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\nstd::vector<std::string> result;\nfor (const auto& str : strings) {\n    if (str.find(substring) != std::string::npos) {\n        result.push_back(str);\n    }\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) {\ndouble num = std::stod(value);\nif (num >= 0) {\n    return (long)(num + 0.5);\n} else {\n    return (long)(num - 0.5);\n}\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) {\ndouble num = std::stod(value);\nlong lower = std::floor(num);\nlong upper = std::ceil(num);\n\nif (num - lower == 0.5) {\n    return num > 0 ? upper : lower;\n}\nelse {\n    return std::round(num);\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) {\ndouble num = std::stod(value);\nlong lower = std::floor(num);\nlong upper = std::ceil(num);\n\nif (num - lower < 0.5) {\n    return lower;\n} else if (num - lower > 0.5) {\n    return upper;\n} else {\n    return num > 0 ? upper : lower;\n}}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) {\ndouble num = std::stod(value);\nlong lower = std::floor(num);\nlong upper = std::ceil(num);\n\nif (num - lower == 0.5) {\n    return num < 0 ? lower : upper;\n} else {\n    return std::round(num);\n}}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) {\ndouble num = std::stod(value);\nlong lower = std::floor(num);\nlong upper = std::ceil(num);\n\nif (num - lower < 0.5) {\n    return lower;\n} else if (num - lower > 0.5) {\n    return upper;\n} else {\n    return num > 0 ? upper : lower;\n}}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"))\n// (3)\nlong vowels_count(std::string s) {\nlong count = 0;\nstd::transform(s.begin(), s.end(), s.begin(), ::tolower);\nfor (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n        count++;\n    }\n}\nif (s[s.length()-1] == 'y') {\n    count++;\n}\nreturn count;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"))\n// (3)\nlong vowels_count(std::string s) {\nlong count = 0;\nstd::transform(s.begin(), s.end(), s.begin(), ::tolower);\nfor (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n        count++;\n    }\n    if (i == s.length() - 1 && s[i] == 'y') {\n        count++;\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"))\n// (3)\nlong vowels_count(std::string s) {\nlong count = 0;\nstd::transform(s.begin(), s.end(), s.begin(), ::tolower); // Convert string to lowercase\nfor(int i = 0; i < s.length(); i++) {\n    if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n        count++;\n    }\n    if(s[i] == 'y' && i == s.length() - 1) { // Check if 'y' is at the end of the word\n        count++;\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"))\n// (3)\nlong vowels_count(std::string s) {\nlong count = 0;\nstd::transform(s.begin(), s.end(), s.begin(), ::tolower);\nfor (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n        count++;\n    }\n}\nif (s[s.length() - 1] == 'y') {\n    count++;\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"))\n// (3)\nlong vowels_count(std::string s) {\nlong count = 0;\nstd::transform(s.begin(), s.end(), s.begin(), ::tolower);\nstd::string vowels = \"aeiou\";\nfor (char c : s) {\n    if (vowels.find(c) != std::string::npos) {\n        count++;\n    }\n}\nif (s.back() == 'y') {\n    count++;\n}\nreturn count;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings.\n// The vector contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string> words) {\nstd::string max_word = \"\";\nint max_unique_chars = 0;\n\nstd::sort(words.begin(), words.end());\n\nfor (const auto& word : words) {\n    std::set<char> unique_chars(word.begin(), word.end());\n    if (unique_chars.size() > max_unique_chars) {\n        max_unique_chars = unique_chars.size();\n        max_word = word;\n    }\n}\n\nreturn max_word;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings.\n// The vector contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string> words) {\nstd::string max_word = \"\";\nint max_unique_chars = 0;\n\nstd::sort(words.begin(), words.end());\n\nfor(const std::string& word : words) {\n    std::set<char> unique_chars(word.begin(), word.end());\n    if(unique_chars.size() > max_unique_chars) {\n        max_unique_chars = unique_chars.size();\n        max_word = word;\n    }\n}\n\nreturn max_word;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings.\n// The vector contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string> words) {\nstd::string max_word = \"\";\nint max_unique_chars = 0;\n\nstd::sort(words.begin(), words.end());\n\nfor (const auto& word : words) {\n    std::set<char> unique_chars(word.begin(), word.end());\n    if (unique_chars.size() > max_unique_chars) {\n        max_unique_chars = unique_chars.size();\n        max_word = word;\n    }\n}\n\nreturn max_word;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings.\n// The vector contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string> words) {\n// Initialize max_count to hold the maximum unique characters and max_word to hold the word with maximum unique characters\nint max_count = 0;\nstd::string max_word = \"\";\n\n// Iterate through each word in the vector\nfor (const auto& word : words) {\n    // Use a set to count unique characters in the word\n    std::set<char> unique_chars(word.begin(), word.end());\n    int unique_count = unique_chars.size();\n\n    // If the current word has more unique characters or same number of unique characters but is lexicographically smaller, update max_count and max_word\n    if (unique_count > max_count || (unique_count == max_count && word < max_word)) {\n        max_count = unique_count;\n        max_word = word;\n    }\n}\n\n// Return the word with maximum number of unique characters\nreturn max_word;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings.\n// The vector contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string> words) {\nstd::string max_word = \"\";\n    int max_unique_chars = 0;\n\n    std::sort(words.begin(), words.end());\n\n    for (const auto& word : words) {\n        std::set<char> unique_chars(word.begin(), word.end());\n        if (unique_chars.size() > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) {\n// Check if the string is empty\nif (text.empty()) {\n    return std::nullopt;\n}\n\n// Create a hash object\nMD5 md5;\n\n// Hash the string\nstd::string hash = md5(text);\n\n// Return the hash\nreturn hash;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) {\n// Check if string is empty\nif (text.empty()) {\n    return std::nullopt;\n}\n\n// Create a md5 object from openssl\nMD5_CTX md5handler;\nMD5_Init(&md5handler);\n\n// Update md5 object with our string\nMD5_Update(&md5handler, text.c_str(), text.size());\n\n// Finalize the md5 digest\nunsigned char digest[MD5_DIGEST_LENGTH];\nMD5_Final(digest, &md5handler);\n\n// Create a stringstream to hold the resultant MD5 hash\nstd::stringstream ss;\nfor (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n    ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];\n}\n\n// Return the MD5 hash as a string\nreturn ss.str(); \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) {\nif (text.empty()) {\n    return std::nullopt;\n}\n\nMD5 md5;\nstd::string hashed_text = md5(text);\n\nreturn hashed_text; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) {\nif (text.empty()) {\n    return std::nullopt;\n}\n\nMD5 md5;\nstd::string md5_hash = md5(text);\n\nreturn md5_hash;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) {\nif (text.empty()) {\n    return std::nullopt;\n}\n\nunsigned char result[MD5_DIGEST_LENGTH];\nMD5((unsigned char*)text.c_str(), text.size(), result);\n\nstd::ostringstream sout;\nsout<<std::hex<<std::setfill('0');\nfor(long long c: result)\n{\n    sout<<std::setw(2)<<(long long)c;\n}\n\nreturn sout.str();"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n// >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"111\")\nstd::string change_base(long x, long base) {\nstd::string result = \"\";\nwhile(x > 0) {\n    result = std::to_string(x % base) + result;\n    x /= base;\n}\nreturn result == \"\" ? \"0\" : result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n// >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"111\")\nstd::string change_base(long x, long base) {\nstd::string result = \"\";\nwhile(x > 0) {\n    int digit = x % base;\n    result = std::to_string(digit) + result;\n    x /= base;\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n// >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"111\")\nstd::string change_base(long x, long base) {\nstd::string result = \"\";\nwhile(x > 0) {\n    long remainder = x % base;\n    result = std::to_string(remainder) + result;\n    x /= base;\n}\nreturn result == \"\" ? \"0\" : result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n// >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"111\")\nstd::string change_base(long x, long base) {\nstd::string result = \"\";\nwhile(x > 0) {\n    int digit = x % base;\n    result = std::to_string(digit) + result;\n    x /= base;\n}\nreturn result.empty() ? \"0\" : result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n// >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"111\")\nstd::string change_base(long x, long base) {\nstd::string result = \"\";\nwhile(x > 0) {\n    result = std::to_string(x % base) + result;\n    x /= base;\n}\nreturn result.empty() ? \"0\" : result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3), (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\nbool right_angle_triangle(long a, long b, long c) {\n// First, sort the sides so that c is the longest side\nif (a > c)\n    std::swap(a, c);\nif (b > c)\n    std::swap(b, c);\n\n// Then, check for the Pythagorean theorem\nreturn a * a + b * b == c * c;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3), (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\nbool right_angle_triangle(long a, long b, long c) {\n// Sort the sides in ascending order\nif (a > b)\n    std::swap(a, b);\nif (b > c)\n    std::swap(b, c);\nif (a > b)\n    std::swap(a, b);\n\n// Check if the triangle is right-angled\nreturn c * c == a * a + b * b;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3), (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\nbool right_angle_triangle(long a, long b, long c) {\n// Sort the sides so that c is the longest side\nif (a > b)\n    std::swap(a, b);\nif (b > c)\n    std::swap(b, c);\n\n// Check for right angle triangle\nif (c * c == a * a + b * b)\n    return true;\nelse\n    return false;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3), (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\nbool right_angle_triangle(long a, long b, long c) {\n// First, sort the sides so that c is the longest\nif (a > b)\n    std::swap(a, b);\nif (b > c)\n    std::swap(b, c);\n\n// Check if the triangle is right-angled\nreturn c*c == a*a + b*b;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3), (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\nbool right_angle_triangle(long a, long b, long c) {\n// Sorting the sides in ascending order\nif (a > b)\n    std::swap(a, b);\nif (b > c)\n    std::swap(b, c);\n\n// Checking if the triangle is right-angled\nreturn c * c == a * a + b * b;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f})))\n// (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\nstd::vector<std::string> letter_grades;\nfor(auto grade : grades){\n    if(grade == 4.0f)\n        letter_grades.push_back(\"A+\");\n    else if(grade > 3.7f)\n        letter_grades.push_back(\"A\");\n    else if(grade > 3.3f)\n        letter_grades.push_back(\"A-\");\n    else if(grade > 3.0f)\n        letter_grades.push_back(\"B+\");\n    else if(grade > 2.7f)\n        letter_grades.push_back(\"B\");\n    else if(grade > 2.3f)\n        letter_grades.push_back(\"B-\");\n    else if(grade > 2.0f)\n        letter_grades.push_back(\"C+\");\n    else if(grade > 1.7f)\n        letter_grades.push_back(\"C\");\n    else if(grade > 1.3f)\n        letter_grades.push_back(\"C-\");\n    else if(grade > 1.0f)\n        letter_grades.push_back(\"D+\");\n    else if(grade > 0.7f)\n        letter_grades.push_back(\"D\");\n    else if(grade > 0.0f)\n        letter_grades.push_back(\"D-\");\n    else\n        letter_grades.push_back(\"E\");\n}\nreturn letter_grades;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f})))\n// (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\nstd::vector<std::string> letter_grades;\n\nfor (float grade : grades) {\n    if (grade == 4.0f) {\n        letter_grades.push_back(\"A+\");\n    } else if (grade > 3.7f) {\n        letter_grades.push_back(\"A\");\n    } else if (grade > 3.3f) {\n        letter_grades.push_back(\"A-\");\n    } else if (grade > 3.0f) {\n        letter_grades.push_back(\"B+\");\n    } else if (grade > 2.7f) {\n        letter_grades.push_back(\"B\");\n    } else if (grade > 2.3f) {\n        letter_grades.push_back(\"B-\");\n    } else if (grade > 2.0f) {\n        letter_grades.push_back(\"C+\");\n    } else if (grade > 1.7f) {\n        letter_grades.push_back(\"C\");\n    } else if (grade > 1.3f) {\n        letter_grades.push_back(\"C-\");\n    } else if (grade > 1.0f) {\n        letter_grades.push_back(\"D+\");\n    } else if (grade > 0.7f) {\n        letter_grades.push_back(\"D\");\n    } else if (grade > 0.0f) {\n        letter_grades.push_back(\"D-\");\n    } else {\n        letter_grades.push_back(\"E\");\n    }\n}\n\nreturn letter_grades;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f})))\n// (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\nstd::vector<std::string> letter_grades;\n\nfor (float grade : grades) {\n    if (grade == 4.0f) {\n        letter_grades.push_back(\"A+\");\n    } else if (grade > 3.7f) {\n        letter_grades.push_back(\"A\");\n    } else if (grade > 3.3f) {\n        letter_grades.push_back(\"A-\");\n    } else if (grade > 3.0f) {\n        letter_grades.push_back(\"B+\");\n    } else if (grade > 2.7f) {\n        letter_grades.push_back(\"B\");\n    } else if (grade > 2.3f) {\n        letter_grades.push_back(\"B-\");\n    } else if (grade > 2.0f) {\n        letter_grades.push_back(\"C+\");\n    } else if (grade > 1.7f) {\n        letter_grades.push_back(\"C\");\n    } else if (grade > 1.3f) {\n        letter_grades.push_back(\"C-\");\n    } else if (grade > 1.0f) {\n        letter_grades.push_back(\"D+\");\n    } else if (grade > 0.7f) {\n        letter_grades.push_back(\"D\");\n    } else if (grade > 0.0f) {\n        letter_grades.push_back(\"D-\");\n    } else {\n        letter_grades.push_back(\"E\");\n    }\n}\n\nreturn letter_grades;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f})))\n// (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\nstd::vector<std::string> letter_grades;\nfor(auto grade : grades) {\n    if(grade == 4.0f) {\n        letter_grades.push_back(\"A+\");\n    } else if(grade > 3.7f) {\n        letter_grades.push_back(\"A\");\n    } else if(grade > 3.3f) {\n        letter_grades.push_back(\"A-\");\n    } else if(grade > 3.0f) {\n        letter_grades.push_back(\"B+\");\n    } else if(grade > 2.7f) {\n        letter_grades.push_back(\"B\");\n    } else if(grade > 2.3f) {\n        letter_grades.push_back(\"B-\");\n    } else if(grade > 2.0f) {\n        letter_grades.push_back(\"C+\");\n    } else if(grade > 1.7f) {\n        letter_grades.push_back(\"C\");\n    } else if(grade > 1.3f) {\n        letter_grades.push_back(\"C-\");\n    } else if(grade > 1.0f) {\n        letter_grades.push_back(\"D+\");\n    } else if(grade > 0.7f) {\n        letter_grades.push_back(\"D\");\n    } else if(grade > 0.0f) {\n        letter_grades.push_back(\"D-\");\n    } else {\n        letter_grades.push_back(\"E\");\n    }\n}\nreturn letter_grades;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f})))\n// (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\nstd::vector<std::string> letter_grades;\nfor(float grade : grades){\n    if(grade == 4.0f){\n        letter_grades.push_back(\"A+\");\n    }\n    else if(grade > 3.7f){\n        letter_grades.push_back(\"A\");\n    }\n    else if(grade > 3.3f){\n        letter_grades.push_back(\"A-\");\n    }\n    else if(grade > 3.0f){\n        letter_grades.push_back(\"B+\");\n    }\n    else if(grade > 2.7f){\n        letter_grades.push_back(\"B\");\n    }\n    else if(grade > 2.3f){\n        letter_grades.push_back(\"B-\");\n    }\n    else if(grade > 2.0f){\n        letter_grades.push_back(\"C+\");\n    }\n    else if(grade > 1.7f){\n        letter_grades.push_back(\"C\");\n    }\n    else if(grade > 1.3f){\n        letter_grades.push_back(\"C-\");\n    }\n    else if(grade > 1.0f){\n        letter_grades.push_back(\"D+\");\n    }\n    else if(grade > 0.7f){\n        letter_grades.push_back(\"D\");\n    }\n    else if(grade > 0.0f){\n        letter_grades.push_back(\"D-\");\n    }\n    else{\n        letter_grades.push_back(\"E\");\n    }\n}\nreturn letter_grades;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n// >>> intersperse((std::vector<long>()), (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1, (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4, (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\nstd::vector<long> result;\nif(numbers.empty()) return result;\n\nfor(int i = 0; i < numbers.size() - 1; ++i) {\n    result.push_back(numbers[i]);\n    result.push_back(delimeter);\n}\nresult.push_back(numbers.back());\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n// >>> intersperse((std::vector<long>()), (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1, (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4, (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\nstd::vector<long> result;\n    if(numbers.empty()) return result;\n    for(int i=0; i<numbers.size()-1; i++){\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.push_back(numbers.back());\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n// >>> intersperse((std::vector<long>()), (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1, (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4, (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\nstd::vector<long> result;\nif(numbers.empty()) return result;\n\nfor(size_t i = 0; i < numbers.size() - 1; ++i) {\n    result.push_back(numbers[i]);\n    result.push_back(delimeter);\n}\nresult.push_back(numbers.back());\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n// >>> intersperse((std::vector<long>()), (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1, (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4, (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\nstd::vector<long> result;\n    if(numbers.empty()) {\n        return result;\n    }\n    for(size_t i = 0; i < numbers.size() - 1; ++i) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.push_back(numbers.back());\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n// >>> intersperse((std::vector<long>()), (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1, (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4, (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\nstd::vector<long> result;\nfor (size_t i = 0; i < numbers.size(); ++i) {\n    result.push_back(numbers[i]);\n    if (i != numbers.size() - 1) {\n        result.push_back(delimeter);\n    }\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector of numbers as input and returns \n// the number of elements in the vector that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long> nums) {\nlong count = 0;\nfor(auto num : nums) {\n    if(num > 10) {\n        std::string numStr = std::to_string(num);\n        char firstDigit = numStr[0];\n        char lastDigit = numStr[numStr.length()-1];\n        if((firstDigit == '1' || firstDigit == '3' || firstDigit == '5' || \n            firstDigit == '7' || firstDigit == '9') && \n           (lastDigit == '1' || lastDigit == '3' || lastDigit == '5' || \n            lastDigit == '7' || lastDigit == '9')) {\n            count++;\n        }\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector of numbers as input and returns \n// the number of elements in the vector that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long> nums) {\nlong count = 0;\nfor(auto num : nums) {\n    if(num > 10) {\n        long firstDigit, lastDigit;\n        lastDigit = abs(num) % 10;\n        while(num) {\n            firstDigit = num % 10;\n            num /= 10;\n        }\n        if(firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n            count++;\n        }\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector of numbers as input and returns \n// the number of elements in the vector that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long> nums) {\nlong count = 0;\nfor(auto num : nums) {\n    if(num > 10) {\n        std::string numStr = std::to_string(num);\n        char firstDigit = numStr[0];\n        char lastDigit = numStr[numStr.length() - 1];\n        if((firstDigit == '1' || firstDigit == '3' || firstDigit == '5' || firstDigit == '7' || firstDigit == '9') &&\n           (lastDigit == '1' || lastDigit == '3' || lastDigit == '5' || lastDigit == '7' || lastDigit == '9')) {\n            count++;\n        }\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector of numbers as input and returns \n// the number of elements in the vector that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long> nums) {\nlong count = 0;\nfor(long num : nums) {\n    if(num > 10) {\n        long firstDigit = num, lastDigit = num % 10;\n        while(firstDigit >= 10) {\n            firstDigit /= 10;\n        }\n        if(firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n            count++;\n        }\n    }\n}\nreturn count;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector of numbers as input and returns \n// the number of elements in the vector that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long> nums) {\nlong count = 0;\nfor(auto num : nums){\n    if(num > 10){\n        long firstDigit, lastDigit;\n        lastDigit = abs(num) % 10;\n        while(num){\n            firstDigit = abs(num) % 10;\n            num /= 10;\n        }\n        if(firstDigit % 2 != 0 && lastDigit % 2 != 0){\n            count++;\n        }\n    }\n}\nreturn count;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n((30))\n// (465)\n// >>> sum_to_n((100))\n// (5050)\n// >>> sum_to_n((5))\n// (15)\n// >>> sum_to_n((10))\n// (55)\n// >>> sum_to_n((1))\n// (1)\nlong sum_to_n(long n) {\nreturn n * (n + 1) / 2; \n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n((30))\n// (465)\n// >>> sum_to_n((100))\n// (5050)\n// >>> sum_to_n((5))\n// (15)\n// >>> sum_to_n((10))\n// (55)\n// >>> sum_to_n((1))\n// (1)\nlong sum_to_n(long n) {\n// Check if n is positive\nif(n < 1) return 0;\n\n// Calculate the sum using the formula for the sum of an arithmetic series\nreturn n * (n + 1) / 2;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n((30))\n// (465)\n// >>> sum_to_n((100))\n// (5050)\n// >>> sum_to_n((5))\n// (15)\n// >>> sum_to_n((10))\n// (55)\n// >>> sum_to_n((1))\n// (1)\nlong sum_to_n(long n) {\nreturn n * (n + 1) / 2;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n((30))\n// (465)\n// >>> sum_to_n((100))\n// (5050)\n// >>> sum_to_n((5))\n// (15)\n// >>> sum_to_n((10))\n// (55)\n// >>> sum_to_n((1))\n// (1)\nlong sum_to_n(long n) {\nreturn n * (n + 1) / 2;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n((30))\n// (465)\n// >>> sum_to_n((100))\n// (5050)\n// >>> sum_to_n((5))\n// (15)\n// >>> sum_to_n((10))\n// (55)\n// >>> sum_to_n((1))\n// (1)\nlong sum_to_n(long n) {\nreturn n * (n + 1) / 2;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\nstd::vector<long> result;\nstd::unordered_set<long> seen;\n\nfor (const auto& num : numbers) {\n    if (seen.find(num) == seen.end()) {\n        result.push_back(num);\n        seen.insert(num);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\nstd::vector<long> result;\nstd::unordered_set<long> seen;\n\nfor (const auto& number : numbers) {\n    if (seen.find(number) == seen.end()) {\n        seen.insert(number);\n        result.push_back(number);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\nstd::vector<long> result;\nstd::unordered_set<long> seen;\n\nfor (long num : numbers) {\n    if (seen.find(num) == seen.end()) {\n        seen.insert(num);\n        result.push_back(num);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\nstd::vector<long> result;\nstd::unordered_set<long> seen;\n\nfor (auto num : numbers) {\n    if (seen.find(num) == seen.end()) {\n        seen.insert(num);\n        result.push_back(num);\n    }\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\nstd::vector<long> result;\nstd::unordered_set<long> seen;\n\nfor (auto num : numbers) {\n    if (seen.find(num) == seen.end()) {\n        seen.insert(num);\n        result.push_back(num);\n    }\n}\n\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers((2), (8))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((8), (2))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((10), (14))\n// (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) {\nstd::vector<long> result;\nif(a > b)\n    std::swap(a, b);\nfor(long i=a; i<=b; i++) {\n    if(i%2 == 0) {\n        result.push_back(i);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers((2), (8))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((8), (2))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((10), (14))\n// (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) {\nstd::vector<long> result;\nif(a > b) std::swap(a, b);\nfor(long i = a; i <= b; i++) {\n    if(i % 2 == 0) {\n        result.push_back(i);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers((2), (8))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((8), (2))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((10), (14))\n// (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) {\nstd::vector<long> result;\nif(a > b) std::swap(a, b);\nfor(long i = a; i <= b; i++) {\n    if(i % 2 == 0) {\n        result.push_back(i);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers((2), (8))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((8), (2))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((10), (14))\n// (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) {\nstd::vector<long> result;\nif(a > b) std::swap(a, b);\nfor(long i = a; i <= b; i++) {\n    if(i % 2 == 0) result.push_back(i);\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers((2), (8))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((8), (2))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((10), (14))\n// (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) {\nstd::vector<long> result;\nif(a > b) std::swap(a, b);\nfor(long i = a; i <= b; i++) {\n    if(i % 2 == 0) {\n        result.push_back(i);\n    }\n}\nreturn result;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) {\nstd::vector<long> maxNumbers;\nlong max = numbers[0];\n\nfor(auto num : numbers) {\n    if(num > max) {\n        max = num;\n    }\n    maxNumbers.push_back(max);\n}\n\nreturn maxNumbers;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) {\nstd::vector<long> result;\nlong max_number = LONG_MIN;\n\nfor (long number : numbers) {\n    if (number > max_number) {\n        max_number = number;\n    }\n    result.push_back(max_number);\n}\n\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) {\nstd::vector<long> result;\n    long max = LONG_MIN;\n\n    for(long num : numbers) {\n        if(num > max) {\n            max = num;\n        }\n        result.push_back(max);\n    }\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) {\nstd::vector<long> result;\n    long max = LONG_MIN;\n    for (long num : numbers) {\n        if (num > max) {\n            max = num;\n        }\n        result.push_back(max);\n    }\n    return result;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) {\nstd::vector<long> result;\n    long max = LONG_MIN;\n\n    for (long num : numbers) {\n        if (num > max) {\n            max = num;\n        }\n        result.push_back(max);\n    }\n\n    return result;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations) {\nlong balance = 0;\nfor(auto operation : operations) {\n    balance += operation;\n    if(balance < 0) {\n        return true;\n    }\n}\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations) {\nlong balance = 0;\nfor (auto operation : operations) {\n    balance += operation;\n    if (balance < 0) {\n        return true;\n    }\n}\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations) {\nlong balance = 0;\nfor(auto operation : operations) {\n    balance += operation;\n    if(balance < 0) {\n        return true;\n    }\n}\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations) {\nlong balance = 0;\nfor (auto operation : operations) {\n    balance += operation;\n    if (balance < 0) {\n        return true;\n    }\n}\nreturn false;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations) {\nlong balance = 0;\nfor (long operation : operations) {\n    balance += operation;\n    if (balance < 0) {\n        return true;\n    }\n}\nreturn false;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4, (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n// (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\nstd::map<long, long> freq;\nlong max_val = -1;\n\nfor (auto &num : lst) {\n    freq[num]++;\n    if (freq[num] >= num && num > max_val) {\n        max_val = num;\n    }\n}\n\nreturn max_val;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4, (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n// (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\nstd::map<long, long> freq;\nlong result = -1;\nfor (long num : lst) {\n    freq[num]++;\n    if (freq[num] >= num) {\n        result = std::max(result, num);\n    }\n}\nreturn result;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4, (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n// (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\nstd::map<long, long> freq;\nfor (auto &num : lst) {\n    freq[num]++;\n}\n\nlong max_val = -1;\nfor (auto &pair : freq) {\n    if (pair.first <= pair.second && pair.first > max_val) {\n        max_val = pair.first;\n    }\n}\nreturn max_val;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4, (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n// (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\nstd::map<long, long> freq;\nlong max_val = -1;\n\nfor (long num : lst) {\n    freq[num]++;\n}\n\nfor (auto it : freq) {\n    if (it.first <= it.second && it.first > max_val) {\n        max_val = it.first;\n    }\n}\n\nreturn max_val;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4, (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n// (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\nstd::unordered_map<long, long> count_map;\nfor (auto& num : lst) {\n    count_map[num]++;\n}\n\nlong max_val = -1;\nfor (auto& pair : count_map) {\n    if (pair.first <= pair.second) {\n        max_val = std::max(max_val, pair.first);\n    }\n}\n\nreturn max_val;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\nint count = 0;\nfor (char c : brackets) {\n    if (c == '(') {\n        count++;\n    } else if (c == ')') {\n        count--;\n    }\n    if (count < 0) {\n        return false;\n    }\n}\nreturn count == 0;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\nint count = 0;\nfor (char c : brackets) {\n    if (c == '(') {\n        count++;\n    } else if (c == ')') {\n        count--;\n    }\n    if (count < 0) {\n        return false;\n    }\n}\nreturn count == 0;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\nint counter = 0;\nfor (char c : brackets) {\n    if (c == '(') {\n        counter++;\n    } else if (c == ')') {\n        counter--;\n    }\n    if (counter < 0) {\n        return false;\n    }\n}\nreturn counter == 0;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\nint count = 0;\nfor (char c : brackets) {\n    if (c == '(') {\n        count++;\n    } else if (c == ')') {\n        count--;\n    }\n    if (count < 0) {\n        return false;\n    }\n}\nreturn count == 0;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\nint count = 0;\nfor(char& c : brackets) {\n    if(c == '(') {\n        count++;\n    } else if(c == ')') {\n        count--;\n    }\n    if(count < 0) {\n        return false;\n    }\n}\nreturn count == 0;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_even((std::vector<long>({(long)5, (long)6, (long)3, (long)4})))\n// (std::vector<long>({(long)3, (long)6, (long)5, (long)4}))\nstd::vector<long> sort_even(std::vector<long> l) {\nstd::vector<long> even_indices_values;\nstd::vector<long> sorted_l = l;\n\n// Extract the values at even indices\nfor (int i = 0; i < l.size(); i += 2) {\n    even_indices_values.push_back(l[i]);\n}\n\n// Sort the extracted values\nstd::sort(even_indices_values.begin(), even_indices_values.end());\n\n// Replace the values at even indices in the original vector with the sorted values\nfor (int i = 0, j = 0; i < l.size(); i += 2, j++) {\n    sorted_l[i] = even_indices_values[j];\n}\n\nreturn sorted_l;\n",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_even((std::vector<long>({(long)5, (long)6, (long)3, (long)4})))\n// (std::vector<long>({(long)3, (long)6, (long)5, (long)4}))\nstd::vector<long> sort_even(std::vector<long> l) {\nstd::vector<long> even_elements;\nstd::vector<long> sorted_l = l;\n\n// Extract the even indexed elements\nfor (size_t i = 0; i < l.size(); i += 2) {\n    even_elements.push_back(l[i]);\n}\n\n// Sort the even indexed elements\nstd::sort(even_elements.begin(), even_elements.end());\n\n// Replace the even indexed elements in the original vector with the sorted ones\nfor (size_t i = 0, j = 0; i < l.size() && j < even_elements.size(); i += 2, ++j) {\n    sorted_l[i] = even_elements[j];\n}\n\nreturn sorted_l;\n",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_even((std::vector<long>({(long)5, (long)6, (long)3, (long)4})))\n// (std::vector<long>({(long)3, (long)6, (long)5, (long)4}))\nstd::vector<long> sort_even(std::vector<long> l) {\nstd::vector<long> even_indices_values;\nfor (size_t i = 0; i < l.size(); i += 2) {\n    even_indices_values.push_back(l[i]);\n}\n\nstd::sort(even_indices_values.begin(), even_indices_values.end());\n\nfor (size_t i = 0, j = 0; i < l.size(); i += 2, ++j) {\n    l[i] = even_indices_values[j];\n}\n\nreturn l;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_even((std::vector<long>({(long)5, (long)6, (long)3, (long)4})))\n// (std::vector<long>({(long)3, (long)6, (long)5, (long)4}))\nstd::vector<long> sort_even(std::vector<long> l) {\nstd::vector<long> even_indices_values;\nfor (std::size_t i = 0; i < l.size(); i += 2) {\n    even_indices_values.push_back(l[i]);\n}\n\nstd::sort(even_indices_values.begin(), even_indices_values.end());\n\nfor (std::size_t i = 0, j = 0; i < l.size(); i += 2, ++j) {\n    l[i] = even_indices_values[j];\n}\n\nreturn l;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_even((std::vector<long>({(long)5, (long)6, (long)3, (long)4})))\n// (std::vector<long>({(long)3, (long)6, (long)5, (long)4}))\nstd::vector<long> sort_even(std::vector<long> l) {\nstd::vector<long> even_indices;\nstd::vector<long> result = l;\n\nfor (int i = 0; i < l.size(); i += 2) {\n    even_indices.push_back(l[i]);\n}\n\nstd::sort(even_indices.begin(), even_indices.end());\n\nfor (int i = 0, j = 0; i < l.size(); i += 2, j++) {\n    result[i] = even_indices[j];\n}\n\nreturn result;\n}"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the same characters.\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n// (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string s0, std::string s1) {\nstd::sort(s0.begin(), s0.end());\nstd::sort(s1.begin(), s1.end());\nreturn s0 == s1;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the same characters.\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n// (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string s0, std::string s1) {\n// Create frequency count arrays for both strings and initialize them as 0\n    int count_s0[256] = {0};\n    int count_s1[256] = {0};\n\n    // Update the frequency count of each character in the strings\n    for (int i = 0; s0[i] && s1[i]; i++) {\n        count_s0[s0[i]]++;\n        count_s1[s1[i]]++;\n    }\n\n    // Compare the frequency counts\n    for (int i = 0; i < 256; i++) {\n        if (count_s0[i] != count_s1[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the same characters.\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n// (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string s0, std::string s1) {\n// Sort the strings\nstd::sort(s0.begin(), s0.end());\nstd::sort(s1.begin(), s1.end());\n\n// Compare the sorted strings\nreturn s0 == s1;\n}",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the same characters.\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n// (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string s0, std::string s1) {\n// sort both strings\nstd::sort(s0.begin(), s0.end());\nstd::sort(s1.begin(), s1.end());\n\n// remove duplicate characters from both strings\ns0.erase(std::unique(s0.begin(), s0.end()), s0.end());\ns1.erase(std::unique(s1.begin(), s1.end()), s1.end());\n\n// return true if both strings are equal, false otherwise\nreturn s0 == s1;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the same characters.\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n// (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string s0, std::string s1) {\n// Create a map to store the frequency of characters\nstd::map<char, int> freq_map;\n\n// Increment the frequency of each character in the first string\nfor (char c : s0) {\n    freq_map[c]++;\n}\n\n// Decrement the frequency of each character in the second string\nfor (char c : s1) {\n    freq_map[c]--;\n}\n\n// If the frequency of any character is not zero, the strings do not have the same characters\nfor (auto pair : freq_map) {\n    if (pair.second != 0) {\n        return false;\n    }\n}\n\n// If we have not returned false by now, the strings have the same characters\nreturn true;"
    ],
    [
        "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"<>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\nint count = 0;\nfor (char c : brackets) {\n    if (c == '<') {\n        count++;\n    } else if (c == '>') {\n        count--;\n    }\n    if (count < 0) {\n        return false;\n    }\n}\nreturn count == 0;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"<>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\nint count = 0;\nfor (char c : brackets) {\n    if (c == '<') {\n        count++;\n    } else if (c == '>') {\n        if (count == 0) {\n            return false;\n        }\n        count--;\n    } else {\n        return false; // invalid character\n    }\n}\nreturn count == 0; // if count is not zero, there are unmatched opening brackets.",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"<>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\nint counter = 0;\nfor (char& c : brackets) {\n    if (c == '<') {\n        counter++;\n    } else if (c == '>') {\n        if (counter == 0) {\n            return false;\n        }\n        counter--;\n    }\n}\nreturn counter == 0;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"<>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\nint count = 0;\nfor (char c : brackets) {\n    if (c == '<') {\n        count++;\n    } else if (c == '>') {\n        if (count == 0) {\n            return false;\n        }\n        count--;\n    }\n}\nreturn count == 0;",
        "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"<>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\nint count = 0;\nfor (char c : brackets) {\n    if (c == '<') {\n        count++;\n    } else if (c == '>') {\n        if (count == 0) {\n            return false;\n        }\n        count--;\n    }\n}\nreturn count == 0;"
    ]
]